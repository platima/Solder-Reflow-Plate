
C:\Users\Owner\AppData\Local\Temp\arduino_build_255866/SW1.0_HW3.0_70by50mm.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	85 c6       	rjmp	.+3338   	; 0xd0c <__dtors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	ab c6       	rjmp	.+3414   	; 0xd5c <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	a9 c6       	rjmp	.+3410   	; 0xd5c <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	a7 c6       	rjmp	.+3406   	; 0xd5c <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	a5 c6       	rjmp	.+3402   	; 0xd5c <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	a3 c6       	rjmp	.+3398   	; 0xd5c <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	a1 c6       	rjmp	.+3394   	; 0xd5c <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	9f c6       	rjmp	.+3390   	; 0xd5c <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	9d c6       	rjmp	.+3386   	; 0xd5c <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	9b c6       	rjmp	.+3382   	; 0xd5c <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	99 c6       	rjmp	.+3378   	; 0xd5c <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	97 c6       	rjmp	.+3374   	; 0xd5c <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	95 c6       	rjmp	.+3370   	; 0xd5c <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	93 c6       	rjmp	.+3366   	; 0xd5c <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__vector_14>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	8d c6       	rjmp	.+3354   	; 0xd5c <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	8b c6       	rjmp	.+3350   	; 0xd5c <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	89 c6       	rjmp	.+3346   	; 0xd5c <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	87 c6       	rjmp	.+3342   	; 0xd5c <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	85 c6       	rjmp	.+3338   	; 0xd5c <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	83 c6       	rjmp	.+3334   	; 0xd5c <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	81 c6       	rjmp	.+3330   	; 0xd5c <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	7f c6       	rjmp	.+3326   	; 0xd5c <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	7d c6       	rjmp	.+3322   	; 0xd5c <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__vector_25>
../../../../crt1/gcrt1.S:92
      68:	79 c6       	rjmp	.+3314   	; 0xd5c <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	77 c6       	rjmp	.+3310   	; 0xd5c <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	75 c6       	rjmp	.+3306   	; 0xd5c <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	73 c6       	rjmp	.+3302   	; 0xd5c <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	71 c6       	rjmp	.+3298   	; 0xd5c <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	6f c6       	rjmp	.+3294   	; 0xd5c <__bad_interrupt>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	6d c6       	rjmp	.+3290   	; 0xd5c <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	6b c6       	rjmp	.+3286   	; 0xd5c <__bad_interrupt>
      86:	00 00       	nop
../../../../crt1/gcrt1.S:100
      88:	69 c6       	rjmp	.+3282   	; 0xd5c <__bad_interrupt>
      8a:	00 00       	nop
../../../../crt1/gcrt1.S:101
      8c:	67 c6       	rjmp	.+3278   	; 0xd5c <__bad_interrupt>
      8e:	00 00       	nop
../../../../crt1/gcrt1.S:102
      90:	65 c6       	rjmp	.+3274   	; 0xd5c <__bad_interrupt>
      92:	00 00       	nop
../../../../crt1/gcrt1.S:103
      94:	63 c6       	rjmp	.+3270   	; 0xd5c <__bad_interrupt>
      96:	00 00       	nop
../../../../crt1/gcrt1.S:104
      98:	61 c6       	rjmp	.+3266   	; 0xd5c <__bad_interrupt>
      9a:	00 00       	nop
../../../../crt1/gcrt1.S:105
      9c:	5f c6       	rjmp	.+3262   	; 0xd5c <__bad_interrupt>
	...

000000a0 <__trampolines_end>:
__trampolines_start():
      a0:	21 00       	.word	0x0021	; ????

000000a2 <cancelledTimer()::__c>:
      a2:	21 00                                               !.

000000a4 <cancelledTimer()::__c>:
      a4:	20 20 54 49 4d 45 44 20 4f 55 54 00                   TIMED OUT.

000000b0 <heat(unsigned char)::__c>:
      b0:	43 00                                               C.

000000b2 <heat(unsigned char)::__c>:
      b2:	7e 00                                               ~.

000000b4 <heat(unsigned char)::__c>:
      b4:	56 00                                               V.

000000b6 <heat(unsigned char)::__c>:
      b6:	7e 00                                               ~.

000000b8 <heat(unsigned char)::__c>:
      b8:	48 45 41 54 49 4e 47 00                             HEATING.

000000c0 <heat_animate>:
      c0:	01 00 01 80 01 80 01 40 02 40 22 44 24 24 55 26     .......@.@"D$$U&
      d0:	49 96 82 89 a4 41 98 52 44 62 23 84 18 18 07 e0     I....A.RDb#.....

000000e0 <heat(unsigned char)::__c>:
      e0:	43 00                                               C.

000000e2 <heat(unsigned char)::__c>:
      e2:	48 45 41 54 49 4e 47 00                             HEATING.

000000ea <cancelledPB()::__c>:
      ea:	21 00                                               !.

000000ec <cancelledPB()::__c>:
      ec:	21 00                                               !.

000000ee <cancelledPB()::__c>:
      ee:	20 20 43 41 4e 43 45 4c 4c 45 44 00                   CANCELLED.

000000fa <coolDown()::__c>:
      fa:	21 00                                               !.

000000fc <coolDown()::__c>:
      fc:	21 00                                               !.

000000fe <coolDown()::__c>:
      fe:	43 00                                               C.

00000100 <coolDown()::__c>:
     100:	7e 00                                               ~.

00000102 <coolDown()::__c>:
     102:	20 20 43 4f 4f 4c 20 44 4f 57 4e 00                   COOL DOWN.

0000010e <tick>:
     10e:	00 04 00 0a 00 15 00 2a 00 54 00 a8 01 50 22 a0     .......*.T...P".
     11e:	55 40 aa 80 55 00 2a 00 14 00 08 00 7f e0           U@..U.*.......

0000012c <completed()::__c>:
     12c:	20 20 43 4f 4d 50 4c 45 54 45 44 20 20 00             COMPLETED  .

0000013a <main_menu()::__c>:
     13a:	43 00                                               C.

0000013c <main_menu()::__c>:
     13c:	54 45 4d 50 00                                      TEMP.

00000141 <main_menu()::__c>:
     141:	42 65 67 69 6e 20 48 65 61 74 69 6e 67 00           Begin Heating.

0000014f <main_menu()::__c>:
     14f:	42 4f 54 48 20 20 42 55 54 54 4f 4e 53 00           BOTH  BUTTONS.

0000015d <main_menu()::__c>:
     15d:	20 54 65 6d 70 65 72 61 74 75 72 65 00               Temperature.

0000016a <main_menu()::__c>:
     16a:	20 43 68 61 6e 67 65 20 20 4d 41 58 00               Change  MAX.

00000177 <main_menu()::__c>:
     177:	53 49 4e 47 4c 45 20 42 55 54 54 4f 4e 00           SINGLE BUTTON.

00000185 <font>:
     185:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     195:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1a5:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1b5:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1c5:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1d5:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1e5:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1f5:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     205:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     215:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     225:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     235:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     245:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     255:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     265:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     275:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     285:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     295:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2a5:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2b5:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2c5:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2d5:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2e5:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2f5:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     305:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     315:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     325:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     335:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     345:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     355:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     365:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     375:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     385:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     395:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3a5:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3b5:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3c5:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3d5:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3e5:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3f5:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     405:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     415:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     425:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     435:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     445:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     455:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     465:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     475:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     485:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     495:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4a5:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4b5:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4c5:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4d5:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4e5:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4f5:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     505:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     515:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     525:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     535:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     545:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     555:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     565:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     575:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     585:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     595:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5a5:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5b5:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5c5:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5d5:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5e5:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5f5:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     605:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     615:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     625:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     635:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     645:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     655:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     665:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     675:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000685 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::postmask>:
     685:	00 01 03 07 0f 1f 3f 7f                             ......?.

0000068d <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::premask>:
     68d:	00 80 c0 e0 f0 f8 fc fe                             ........

00000695 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
     695:	db 40 a4 a6 2e af                                   .@....

0000069b <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
     69b:	20 00 a1 c8                                          ...

0000069f <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
     69f:	d3 00 40 8d                                         ..@.

000006a3 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
     6a3:	ae d5 80 a8                                         ....

000006a7 <splash2_data>:
     6a7:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     6b7:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     6c7:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6e3:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6f3:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     703:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     713:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     723:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     733:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     743:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     753:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     763:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     773:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     783:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     793:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     7a3:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     7b3:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     7c3:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7d3:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7e3:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7f3:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     803:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     813:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     823:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     83b:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     84b:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     85b:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     86b:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     87b:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000887 <splash1_data>:
     887:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     897:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     8a7:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     8b7:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     8c7:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8d7:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8ef:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8ff:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     90f:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     91f:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     92f:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     93f:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     94f:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     95f:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     96f:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     97f:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     98f:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     99f:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     9af:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     9bf:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     9cf:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9df:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9ef:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9ff:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     a17:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     a2f:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a3f:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a4f:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a5f:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a6f:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a7f:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a8f:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a9f:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     aaf:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     abf:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     acf:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     adf:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     aef:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     aff:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     b0f:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     b1f:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     b2f:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b3f:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b47 <setup::__c>:
     b47:	48 2f 57 20 56 00                                   H/W V.

00000b4d <setup::__c>:
     b4d:	53 2f 57 20 56 00                                   S/W V.

00000b53 <logo>:
     b53:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b63:	00 00 00 01 80 00 00 00 00 00 1f 00 00 00 00 00     ................
     b73:	00 00 00 01 80 00 00 1f c0 00 31 80 00 00 00 00     ..........1.....
     b83:	1f e0 03 01 80 00 00 30 70 00 21 80 00 00 00 00     .......0p.!.....
     b93:	10 20 03 00 c7 80 00 20 18 f0 61 80 00 00 00 00     . ..... ..a.....
     ba3:	18 00 03 3e cc c0 c0 04 19 98 61 80 00 00 00 00     ...>......a.....
     bb3:	1c 01 f3 77 d8 c7 e0 06 33 18 61 8f 88 00 00 00     ...w....3.a.....
     bc3:	06 03 3b 61 d0 c6 00 07 e2 18 61 98 d8 04 00 00     ..;a......a.....
     bd3:	01 c6 0b 60 d9 86 00 06 03 30 ff b0 78 66 00 00     ...`.....0..xf..
     be3:	40 e4 0f 60 df 06 00 07 03 e0 31 e0 78 62 00 00     @..`......1.xb..
     bf3:	40 3c 0f 61 d8 06 00 07 83 00 31 e0 78 63 00 00     @<.a......1.xc..
     c03:	60 36 1b 63 c8 02 00 02 c1 00 18 b0 cc e2 00 00     `6.c............
     c13:	30 33 3b 36 4e 03 00 02 61 c0 0c 99 cd fe 00 00     03;6N...a.......
     c23:	0f e1 e1 3c 03 f3 00 02 38 7e 0c 8f 07 9c 00 00     ...<....8~......
	...
     c3b:	08 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00     ................
	...
     c53:	7f 84 00 18 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c63:	c0 e4 00 18 38 00 00 00 00 00 00 00 00 00 00 00     ....8...........
     c73:	04 3c 3c 18 6c 00 00 00 00 00 00 00 00 00 00 00     .<<.l...........
     c83:	04 1e 06 7f c6 00 00 00 00 00 00 00 00 00 00 00     ................
     c93:	04 3e 03 18 86 00 00 00 00 00 00 00 00 00 00 00     .>..............
     ca3:	04 36 7f 19 8c 00 00 00 00 00 00 00 00 00 00 00     .6..............
     cb3:	07 e6 c7 19 f8 00 00 00 00 00 00 00 00 00 00 00     ................
     cc3:	06 07 83 18 80 00 00 00 00 00 00 00 00 00 00 00     ................
     cd3:	06 07 81 18 c0 00 00 00 00 00 00 00 00 00 00 00     ................
     ce3:	06 06 c3 98 70 00 00 00 00 00 00 00 00 00 00 00     ....p...........
     cf3:	02 04 7e 08 3f 80 00 00 00 00 00 00 00 00 00 00     ..~.?...........

00000d03 <Adafruit_SSD1306::display()::dlist1>:
     d03:	22 00 ff 21 00                                      "..!.

00000d08 <__ctors_start>:
__ctors_start():
     d08:	ce 1f       	adc	r28, r30

00000d0a <__ctors_end>:
__dtors_start():
     d0a:	e9 23       	and	r30, r25

00000d0c <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     d0c:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     d0e:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     d10:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     d12:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     d14:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     d16:	de bf       	out	0x3e, r29	; 62

00000d18 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     d18:	28 e2       	ldi	r18, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     d1a:	a6 e0       	ldi	r26, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     d1c:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <.do_clear_bss_start>

00000d20 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     d20:	1d 92       	st	X+, r1

00000d22 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     d22:	ab 3d       	cpi	r26, 0xDB	; 219
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     d24:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     d26:	e1 f7       	brne	.-8      	; 0xd20 <.do_clear_bss_loop>

00000d28 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     d28:	18 e2       	ldi	r17, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     d2c:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     d2e:	e1 e5       	ldi	r30, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     d30:	f1 e5       	ldi	r31, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     d34:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     d36:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     d38:	a6 30       	cpi	r26, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     d3a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     d3c:	d9 f7       	brne	.-10     	; 0xd34 <__do_copy_data+0xc>

00000d3e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     d3e:	16 e0       	ldi	r17, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     d40:	c5 e8       	ldi	r28, 0x85	; 133
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     d42:	d6 e0       	ldi	r29, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     d46:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     d48:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     d4a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     d4e:	c4 38       	cpi	r28, 0x84	; 132
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     d50:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     d54:	0e 94 4c 20 	call	0x4098	; 0x4098 <main>
../../../../crt1/gcrt1.S:315
     d58:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__do_global_dtors>

00000d5c <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     d5c:	51 c9       	rjmp	.-3422   	; 0x0 <__vectors>

00000d5e <Adafruit_GFX::startWrite()>:
startWrite():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:180
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
     d5e:	08 95       	ret

00000d60 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	6c 01       	movw	r12, r24
     d76:	7b 01       	movw	r14, r22
     d78:	8b 01       	movw	r16, r22
     d7a:	04 0f       	add	r16, r20
     d7c:	15 1f       	adc	r17, r21
     d7e:	eb 01       	movw	r28, r22
     d80:	5e 01       	movw	r10, r28
     d82:	ae 18       	sub	r10, r14
     d84:	bf 08       	sbc	r11, r15
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:32
  size_t n = 0;
  while (size--)
     d86:	c0 17       	cp	r28, r16
     d88:	d1 07       	cpc	r29, r17
     d8a:	59 f0       	breq	.+22     	; 0xda2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:34
  {
    if (write(*buffer++))
     d8c:	69 91       	ld	r22, Y+
     d8e:	d6 01       	movw	r26, r12
     d90:	ed 91       	ld	r30, X+
     d92:	fc 91       	ld	r31, X
     d94:	01 90       	ld	r0, Z+
     d96:	f0 81       	ld	r31, Z
     d98:	e0 2d       	mov	r30, r0
     d9a:	c6 01       	movw	r24, r12
     d9c:	09 95       	icall
     d9e:	89 2b       	or	r24, r25
     da0:	79 f7       	brne	.-34     	; 0xd80 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:40
      n++;
    else
      break;
  }
  return n;
}
     da2:	c5 01       	movw	r24, r10
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	08 95       	ret

00000dba <pinMode.part.1>:
pinMode.part.1():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:29

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:31
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	fc 01       	movw	r30, r24
     dc2:	e3 50       	subi	r30, 0x03	; 3
     dc4:	f0 47       	sbci	r31, 0x70	; 112
     dc6:	20 81       	ld	r18, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP))
     dc8:	2f 3f       	cpi	r18, 0xFF	; 255
     dca:	79 f0       	breq	.+30     	; 0xdea <pinMode.part.1+0x30>
     dcc:	63 30       	cpi	r22, 0x03	; 3
     dce:	68 f4       	brcc	.+26     	; 0xdea <pinMode.part.1+0x30>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:36
    return;

  PORT_t *port = digitalPinToPortStruct(pin);
     dd0:	fc 01       	movw	r30, r24
     dd2:	ea 5d       	subi	r30, 0xDA	; 218
     dd4:	ff 46       	sbci	r31, 0x6F	; 111
     dd6:	a0 81       	ld	r26, Z
     dd8:	30 e2       	ldi	r19, 0x20	; 32
     dda:	a3 9f       	mul	r26, r19
     ddc:	d0 01       	movw	r26, r0
     dde:	11 24       	eor	r1, r1
     de0:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:40
  if (port == NULL)
    return;

  if (mode == OUTPUT)
     de2:	61 30       	cpi	r22, 0x01	; 1
     de4:	29 f4       	brne	.+10     	; 0xdf0 <pinMode.part.1+0x36>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:43
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	2c 93       	st	X, r18
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:48
    port->DIRSET = bit_mask;
  }
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
     df0:	88 58       	subi	r24, 0x88	; 136
     df2:	9f 46       	sbci	r25, 0x6F	; 111
     df4:	ec 01       	movw	r28, r24
     df6:	e8 81       	ld	r30, Y
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:50
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     df8:	ef 3f       	cpi	r30, 0xFF	; 255
     dfa:	81 f0       	breq	.+32     	; 0xe1c <pinMode.part.1+0x62>
     dfc:	cd 01       	movw	r24, r26
     dfe:	40 96       	adiw	r24, 0x10	; 16
     e00:	e8 0f       	add	r30, r24
     e02:	f9 2f       	mov	r31, r25
     e04:	f1 1d       	adc	r31, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:53

    /* Save state */
    uint8_t status = SREG;
     e06:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:54
    cli();
     e08:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:57

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	2c 93       	st	X, r18
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:63

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     e0e:	80 81       	ld	r24, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:60

    /* Configure direction as input */
    port->DIRCLR = bit_mask;

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
     e10:	62 30       	cpi	r22, 0x02	; 2
     e12:	39 f4       	brne	.+14     	; 0xe22 <pinMode.part.1+0x68>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:63
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     e14:	88 60       	ori	r24, 0x08	; 8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     e16:	80 83       	st	Z, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:73
    }

    /* Restore state */
    SREG = status;
     e18:	9f bf       	out	0x3f, r25	; 63
     e1a:	e7 cf       	rjmp	.-50     	; 0xdea <pinMode.part.1+0x30>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:50
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	e0 e0       	ldi	r30, 0x00	; 0
     e20:	f2 cf       	rjmp	.-28     	; 0xe06 <pinMode.part.1+0x4c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     e22:	87 7f       	andi	r24, 0xF7	; 247
     e24:	f8 cf       	rjmp	.-16     	; 0xe16 <pinMode.part.1+0x5c>

00000e26 <pinMode>:
pinMode():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     e26:	89 32       	cpi	r24, 0x29	; 41
     e28:	08 f4       	brcc	.+2      	; 0xe2c <pinMode+0x6>
     e2a:	c7 cf       	rjmp	.-114    	; 0xdba <pinMode.part.1>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     e2c:	08 95       	ret

00000e2e <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	fc 01       	movw	r30, r24
     e32:	e1 5b       	subi	r30, 0xB1	; 177
     e34:	ff 46       	sbci	r31, 0x6F	; 111
     e36:	e0 81       	ld	r30, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:98
  if (timer == NOT_ON_TIMER)
     e38:	ee 23       	and	r30, r30
     e3a:	19 f1       	breq	.+70     	; 0xe82 <turnOffPWM.part.0+0x54>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:104
    return;

  uint8_t bit_pos;
  TCB_t *timerB;

  switch (timer)
     e3c:	e1 30       	cpi	r30, 0x01	; 1
     e3e:	21 f0       	breq	.+8      	; 0xe48 <turnOffPWM.part.0+0x1a>
     e40:	00 f1       	brcs	.+64     	; 0xe82 <turnOffPWM.part.0+0x54>
     e42:	e6 30       	cpi	r30, 0x06	; 6
     e44:	a8 f0       	brcs	.+42     	; 0xe70 <turnOffPWM.part.0+0x42>
     e46:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:109
  {
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);
     e48:	88 58       	subi	r24, 0x88	; 136
     e4a:	9f 46       	sbci	r25, 0x6F	; 111
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 81       	ld	r18, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:112

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
     e50:	23 30       	cpi	r18, 0x03	; 3
     e52:	08 f0       	brcs	.+2      	; 0xe56 <turnOffPWM.part.0+0x28>
     e54:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:113
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     e56:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <turnOffPWM.part.0+0x34>
     e60:	88 0f       	add	r24, r24
     e62:	2a 95       	dec	r18
     e64:	ea f7       	brpl	.-6      	; 0xe60 <turnOffPWM.part.0+0x32>
     e66:	80 95       	com	r24
     e68:	83 23       	and	r24, r19
     e6a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     e6e:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:123
    case TIMERB0:
    case TIMERB1:
    case TIMERB2:
    case TIMERB3:

      timerB = (TCB_t *)&TCB0 + (timer - TIMERB0);
     e70:	80 e1       	ldi	r24, 0x10	; 16
     e72:	e8 9f       	mul	r30, r24
     e74:	f0 01       	movw	r30, r0
     e76:	11 24       	eor	r1, r1
     e78:	e0 5a       	subi	r30, 0xA0	; 160
     e7a:	f5 4f       	sbci	r31, 0xF5	; 245
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:126

      /* Disable TCB compare channel */
      timerB->CTRLB &= ~(TCB_CCMPEN_bm);
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:132

      break;
    default:
      break;
  }
}
     e82:	08 95       	ret

00000e84 <digitalWrite.part.2>:
digitalWrite.part.2():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:134

void digitalWrite(uint8_t pin, uint8_t val)
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:137
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     e8c:	c8 2f       	mov	r28, r24
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	fe 01       	movw	r30, r28
     e92:	e3 50       	subi	r30, 0x03	; 3
     e94:	f0 47       	sbci	r31, 0x70	; 112
     e96:	00 81       	ld	r16, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:138
  if (bit_mask == NOT_A_PIN)
     e98:	0f 3f       	cpi	r16, 0xFF	; 255
     e9a:	99 f0       	breq	.+38     	; 0xec2 <digitalWrite.part.2+0x3e>
     e9c:	16 2f       	mov	r17, r22
turnOffPWM():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     e9e:	89 32       	cpi	r24, 0x29	; 41
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <digitalWrite.part.2+0x20>
     ea2:	c5 df       	rcall	.-118    	; 0xe2e <turnOffPWM.part.0>
digitalWrite.part.2():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:150
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
     ea4:	fe 01       	movw	r30, r28
     ea6:	ea 5d       	subi	r30, 0xDA	; 218
     ea8:	ff 46       	sbci	r31, 0x6F	; 111
     eaa:	e0 81       	ld	r30, Z
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	e8 9f       	mul	r30, r24
     eb0:	f0 01       	movw	r30, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:153

  /* Output direction */
  if (port->DIR & bit_mask)
     eb6:	80 81       	ld	r24, Z
     eb8:	80 23       	and	r24, r16
     eba:	51 f0       	breq	.+20     	; 0xed0 <digitalWrite.part.2+0x4c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:156
  {
    /* Set output to value */
    if (val == LOW)
     ebc:	11 11       	cpse	r17, r1
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <digitalWrite.part.2+0x48>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:158
    { /* If LOW */
      port->OUTCLR = bit_mask;
     ec0:	06 83       	std	Z+6, r16	; 0x06
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
     ecc:	05 83       	std	Z+5, r16	; 0x05
     ece:	f9 cf       	rjmp	.-14     	; 0xec2 <digitalWrite.part.2+0x3e>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:180
    pull up is enabled if this function is called.
    Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     ed0:	c8 58       	subi	r28, 0x88	; 136
     ed2:	df 46       	sbci	r29, 0x6F	; 111
     ed4:	88 81       	ld	r24, Y
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:183

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	71 f0       	breq	.+28     	; 0xef6 <digitalWrite.part.2+0x72>
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	61 f0       	breq	.+24     	; 0xef6 <digitalWrite.part.2+0x72>
     ede:	70 96       	adiw	r30, 0x10	; 16
     ee0:	e8 0f       	add	r30, r24
     ee2:	f1 1d       	adc	r31, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:186

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     ee4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:187
    cli();
     ee6:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:192

    if (val == LOW)
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     ee8:	80 81       	ld	r24, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:189

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW)
     eea:	11 11       	cpse	r17, r1
     eec:	07 c0       	rjmp	.+14     	; 0xefc <digitalWrite.part.2+0x78>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:192
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     eee:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:197
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     ef0:	80 83       	st	Z, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
     ef2:	9f bf       	out	0x3f, r25	; 63
     ef4:	e6 cf       	rjmp	.-52     	; 0xec2 <digitalWrite.part.2+0x3e>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:183

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e0 e0       	ldi	r30, 0x00	; 0
     efa:	f4 cf       	rjmp	.-24     	; 0xee4 <digitalWrite.part.2+0x60>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	f8 cf       	rjmp	.-16     	; 0xef0 <digitalWrite.part.2+0x6c>

00000f00 <analogWrite.part.3.constprop.11>:
analogWrite.part.3():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:99

// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ec 01       	movw	r28, r24
pinMode():
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	81 e1       	ldi	r24, 0x11	; 17
     f0a:	57 df       	rcall	.-338    	; 0xdba <pinMode.part.1>
digitalWrite():
     f0c:	60 e0       	ldi	r22, 0x00	; 0
analogWrite.part.3():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:112
  // writing with them.  Also, make sure the pin is in output mode
  // for consistently with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);

  if (val <= 0)
     f0e:	20 97       	sbiw	r28, 0x00	; 0
     f10:	21 f0       	breq	.+8      	; 0xf1a <analogWrite.part.3.constprop.11+0x1a>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:116
  { /* if zero or negative drive digital low */
    digitalWrite(pin, LOW);
  }
  else if (val >= 255)
     f12:	cf 3f       	cpi	r28, 0xFF	; 255
     f14:	d1 05       	cpc	r29, r1
     f16:	29 f4       	brne	.+10     	; 0xf22 <analogWrite.part.3.constprop.11+0x22>
digitalWrite():
     f18:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:194
          digitalWrite(pin, HIGH);
        }
        break;
    }
  }
}
     f1a:	81 e1       	ldi	r24, 0x11	; 17
analogWrite.part.3():
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
digitalWrite():
     f20:	b1 cf       	rjmp	.-158    	; 0xe84 <digitalWrite.part.2>
analogWrite.part.3():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:148
          /* Calculate correct compare buffer register */
          timer_cmp_out = ((uint8_t *)(&TCA0.SPLIT.LCMP0)) + 2 * bit_pos;
        }

        /* Configure duty cycle for correct compare channel */
        savedSREG = SREG;
     f22:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:149
        cli();
     f24:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:150
        (*timer_cmp_out) = (val); // non-atomic 16-bit write operation
     f26:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:151
        SREG = savedSREG;
     f2a:	8f bf       	out	0x3f, r24	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:154

        /* Enable output on pin */
        TCA0.SPLIT.CTRLB |= (1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     f2c:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:194
          digitalWrite(pin, HIGH);
        }
        break;
    }
  }
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <micros>:
micros():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:103
{
  uint32_t m;
  uint16_t t;

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
     f3c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:104
  cli();
     f3e:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:107

  /* Get current number of millis (i.e. overflows) and timer count */
  m = timer_millis;
     f40:	20 91 54 28 	lds	r18, 0x2854	; 0x802854 <timer_millis>
     f44:	30 91 55 28 	lds	r19, 0x2855	; 0x802855 <timer_millis+0x1>
     f48:	40 91 56 28 	lds	r20, 0x2856	; 0x802856 <timer_millis+0x2>
     f4c:	50 91 57 28 	lds	r21, 0x2857	; 0x802857 <timer_millis+0x3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:108
  t = _timer->CNT;
     f50:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     f54:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:112

  /* If the timer overflow flag is raised, we just missed it,
  increment to account for it, & read new ticks */
  if (_timer->INTFLAGS & TCB_CAPT_bm)
     f58:	90 91 a6 0a 	lds	r25, 0x0AA6	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
     f5c:	90 ff       	sbrs	r25, 0
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <micros+0x34>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:114
  {
    m++;
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	4f 4f       	sbci	r20, 0xFF	; 255
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:115
    t = _timer->CNT;
     f68:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     f6c:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:119
  }

  // Restore SREG
  SREG = status;
     f70:	8f bf       	out	0x3f, r24	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:125

#if (F_CPU == 20000000L)
  t = t >> 4;
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
#elif (F_CPU == 16000000L)
  return m * 1000 + (t >> 4);
     f72:	a8 ee       	ldi	r26, 0xE8	; 232
     f74:	b3 e0       	ldi	r27, 0x03	; 3
     f76:	0e 94 76 26 	call	0x4cec	; 0x4cec <__muluhisi3>
     f7a:	24 e0       	ldi	r18, 0x04	; 4
     f7c:	f6 95       	lsr	r31
     f7e:	e7 95       	ror	r30
     f80:	2a 95       	dec	r18
     f82:	e1 f7       	brne	.-8      	; 0xf7c <micros+0x40>
     f84:	6e 0f       	add	r22, r30
     f86:	7f 1f       	adc	r23, r31
     f88:	81 1d       	adc	r24, r1
     f8a:	91 1d       	adc	r25, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:143
#elif (F_CPU == 1000000L)
  return m * 1000 + t;
#else
  return 0;
#endif
}
     f8c:	08 95       	ret

00000f8e <delay>:
delay():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:146

void delay(unsigned long ms)
{
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	4b 01       	movw	r8, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:147
  uint32_t start_time = micros(), delay_time = 1000 * ms;
     fa0:	5c 01       	movw	r10, r24
     fa2:	cc df       	rcall	.-104    	; 0xf3c <micros>
     fa4:	6b 01       	movw	r12, r22
     fa6:	7c 01       	movw	r14, r24
     fa8:	a8 ee       	ldi	r26, 0xE8	; 232
     faa:	b3 e0       	ldi	r27, 0x03	; 3
     fac:	a5 01       	movw	r20, r10
     fae:	94 01       	movw	r18, r8
     fb0:	0e 94 76 26 	call	0x4cec	; 0x4cec <__muluhisi3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:150

  /* Calculate future time to return */
  uint32_t return_time = start_time + delay_time;
     fb4:	c6 0e       	add	r12, r22
     fb6:	d7 1e       	adc	r13, r23
     fb8:	e8 1e       	adc	r14, r24
     fba:	f9 1e       	adc	r15, r25
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:153

  /* If return time overflows */
  if (return_time < delay_time)
     fbc:	c6 16       	cp	r12, r22
     fbe:	d7 06       	cpc	r13, r23
     fc0:	e8 06       	cpc	r14, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:156
  {
    /* Wait until micros overflows */
    while (micros() > return_time)
     fc2:	f9 06       	cpc	r15, r25
     fc4:	10 f4       	brcc	.+4      	; 0xfca <delay+0x3c>
     fc6:	ba df       	rcall	.-140    	; 0xf3c <micros>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:161
      ;
  }

  /* Wait until return time */
  while (micros() < return_time)
     fc8:	f9 cf       	rjmp	.-14     	; 0xfbc <delay+0x2e>
     fca:	b8 df       	rcall	.-144    	; 0xf3c <micros>
     fcc:	6c 15       	cp	r22, r12
     fce:	7d 05       	cpc	r23, r13
     fd0:	8e 05       	cpc	r24, r14
     fd2:	9f 05       	cpc	r25, r15
     fd4:	d0 f3       	brcs	.-12     	; 0xfca <delay+0x3c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:163
    ;
}
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	08 95       	ret

00000fe8 <millis>:
millis():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
     fe8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:88
  cli();
     fea:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
     fec:	60 91 54 28 	lds	r22, 0x2854	; 0x802854 <timer_millis>
     ff0:	70 91 55 28 	lds	r23, 0x2855	; 0x802855 <timer_millis+0x1>
     ff4:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <timer_millis+0x2>
     ff8:	90 91 57 28 	lds	r25, 0x2857	; 0x802857 <timer_millis+0x3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:92

  SREG = status;
     ffc:	2f bf       	out	0x3f, r18	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:95

  return m;
}
     ffe:	08 95       	ret

00001000 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]>:
_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij.part.8():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:847
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:850
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    100e:	ec 80       	ldd	r14, Y+4	; 0x04
    1010:	fd 80       	ldd	r15, Y+5	; 0x05
    1012:	6e 15       	cp	r22, r14
    1014:	7f 05       	cpc	r23, r15
    1016:	0c f0       	brlt	.+2      	; 0x101a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x1a>
    1018:	70 c0       	rjmp	.+224    	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:851
    if (__y < 0) {               // Clip top
    101a:	57 ff       	sbrs	r21, 7
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x26>
    101e:	24 0f       	add	r18, r20
    1020:	35 1f       	adc	r19, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:853
      __h += __y;
      __y = 0;
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:855
    }
    if ((__y + __h) > HEIGHT) { // Clip bottom
    1026:	8e 81       	ldd	r24, Y+6	; 0x06
    1028:	9f 81       	ldd	r25, Y+7	; 0x07
    102a:	fa 01       	movw	r30, r20
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	8e 17       	cp	r24, r30
    1032:	9f 07       	cpc	r25, r31
    1034:	1c f4       	brge	.+6      	; 0x103c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x3c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:856
      __h = (HEIGHT - __y);
    1036:	9c 01       	movw	r18, r24
    1038:	24 1b       	sub	r18, r20
    103a:	35 0b       	sbc	r19, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:858
    }
    if (__h > 0) { // Proceed only if height is now positive
    103c:	12 16       	cp	r1, r18
    103e:	13 06       	cpc	r1, r19
    1040:	0c f0       	brlt	.+2      	; 0x1044 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x44>
    1042:	5b c0       	rjmp	.+182    	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:861
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t y = __y, h = __h;
    1044:	92 2f       	mov	r25, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:862
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    1046:	84 2f       	mov	r24, r20
    1048:	86 95       	lsr	r24
    104a:	86 95       	lsr	r24
    104c:	86 95       	lsr	r24
    104e:	8e 9d       	mul	r24, r14
    1050:	d0 01       	movw	r26, r0
    1052:	8f 9d       	mul	r24, r15
    1054:	b0 0d       	add	r27, r0
    1056:	11 24       	eor	r1, r1
    1058:	6a 0f       	add	r22, r26
    105a:	7b 1f       	adc	r23, r27
    105c:	af 8d       	ldd	r26, Y+31	; 0x1f
    105e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1060:	a6 0f       	add	r26, r22
    1062:	b7 1f       	adc	r27, r23
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:865

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
    1064:	47 70       	andi	r20, 0x07	; 7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:866
      if (mod) {
    1066:	49 f1       	breq	.+82     	; 0x10ba <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xba>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:868
        // mask off the high n bits we want to set
        mod = 8 - mod;
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	84 1b       	sub	r24, r20
    106c:	48 2f       	mov	r20, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:874
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] = {0x00, 0x80, 0xC0, 0xE0,
                                                   0xF0, 0xF8, 0xFC, 0xFE};
        uint8_t mask = pgm_read_byte(&premask[mod]);
    106e:	68 2f       	mov	r22, r24
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	fb 01       	movw	r30, r22
    1074:	e3 57       	subi	r30, 0x73	; 115
    1076:	f9 4f       	sbci	r31, 0xF9	; 249
    1078:	e4 91       	lpm	r30, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:876
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
    107a:	28 17       	cp	r18, r24
    107c:	08 f0       	brcs	.+2      	; 0x1080 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x80>
    107e:	63 c0       	rjmp	.+198    	; 0x1146 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x146>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:877
          mask &= (0XFF >> (mod - h));
    1080:	62 1b       	sub	r22, r18
    1082:	71 09       	sbc	r23, r1
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x8e>
    108a:	35 95       	asr	r19
    108c:	27 95       	ror	r18
    108e:	6a 95       	dec	r22
    1090:	e2 f7       	brpl	.-8      	; 0x108a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x8a>
    1092:	e2 23       	and	r30, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:879

        switch (color) {
    1094:	01 30       	cpi	r16, 0x01	; 1
    1096:	11 05       	cpc	r17, r1
    1098:	39 f0       	breq	.+14     	; 0x10a8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xa8>
    109a:	b0 f1       	brcs	.+108    	; 0x1108 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x108>
    109c:	02 30       	cpi	r16, 0x02	; 2
    109e:	11 05       	cpc	r17, r1
    10a0:	61 f5       	brne	.+88     	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:887
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    10a2:	8c 91       	ld	r24, X
    10a4:	e8 27       	eor	r30, r24
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xac>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:881
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
    10a8:	8c 91       	ld	r24, X
    10aa:	e8 2b       	or	r30, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:887
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    10ac:	ec 93       	st	X, r30
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:893
          break;
        }
        pBuf += WIDTH;
      }

      if (h >= mod) { // More to go?
    10ae:	94 17       	cp	r25, r20
    10b0:	20 f1       	brcs	.+72     	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:890
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	a2 0f       	add	r26, r18
    10b8:	b3 1f       	adc	r27, r19
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:894
      }

      if (h >= mod) { // More to go?
        h -= mod;
    10ba:	e9 2f       	mov	r30, r25
    10bc:	e4 1b       	sub	r30, r20
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:896
        // Write solid bytes while we can - effectively 8 rows at a time
        if (h >= 8) {
    10be:	e8 30       	cpi	r30, 0x08	; 8
    10c0:	78 f0       	brcs	.+30     	; 0x10e0 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xe0>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:897
          if (color == SSD1306_INVERSE) {
    10c2:	02 30       	cpi	r16, 0x02	; 2
    10c4:	11 05       	cpc	r17, r1
    10c6:	21 f5       	brne	.+72     	; 0x1110 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x110>
    10c8:	8e 2f       	mov	r24, r30
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:901
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF; // Invert byte
    10ca:	9c 91       	ld	r25, X
    10cc:	90 95       	com	r25
    10ce:	9c 93       	st	X, r25
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:902
              pBuf += WIDTH; // Advance pointer 8 rows
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	a2 0f       	add	r26, r18
    10d6:	b3 1f       	adc	r27, r19
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:903
              h -= 8;        // Subtract 8 rows from height
    10d8:	88 50       	subi	r24, 0x08	; 8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:904
            } while (h >= 8);
    10da:	88 30       	cpi	r24, 0x08	; 8
    10dc:	b0 f7       	brcc	.-20     	; 0x10ca <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xca>
    10de:	e7 70       	andi	r30, 0x07	; 7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:916
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          }
        }

        if (h) { // Do the final partial byte, if necessary
    10e0:	ee 23       	and	r30, r30
    10e2:	59 f0       	breq	.+22     	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:925
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	eb 57       	subi	r30, 0x7B	; 123
    10e8:	f9 4f       	sbci	r31, 0xF9	; 249
    10ea:	e4 91       	lpm	r30, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:926
          switch (color) {
    10ec:	01 30       	cpi	r16, 0x01	; 1
    10ee:	11 05       	cpc	r17, r1
    10f0:	f9 f0       	breq	.+62     	; 0x1130 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x130>
    10f2:	10 f1       	brcs	.+68     	; 0x1138 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x138>
    10f4:	02 30       	cpi	r16, 0x02	; 2
    10f6:	11 05       	cpc	r17, r1
    10f8:	19 f1       	breq	.+70     	; 0x1140 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x140>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:941
          }
        }
      }
    } // endif positive height
  }   // endif x in bounds
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:884
        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
    1108:	e0 95       	com	r30
    110a:	8c 91       	ld	r24, X
    110c:	e8 23       	and	r30, r24
    110e:	ce cf       	rjmp	.-100    	; 0x10ac <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xac>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:907
              pBuf += WIDTH; // Advance pointer 8 rows
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          } else {
            // store a local value to work with
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	01 15       	cp	r16, r1
    1114:	11 05       	cpc	r17, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x11a>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	81 95       	neg	r24
    111c:	9e 2f       	mov	r25, r30
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:909
            do {
              *pBuf = val;   // Set byte
    111e:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:910
              pBuf += WIDTH; // Advance pointer 8 rows
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	a2 0f       	add	r26, r18
    1126:	b3 1f       	adc	r27, r19
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911
              h -= 8;        // Subtract 8 rows from height
    1128:	98 50       	subi	r25, 0x08	; 8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:912
            } while (h >= 8);
    112a:	98 30       	cpi	r25, 0x08	; 8
    112c:	c0 f7       	brcc	.-16     	; 0x111e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x11e>
    112e:	d7 cf       	rjmp	.-82     	; 0x10de <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xde>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:928
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
    1130:	8c 91       	ld	r24, X
    1132:	e8 2b       	or	r30, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:934
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1134:	ec 93       	st	X, r30
    1136:	e1 cf       	rjmp	.-62     	; 0x10fa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xfa>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:931
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
    1138:	e0 95       	com	r30
    113a:	8c 91       	ld	r24, X
    113c:	e8 23       	and	r30, r24
    113e:	fa cf       	rjmp	.-12     	; 0x1134 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x134>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:934
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1140:	8c 91       	ld	r24, X
    1142:	e8 27       	eor	r30, r24
    1144:	f7 cf       	rjmp	.-18     	; 0x1134 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x134>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:879
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
    1146:	01 30       	cpi	r16, 0x01	; 1
    1148:	11 05       	cpc	r17, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x14e>
    114c:	ad cf       	rjmp	.-166    	; 0x10a8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xa8>
    114e:	e0 f2       	brcs	.-72     	; 0x1108 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x108>
    1150:	02 30       	cpi	r16, 0x02	; 2
    1152:	11 05       	cpc	r17, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0x158>
    1156:	a5 cf       	rjmp	.-182    	; 0x10a2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xa2>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:890
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    1158:	ae 0d       	add	r26, r14
    115a:	bf 1d       	adc	r27, r15
    115c:	ae cf       	rjmp	.-164    	; 0x10ba <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]+0xba>

0000115e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]>:
_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij.part.7():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:748
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:752
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    if (x < 0) {                  // Clip left
    1166:	77 ff       	sbrs	r23, 7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x14>
    116a:	26 0f       	add	r18, r22
    116c:	37 1f       	adc	r19, r23
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:754
      w += x;
      x = 0;
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:756
    }
    if ((x + w) > WIDTH) { // Clip right
    1172:	dc 01       	movw	r26, r24
    1174:	14 96       	adiw	r26, 0x04	; 4
    1176:	cd 91       	ld	r28, X+
    1178:	dc 91       	ld	r29, X
    117a:	fb 01       	movw	r30, r22
    117c:	e2 0f       	add	r30, r18
    117e:	f3 1f       	adc	r31, r19
    1180:	ce 17       	cp	r28, r30
    1182:	df 07       	cpc	r29, r31
    1184:	1c f4       	brge	.+6      	; 0x118c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x2e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:757
      w = (WIDTH - x);
    1186:	9e 01       	movw	r18, r28
    1188:	26 1b       	sub	r18, r22
    118a:	37 0b       	sbc	r19, r23
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:759
    }
    if (w > 0) { // Proceed only if width is positive
    118c:	12 16       	cp	r1, r18
    118e:	13 06       	cpc	r1, r19
    1190:	4c f5       	brge	.+82     	; 0x11e4 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x86>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:760
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    1192:	fa 01       	movw	r30, r20
    1194:	57 fd       	sbrc	r21, 7
    1196:	37 96       	adiw	r30, 0x07	; 7
    1198:	a3 e0       	ldi	r26, 0x03	; 3
    119a:	f5 95       	asr	r31
    119c:	e7 95       	ror	r30
    119e:	aa 95       	dec	r26
    11a0:	e1 f7       	brne	.-8      	; 0x119a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x3c>
    11a2:	ec 9f       	mul	r30, r28
    11a4:	d0 01       	movw	r26, r0
    11a6:	ed 9f       	mul	r30, r29
    11a8:	b0 0d       	add	r27, r0
    11aa:	fc 9f       	mul	r31, r28
    11ac:	b0 0d       	add	r27, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	6a 0f       	add	r22, r26
    11b2:	7b 1f       	adc	r23, r27
    11b4:	dc 01       	movw	r26, r24
    11b6:	5f 96       	adiw	r26, 0x1f	; 31
    11b8:	ed 91       	ld	r30, X+
    11ba:	fc 91       	ld	r31, X
    11bc:	e6 0f       	add	r30, r22
    11be:	f7 1f       	adc	r31, r23
    11c0:	47 70       	andi	r20, 0x07	; 7
    11c2:	55 27       	eor	r21, r21
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x6e>
    11ca:	88 0f       	add	r24, r24
    11cc:	4a 95       	dec	r20
    11ce:	ea f7       	brpl	.-6      	; 0x11ca <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x6c>
    11d0:	48 2f       	mov	r20, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:761
      switch (color) {
    11d2:	01 30       	cpi	r16, 0x01	; 1
    11d4:	11 05       	cpc	r17, r1
    11d6:	59 f0       	breq	.+22     	; 0x11ee <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x90>
    11d8:	a8 f0       	brcs	.+42     	; 0x1204 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0xa6>
    11da:	2e 0f       	add	r18, r30
    11dc:	3f 1f       	adc	r19, r31
    11de:	02 30       	cpi	r16, 0x02	; 2
    11e0:	11 05       	cpc	r17, r1
    11e2:	e1 f0       	breq	.+56     	; 0x121c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0xbe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:781
        };
        break;
      }
    }
  }
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret
    11ee:	2e 0f       	add	r18, r30
    11f0:	3f 1f       	adc	r19, r31
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:763
    }
    if (w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
      switch (color) {
      case SSD1306_WHITE:
        while (w--) {
    11f2:	e2 17       	cp	r30, r18
    11f4:	f3 07       	cpc	r31, r19
    11f6:	b1 f3       	breq	.-20     	; 0x11e4 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x86>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:764
          *pBuf++ |= mask;
    11f8:	81 91       	ld	r24, Z+
    11fa:	df 01       	movw	r26, r30
    11fc:	11 97       	sbiw	r26, 0x01	; 1
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	f7 cf       	rjmp	.-18     	; 0x11f2 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x94>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:768
        };
        break;
      case SSD1306_BLACK:
        mask = ~mask;
    1204:	80 95       	com	r24
    1206:	2e 0f       	add	r18, r30
    1208:	3f 1f       	adc	r19, r31
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:769
        while (w--) {
    120a:	e2 17       	cp	r30, r18
    120c:	f3 07       	cpc	r31, r19
    120e:	51 f3       	breq	.-44     	; 0x11e4 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x86>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:770
          *pBuf++ &= mask;
    1210:	91 91       	ld	r25, Z+
    1212:	df 01       	movw	r26, r30
    1214:	11 97       	sbiw	r26, 0x01	; 1
    1216:	98 23       	and	r25, r24
    1218:	9c 93       	st	X, r25
    121a:	f7 cf       	rjmp	.-18     	; 0x120a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0xac>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:774
        };
        break;
      case SSD1306_INVERSE:
        while (w--) {
    121c:	e2 17       	cp	r30, r18
    121e:	f3 07       	cpc	r31, r19
    1220:	09 f3       	breq	.-62     	; 0x11e4 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0x86>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:775
          *pBuf++ ^= mask;
    1222:	81 91       	ld	r24, Z+
    1224:	df 01       	movw	r26, r30
    1226:	11 97       	sbiw	r26, 0x01	; 1
    1228:	84 27       	eor	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	f7 cf       	rjmp	.-18     	; 0x121c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]+0xbe>

0000122e <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:800
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                     uint16_t color) {
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	fa 01       	movw	r30, r20
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:802
  bool bSwap = false;
  switch (rotation) {
    1234:	dc 01       	movw	r26, r24
    1236:	56 96       	adiw	r26, 0x16	; 22
    1238:	4c 91       	ld	r20, X
    123a:	56 97       	sbiw	r26, 0x16	; 22
    123c:	42 30       	cpi	r20, 0x02	; 2
    123e:	e1 f0       	breq	.+56     	; 0x1278 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x4a>
    1240:	43 30       	cpi	r20, 0x03	; 3
    1242:	91 f1       	breq	.+100    	; 0x12a8 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x7a>
    1244:	41 30       	cpi	r20, 0x01	; 1
    1246:	59 f5       	brne	.+86     	; 0x129e <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x70>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:808
  case 1:
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1248:	14 96       	adiw	r26, 0x04	; 4
    124a:	4d 91       	ld	r20, X+
    124c:	5c 91       	ld	r21, X
    124e:	da 01       	movw	r26, r20
    1250:	ae 1b       	sub	r26, r30
    1252:	bf 0b       	sbc	r27, r31
    1254:	fd 01       	movw	r30, r26
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:809
    x -= (h - 1);
    1256:	e2 1b       	sub	r30, r18
    1258:	f3 0b       	sbc	r31, r19
drawFastHLineInternal():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:751
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    125a:	77 fd       	sbrc	r23, 7
    125c:	0a c0       	rjmp	.+20     	; 0x1272 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x44>
    125e:	dc 01       	movw	r26, r24
    1260:	16 96       	adiw	r26, 0x06	; 6
    1262:	4d 91       	ld	r20, X+
    1264:	5c 91       	ld	r21, X
    1266:	64 17       	cp	r22, r20
    1268:	75 07       	cpc	r23, r21
    126a:	1c f4       	brge	.+6      	; 0x1272 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x44>
    126c:	ab 01       	movw	r20, r22
    126e:	bf 01       	movw	r22, r30
    1270:	76 df       	rcall	.-276    	; 0x115e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]>
drawFastVLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:829

  if (bSwap)
    drawFastHLineInternal(x, y, h, color);
  else
    drawFastVLineInternal(x, y, h, color);
}
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:813
    x = WIDTH - x - 1;
    x -= (h - 1);
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1278:	14 96       	adiw	r26, 0x04	; 4
    127a:	4d 91       	ld	r20, X+
    127c:	5c 91       	ld	r21, X
    127e:	da 01       	movw	r26, r20
    1280:	a6 1b       	sub	r26, r22
    1282:	b7 0b       	sbc	r27, r23
    1284:	bd 01       	movw	r22, r26
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	71 09       	sbc	r23, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:814
    y = HEIGHT - y - 1;
    128a:	dc 01       	movw	r26, r24
    128c:	16 96       	adiw	r26, 0x06	; 6
    128e:	4d 91       	ld	r20, X+
    1290:	5c 91       	ld	r21, X
    1292:	da 01       	movw	r26, r20
    1294:	ae 1b       	sub	r26, r30
    1296:	bf 0b       	sbc	r27, r31
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:815
    y -= (h - 1);
    1298:	fd 01       	movw	r30, r26
    129a:	e2 1b       	sub	r30, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:850
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    129c:	f3 0b       	sbc	r31, r19
drawFastVLineInternal():
    129e:	77 fd       	sbrc	r23, 7
    12a0:	e8 cf       	rjmp	.-48     	; 0x1272 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x44>
    12a2:	af 01       	movw	r20, r30
    12a4:	ad de       	rcall	.-678    	; 0x1000 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]>
    12a6:	e5 cf       	rjmp	.-54     	; 0x1272 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x44>
drawFastVLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:821
    break;
  case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    12a8:	16 96       	adiw	r26, 0x06	; 6
    12aa:	4d 91       	ld	r20, X+
    12ac:	5c 91       	ld	r21, X
    12ae:	da 01       	movw	r26, r20
    12b0:	a6 1b       	sub	r26, r22
    12b2:	b7 0b       	sbc	r27, r23
    12b4:	bd 01       	movw	r22, r26
    12b6:	61 50       	subi	r22, 0x01	; 1
    12b8:	71 09       	sbc	r23, r1
    12ba:	cf cf       	rjmp	.-98     	; 0x125a <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x2c>

000012bc <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:700
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                     uint16_t color) {
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	fa 01       	movw	r30, r20
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:702
  bool bSwap = false;
  switch (rotation) {
    12c2:	dc 01       	movw	r26, r24
    12c4:	56 96       	adiw	r26, 0x16	; 22
    12c6:	4c 91       	ld	r20, X
    12c8:	56 97       	sbiw	r26, 0x16	; 22
    12ca:	42 30       	cpi	r20, 0x02	; 2
    12cc:	a1 f0       	breq	.+40     	; 0x12f6 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x3a>
    12ce:	43 30       	cpi	r20, 0x03	; 3
    12d0:	81 f1       	breq	.+96     	; 0x1332 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x76>
    12d2:	41 30       	cpi	r20, 0x01	; 1
    12d4:	11 f5       	brne	.+68     	; 0x131a <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x5e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:707
  case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    12d6:	14 96       	adiw	r26, 0x04	; 4
    12d8:	4d 91       	ld	r20, X+
    12da:	5c 91       	ld	r21, X
    12dc:	da 01       	movw	r26, r20
    12de:	ae 1b       	sub	r26, r30
    12e0:	bf 0b       	sbc	r27, r31
    12e2:	fd 01       	movw	r30, r26
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:850
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    12e4:	31 97       	sbiw	r30, 0x01	; 1
drawFastVLineInternal():
    12e6:	f7 fd       	sbrc	r31, 7
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
    12ea:	ab 01       	movw	r20, r22
    12ec:	bf 01       	movw	r22, r30
    12ee:	88 de       	rcall	.-752    	; 0x1000 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.8]>
drawFastHLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:729

  if (bSwap)
    drawFastVLineInternal(x, y, w, color);
  else
    drawFastHLineInternal(x, y, w, color);
}
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:712
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    12f6:	16 96       	adiw	r26, 0x06	; 6
    12f8:	4d 91       	ld	r20, X+
    12fa:	5c 91       	ld	r21, X
    12fc:	da 01       	movw	r26, r20
    12fe:	ae 1b       	sub	r26, r30
    1300:	bf 0b       	sbc	r27, r31
    1302:	fd 01       	movw	r30, r26
    1304:	31 97       	sbiw	r30, 0x01	; 1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:711
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1306:	dc 01       	movw	r26, r24
    1308:	14 96       	adiw	r26, 0x04	; 4
    130a:	4d 91       	ld	r20, X+
    130c:	5c 91       	ld	r21, X
    130e:	da 01       	movw	r26, r20
    1310:	a6 1b       	sub	r26, r22
    1312:	b7 0b       	sbc	r27, r23
    1314:	bd 01       	movw	r22, r26
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:713
    y = HEIGHT - y - 1;
    x -= (w - 1);
    1316:	62 1b       	sub	r22, r18
    1318:	73 0b       	sbc	r23, r19
drawFastHLineInternal():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:751
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    131a:	f7 fd       	sbrc	r31, 7
    131c:	e9 cf       	rjmp	.-46     	; 0x12f0 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
    131e:	dc 01       	movw	r26, r24
    1320:	16 96       	adiw	r26, 0x06	; 6
    1322:	4d 91       	ld	r20, X+
    1324:	5c 91       	ld	r21, X
    1326:	e4 17       	cp	r30, r20
    1328:	f5 07       	cpc	r31, r21
    132a:	14 f7       	brge	.-60     	; 0x12f0 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
    132c:	af 01       	movw	r20, r30
    132e:	17 df       	rcall	.-466    	; 0x115e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.7]>
    1330:	df cf       	rjmp	.-66     	; 0x12f0 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
drawFastHLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:720
  case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    1332:	16 96       	adiw	r26, 0x06	; 6
    1334:	4d 91       	ld	r20, X+
    1336:	5c 91       	ld	r21, X
    1338:	da 01       	movw	r26, r20
    133a:	a6 1b       	sub	r26, r22
    133c:	b7 0b       	sbc	r27, r23
    133e:	bd 01       	movw	r22, r26
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:721
    y -= (w - 1);
    1340:	62 1b       	sub	r22, r18
    1342:	73 0b       	sbc	r23, r19
    1344:	d0 cf       	rjmp	.-96     	; 0x12e6 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x2a>

00001346 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)>:
drawPixel():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:641
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
    1346:	fc 01       	movw	r30, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:642
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    1348:	77 fd       	sbrc	r23, 7
    134a:	64 c0       	rjmp	.+200    	; 0x1414 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    134c:	80 85       	ldd	r24, Z+8	; 0x08
    134e:	91 85       	ldd	r25, Z+9	; 0x09
    1350:	68 17       	cp	r22, r24
    1352:	79 07       	cpc	r23, r25
    1354:	0c f0       	brlt	.+2      	; 0x1358 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x12>
    1356:	5e c0       	rjmp	.+188    	; 0x1414 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1358:	57 fd       	sbrc	r21, 7
    135a:	5c c0       	rjmp	.+184    	; 0x1414 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    135c:	82 85       	ldd	r24, Z+10	; 0x0a
    135e:	93 85       	ldd	r25, Z+11	; 0x0b
    1360:	48 17       	cp	r20, r24
    1362:	59 07       	cpc	r21, r25
    1364:	0c f0       	brlt	.+2      	; 0x1368 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x22>
    1366:	56 c0       	rjmp	.+172    	; 0x1414 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:644
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
    1368:	86 89       	ldd	r24, Z+22	; 0x16
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	b1 f0       	breq	.+44     	; 0x139a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x54>
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	29 f1       	breq	.+74     	; 0x13bc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x76>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	41 f4       	brne	.+16     	; 0x1386 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:647
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
    1376:	84 81       	ldd	r24, Z+4	; 0x04
    1378:	95 81       	ldd	r25, Z+5	; 0x05
    137a:	84 1b       	sub	r24, r20
    137c:	95 0b       	sbc	r25, r21
    137e:	ab 01       	movw	r20, r22
    1380:	bc 01       	movw	r22, r24
    1382:	61 50       	subi	r22, 0x01	; 1
    1384:	71 09       	sbc	r23, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:658
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	09 f1       	breq	.+66     	; 0x13ce <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x88>
    138c:	08 f4       	brcc	.+2      	; 0x1390 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x4a>
    138e:	43 c0       	rjmp	.+134    	; 0x1416 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd0>
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x52>
    1396:	63 c0       	rjmp	.+198    	; 0x145e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x118>
    1398:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:650
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
    case 2:
      x = WIDTH - x - 1;
    139a:	84 81       	ldd	r24, Z+4	; 0x04
    139c:	95 81       	ldd	r25, Z+5	; 0x05
    139e:	dc 01       	movw	r26, r24
    13a0:	a6 1b       	sub	r26, r22
    13a2:	b7 0b       	sbc	r27, r23
    13a4:	bd 01       	movw	r22, r26
    13a6:	61 50       	subi	r22, 0x01	; 1
    13a8:	71 09       	sbc	r23, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:651
      y = HEIGHT - y - 1;
    13aa:	86 81       	ldd	r24, Z+6	; 0x06
    13ac:	97 81       	ldd	r25, Z+7	; 0x07
    13ae:	dc 01       	movw	r26, r24
    13b0:	a4 1b       	sub	r26, r20
    13b2:	b5 0b       	sbc	r27, r21
    13b4:	ad 01       	movw	r20, r26
    13b6:	41 50       	subi	r20, 0x01	; 1
    13b8:	51 09       	sbc	r21, r1
    13ba:	e5 cf       	rjmp	.-54     	; 0x1386 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:655
      break;
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
    13bc:	86 81       	ldd	r24, Z+6	; 0x06
    13be:	97 81       	ldd	r25, Z+7	; 0x07
    13c0:	86 1b       	sub	r24, r22
    13c2:	97 0b       	sbc	r25, r23
    13c4:	ba 01       	movw	r22, r20
    13c6:	ac 01       	movw	r20, r24
    13c8:	41 50       	subi	r20, 0x01	; 1
    13ca:	51 09       	sbc	r21, r1
    13cc:	dc cf       	rjmp	.-72     	; 0x1386 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:660
      break;
    }
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
    13ce:	ca 01       	movw	r24, r20
    13d0:	57 fd       	sbrc	r21, 7
    13d2:	07 96       	adiw	r24, 0x07	; 7
    13d4:	a3 e0       	ldi	r26, 0x03	; 3
    13d6:	95 95       	asr	r25
    13d8:	87 95       	ror	r24
    13da:	aa 95       	dec	r26
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x90>
    13de:	a4 81       	ldd	r26, Z+4	; 0x04
    13e0:	b5 81       	ldd	r27, Z+5	; 0x05
    13e2:	8a 9f       	mul	r24, r26
    13e4:	90 01       	movw	r18, r0
    13e6:	8b 9f       	mul	r24, r27
    13e8:	30 0d       	add	r19, r0
    13ea:	9a 9f       	mul	r25, r26
    13ec:	30 0d       	add	r19, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	62 0f       	add	r22, r18
    13f2:	73 1f       	adc	r23, r19
    13f4:	07 8c       	ldd	r0, Z+31	; 0x1f
    13f6:	f0 a1       	ldd	r31, Z+32	; 0x20
    13f8:	e0 2d       	mov	r30, r0
    13fa:	e6 0f       	add	r30, r22
    13fc:	f7 1f       	adc	r31, r23
    13fe:	47 70       	andi	r20, 0x07	; 7
    1400:	55 27       	eor	r21, r21
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	01 c0       	rjmp	.+2      	; 0x140a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc4>
    1408:	22 0f       	add	r18, r18
    140a:	4a 95       	dec	r20
    140c:	ea f7       	brpl	.-6      	; 0x1408 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc2>
    140e:	80 81       	ld	r24, Z
    1410:	82 2b       	or	r24, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:666
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    1412:	80 83       	st	Z, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:670
      break;
    }
  }
}
    1414:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:663
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
    1416:	ca 01       	movw	r24, r20
    1418:	57 fd       	sbrc	r21, 7
    141a:	07 96       	adiw	r24, 0x07	; 7
    141c:	33 e0       	ldi	r19, 0x03	; 3
    141e:	95 95       	asr	r25
    1420:	87 95       	ror	r24
    1422:	3a 95       	dec	r19
    1424:	e1 f7       	brne	.-8      	; 0x141e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd8>
    1426:	a4 81       	ldd	r26, Z+4	; 0x04
    1428:	b5 81       	ldd	r27, Z+5	; 0x05
    142a:	8a 9f       	mul	r24, r26
    142c:	90 01       	movw	r18, r0
    142e:	8b 9f       	mul	r24, r27
    1430:	30 0d       	add	r19, r0
    1432:	9a 9f       	mul	r25, r26
    1434:	30 0d       	add	r19, r0
    1436:	11 24       	eor	r1, r1
    1438:	62 0f       	add	r22, r18
    143a:	73 1f       	adc	r23, r19
    143c:	07 8c       	ldd	r0, Z+31	; 0x1f
    143e:	f0 a1       	ldd	r31, Z+32	; 0x20
    1440:	e0 2d       	mov	r30, r0
    1442:	e6 0f       	add	r30, r22
    1444:	f7 1f       	adc	r31, r23
    1446:	47 70       	andi	r20, 0x07	; 7
    1448:	55 27       	eor	r21, r21
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10c>
    1450:	88 0f       	add	r24, r24
    1452:	4a 95       	dec	r20
    1454:	ea f7       	brpl	.-6      	; 0x1450 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10a>
    1456:	80 95       	com	r24
    1458:	90 81       	ld	r25, Z
    145a:	89 23       	and	r24, r25
    145c:	da cf       	rjmp	.-76     	; 0x1412 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:666
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    145e:	ca 01       	movw	r24, r20
    1460:	57 fd       	sbrc	r21, 7
    1462:	07 96       	adiw	r24, 0x07	; 7
    1464:	23 e0       	ldi	r18, 0x03	; 3
    1466:	95 95       	asr	r25
    1468:	87 95       	ror	r24
    146a:	2a 95       	dec	r18
    146c:	e1 f7       	brne	.-8      	; 0x1466 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x120>
    146e:	a4 81       	ldd	r26, Z+4	; 0x04
    1470:	b5 81       	ldd	r27, Z+5	; 0x05
    1472:	8a 9f       	mul	r24, r26
    1474:	90 01       	movw	r18, r0
    1476:	8b 9f       	mul	r24, r27
    1478:	30 0d       	add	r19, r0
    147a:	9a 9f       	mul	r25, r26
    147c:	30 0d       	add	r19, r0
    147e:	11 24       	eor	r1, r1
    1480:	62 0f       	add	r22, r18
    1482:	73 1f       	adc	r23, r19
    1484:	07 8c       	ldd	r0, Z+31	; 0x1f
    1486:	f0 a1       	ldd	r31, Z+32	; 0x20
    1488:	e0 2d       	mov	r30, r0
    148a:	e6 0f       	add	r30, r22
    148c:	f7 1f       	adc	r31, r23
    148e:	47 70       	andi	r20, 0x07	; 7
    1490:	55 27       	eor	r21, r21
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x154>
    1498:	22 0f       	add	r18, r18
    149a:	4a 95       	dec	r20
    149c:	ea f7       	brpl	.-6      	; 0x1498 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x152>
    149e:	80 81       	ld	r24, Z
    14a0:	82 27       	eor	r24, r18
    14a2:	b7 cf       	rjmp	.-146    	; 0x1412 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>

000014a4 <TWI_SlaveTransactionFinished>:
TWI_SlaveTransactionFinished():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:825
 *
 *  \param result  The result of the operation.
 */
void TWI_SlaveTransactionFinished(uint8_t result)
{
  TWI0.SCTRLA |= (TWI_APIEN_bm | TWI_PIEN_bm);
    14a4:	e0 ea       	ldi	r30, 0xA0	; 160
    14a6:	f8 e0       	ldi	r31, 0x08	; 8
    14a8:	91 85       	ldd	r25, Z+9	; 0x09
    14aa:	90 66       	ori	r25, 0x60	; 96
    14ac:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:826
  twi_mode = TWI_MODE_SLAVE;
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	90 93 5c 28 	sts	0x285C, r25	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:827
  slave_result = result;
    14b4:	80 93 48 28 	sts	0x2848, r24	; 0x802848 <slave_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:828
  slave_trans_status = TWIM_STATUS_READY;
    14b8:	10 92 47 28 	sts	0x2847, r1	; 0x802847 <slave_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:829
}
    14bc:	08 95       	ret

000014be <TWI_SlaveAddressMatchHandler>:
TWI_SlaveAddressMatchHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:669
 *  being addressed by a master
 *
 */
void TWI_SlaveAddressMatchHandler()
{
  slave_trans_status = TWIS_STATUS_BUSY;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 47 28 	sts	0x2847, r24	; 0x802847 <slave_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:670
  slave_result = TWIS_RESULT_UNKNOWN;
    14c4:	10 92 48 28 	sts	0x2848, r1	; 0x802848 <slave_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:673

  /* Send ACK, wait for data interrupt */
  TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	90 93 aa 08 	sts	0x08AA, r25	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:676

  /* If Master Read/Slave Write */
  if (TWI0.SSTATUS & TWI_DIR_bm)
    14ce:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    14d2:	91 ff       	sbrs	r25, 1
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <TWI_SlaveAddressMatchHandler+0x2e>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:678
  {
    slave_bytesWritten = 0;
    14d6:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <slave_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:680
    /* Call user function  */
    slave_bytesToWrite = TWI_onSlaveTransmit();
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	e0 e0       	ldi	r30, 0x00	; 0
    14de:	09 95       	icall
    14e0:	80 93 51 28 	sts	0x2851, r24	; 0x802851 <slave_bytesToWrite>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:681
    twi_mode = TWI_MODE_SLAVE_TRANSMIT;
    14e4:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:688
  /* If Master Write/Slave Read */
  else
  {
    slave_bytesRead = 0;
    slave_callUserReceive = 1;
    twi_mode = TWI_MODE_SLAVE_RECEIVE;
    14e6:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:692
  }

  /* Data interrupt to follow... */
}
    14ea:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:686
    twi_mode = TWI_MODE_SLAVE_TRANSMIT;
  }
  /* If Master Write/Slave Read */
  else
  {
    slave_bytesRead = 0;
    14ec:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:687
    slave_callUserReceive = 1;
    14f0:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <slave_callUserReceive>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:688
    twi_mode = TWI_MODE_SLAVE_RECEIVE;
    14f4:	86 e0       	ldi	r24, 0x06	; 6
    14f6:	f7 cf       	rjmp	.-18     	; 0x14e6 <TWI_SlaveAddressMatchHandler+0x28>

000014f8 <TWI_MasterSetBaud>:
TWI_MasterSetBaud():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:207
 *  Sets the baud rate used by TWI Master.
 *
 *  \param frequency            The required baud.
 */
void TWI_MasterSetBaud(uint32_t frequency)
{
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:213
  // Formula is: BAUD = ((F_CLKPER/frequency) - F_CLKPER*T_RISE - 10)/2;
  // Where T_RISE varies depending on operating frequency...
  // From 1617 DS: 1000ns @ 100kHz / 300ns @ 400kHz / 120ns @ 1MHz

  uint16_t t_rise;
  uint16_t freq_khz = frequency / 1000;
    1504:	28 ee       	ldi	r18, 0xE8	; 232
    1506:	33 e0       	ldi	r19, 0x03	; 3
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__udivmodsi4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:215

  if (freq_khz < 200)
    1510:	28 3c       	cpi	r18, 0xC8	; 200
    1512:	31 05       	cpc	r19, r1
    1514:	78 f0       	brcs	.+30     	; 0x1534 <TWI_MasterSetBaud+0x3c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:222
    freq_khz = 100;
    t_rise = 1000;
  }
  else if (freq_khz < 800)
  {
    freq_khz = 400;
    1516:	c0 e9       	ldi	r28, 0x90	; 144
    1518:	d1 e0       	ldi	r29, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:223
    t_rise = 300;
    151a:	6c e2       	ldi	r22, 0x2C	; 44
    151c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:220
  if (freq_khz < 200)
  {
    freq_khz = 100;
    t_rise = 1000;
  }
  else if (freq_khz < 800)
    151e:	20 32       	cpi	r18, 0x20	; 32
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	38 07       	cpc	r19, r24
    1524:	58 f0       	brcs	.+22     	; 0x153c <TWI_MasterSetBaud+0x44>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:227
    freq_khz = 400;
    t_rise = 300;
  }
  else if (freq_khz < 1200)
  {
    freq_khz = 1000;
    1526:	c8 ee       	ldi	r28, 0xE8	; 232
    1528:	d3 e0       	ldi	r29, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:228
    t_rise = 120;
    152a:	68 e7       	ldi	r22, 0x78	; 120
    152c:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:225
  else if (freq_khz < 800)
  {
    freq_khz = 400;
    t_rise = 300;
  }
  else if (freq_khz < 1200)
    152e:	20 3b       	cpi	r18, 0xB0	; 176
    1530:	34 40       	sbci	r19, 0x04	; 4
    1532:	20 f0       	brcs	.+8      	; 0x153c <TWI_MasterSetBaud+0x44>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:232
    freq_khz = 1000;
    t_rise = 120;
  }
  else
  {
    freq_khz = 100;
    1534:	c4 e6       	ldi	r28, 0x64	; 100
    1536:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:233
    t_rise = 1000;
    1538:	68 ee       	ldi	r22, 0xE8	; 232
    153a:	73 e0       	ldi	r23, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:236
  }

  uint32_t baud = ((F_CPU / 1000 / freq_khz) - (((F_CPU * t_rise) / 1000) / 1000) / 1000 - 10) / 2;
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	24 e0       	ldi	r18, 0x04	; 4
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	2a 95       	dec	r18
    154c:	d1 f7       	brne	.-12     	; 0x1542 <TWI_MasterSetBaud+0x4a>
    154e:	28 e1       	ldi	r18, 0x18	; 24
    1550:	3c ef       	ldi	r19, 0xFC	; 252
    1552:	4f ef       	ldi	r20, 0xFF	; 255
    1554:	5f ef       	ldi	r21, 0xFF	; 255
    1556:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__divmodsi4>
    155a:	69 01       	movw	r12, r18
    155c:	7a 01       	movw	r14, r20
    155e:	9e 01       	movw	r18, r28
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	60 e8       	ldi	r22, 0x80	; 128
    1566:	7e e3       	ldi	r23, 0x3E	; 62
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__divmodsi4>
    1570:	c7 01       	movw	r24, r14
    1572:	b6 01       	movw	r22, r12
    1574:	62 0f       	add	r22, r18
    1576:	73 1f       	adc	r23, r19
    1578:	84 1f       	adc	r24, r20
    157a:	95 1f       	adc	r25, r21
    157c:	6a 50       	subi	r22, 0x0A	; 10
    157e:	71 09       	sbc	r23, r1
    1580:	81 09       	sbc	r24, r1
    1582:	91 09       	sbc	r25, r1
    1584:	22 e0       	ldi	r18, 0x02	; 2
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__divmodsi4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:237
  TWI0.MBAUD = (uint8_t)baud;
    1590:	20 93 a6 08 	sts	0x08A6, r18	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7f48a6>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:238
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	08 95       	ret

000015a2 <TwoWire::peek()>:
peek():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:337
// or after requestFrom(address, numBytes)
int TwoWire::peek()
{
  int value = -1;

  if (rxBufferIndex < rxBufferLength)
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	30 91 5e 28 	lds	r19, 0x285E	; 0x80285e <TwoWire::rxBufferIndex>
    15aa:	20 91 5d 28 	lds	r18, 0x285D	; 0x80285d <TwoWire::rxBufferLength>
    15ae:	32 17       	cp	r19, r18
    15b0:	10 f4       	brcc	.+4      	; 0x15b6 <TwoWire::peek()+0x14>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:343
  {
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    15b6:	91 95       	neg	r25
    15b8:	81 95       	neg	r24
    15ba:	91 09       	sbc	r25, r1
    15bc:	08 95       	ret

000015be <TwoWire::read()>:
read():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:321
int TwoWire::read()
{
  int value = -1;

  // get each successive byte on each call
  if (rxBufferIndex < rxBufferLength)
    15be:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <TwoWire::rxBufferIndex>
    15c2:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <TwoWire::rxBufferLength>
    15c6:	89 17       	cp	r24, r25
    15c8:	30 f4       	brcc	.+12     	; 0x15d6 <TwoWire::read()+0x18>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:324
  {
    value = rxBuffer[rxBufferIndex];
    rxBufferIndex++;
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 5e 28 	sts	0x285E, r24	; 0x80285e <TwoWire::rxBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:323
  int value = -1;

  // get each successive byte on each call
  if (rxBufferIndex < rxBufferLength)
  {
    value = rxBuffer[rxBufferIndex];
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:318
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read()
{
  int value = -1;
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:328
    value = rxBuffer[rxBufferIndex];
    rxBufferIndex++;
  }

  return value;
}
    15da:	08 95       	ret

000015dc <TwoWire::available()>:
available():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:310
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available()
{
  return rxBufferLength - rxBufferIndex;
    15dc:	80 91 5d 28 	lds	r24, 0x285D	; 0x80285d <TwoWire::rxBufferLength>
    15e0:	90 91 5e 28 	lds	r25, 0x285E	; 0x80285e <TwoWire::rxBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:311
}
    15e4:	89 1b       	sub	r24, r25
    15e6:	99 0b       	sbc	r25, r25
    15e8:	08 95       	ret

000015ea <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:296

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	7c 01       	movw	r14, r24
    15fc:	8a 01       	movw	r16, r20
    15fe:	eb 01       	movw	r28, r22
    1600:	6b 01       	movw	r12, r22
    1602:	c4 0e       	add	r12, r20
    1604:	d5 1e       	adc	r13, r21
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:297
  for (size_t i = 0; i < quantity; i++)
    1606:	cc 15       	cp	r28, r12
    1608:	dd 05       	cpc	r29, r13
    160a:	51 f0       	breq	.+20     	; 0x1620 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:299
  {
    write(*(data + i));
    160c:	69 91       	ld	r22, Y+
    160e:	d7 01       	movw	r26, r14
    1610:	ed 91       	ld	r30, X+
    1612:	fc 91       	ld	r31, X
    1614:	01 90       	ld	r0, Z+
    1616:	f0 81       	ld	r31, Z
    1618:	e0 2d       	mov	r30, r0
    161a:	c7 01       	movw	r24, r14
    161c:	09 95       	icall
    161e:	f3 cf       	rjmp	.-26     	; 0x1606 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:303
  }

  return quantity;
}
    1620:	c8 01       	movw	r24, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	08 95       	ret

00001634 <TwoWire::write(unsigned char)>:
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:276
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  /* Check if buffer is full */
  if (txBufferLength >= TWI_BUFFER_SIZE)
    1634:	20 91 60 28 	lds	r18, 0x2860	; 0x802860 <TwoWire::txBufferLength>
    1638:	20 34       	cpi	r18, 0x40	; 64
    163a:	40 f0       	brcs	.+16     	; 0x164c <TwoWire::write(unsigned char)+0x18>
_ZN5Print13setWriteErrorEi():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.h:39
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	fc 01       	movw	r30, r24
    1642:	22 83       	std	Z+2, r18	; 0x02
    1644:	33 83       	std	Z+3, r19	; 0x03
write():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:279
  {
    setWriteError();
    return 0;
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:283
  }

  /* Put byte in txBuffer */
  txBuffer[txBufferIndex] = data;
    164c:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <TwoWire::txBufferIndex>
    1650:	e8 2f       	mov	r30, r24
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e9 5f       	subi	r30, 0xF9	; 249
    1656:	f7 4d       	sbci	r31, 0xD7	; 215
    1658:	60 83       	st	Z, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:284
  txBufferIndex++;
    165a:	8f 5f       	subi	r24, 0xFF	; 255
    165c:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:287

  /* Update buffer length */
  txBufferLength = txBufferIndex;
    1660:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <TwoWire::txBufferLength>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:290

  return 1;
}
    1668:	08 95       	ret

0000166a <TwoWire::endTransmission()>:
TWI_MasterWriteRead():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:311
                            uint8_t* write_data,
                            uint8_t bytes_to_write,
                            uint8_t bytes_to_read,
                            uint8_t send_stop)
{
  if (twi_mode != TWI_MODE_MASTER)
    166a:	90 91 5c 28 	lds	r25, 0x285C	; 0x80285c <twi_mode>
    166e:	91 30       	cpi	r25, 0x01	; 1
    1670:	09 f0       	breq	.+2      	; 0x1674 <TwoWire::endTransmission()+0xa>
    1672:	57 c0       	rjmp	.+174    	; 0x1722 <TwoWire::endTransmission()+0xb8>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:315
    return false;

  /*Initiate transaction if bus is ready. */
  if (master_trans_status == TWIM_STATUS_READY)
    1674:	80 91 59 28 	lds	r24, 0x2859	; 0x802859 <master_trans_status>
    1678:	81 11       	cpse	r24, r1
    167a:	55 c0       	rjmp	.+170    	; 0x1726 <TwoWire::endTransmission()+0xbc>
endTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:250
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(bool sendStop)
{
  // transmit buffer (blocking)
  uint8_t status = TWI_MasterWrite(txAddress, txBuffer, txBufferLength, sendStop);
    167c:	20 91 60 28 	lds	r18, 0x2860	; 0x802860 <TwoWire::txBufferLength>
    1680:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <TwoWire::txAddress>
TWI_MasterWriteRead():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:317
  {
    master_trans_status = TWIM_STATUS_BUSY;
    1684:	90 93 59 28 	sts	0x2859, r25	; 0x802859 <master_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:318
    master_result = TWIM_RESULT_UNKNOWN;
    1688:	10 92 58 28 	sts	0x2858, r1	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:320

    master_writeData = write_data;
    168c:	47 e0       	ldi	r20, 0x07	; 7
    168e:	58 e2       	ldi	r21, 0x28	; 40
    1690:	40 93 4a 28 	sts	0x284A, r20	; 0x80284a <master_writeData>
    1694:	50 93 4b 28 	sts	0x284B, r21	; 0x80284b <master_writeData+0x1>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:322

    master_bytesToWrite = bytes_to_write;
    1698:	20 93 4c 28 	sts	0x284C, r18	; 0x80284c <master_bytesToWrite>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:323
    master_bytesToRead = bytes_to_read;
    169c:	10 92 4e 28 	sts	0x284E, r1	; 0x80284e <master_bytesToRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:324
    master_bytesWritten = 0;
    16a0:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <master_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:325
    master_bytesRead = 0;
    16a4:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <master_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:326
    master_sendStop = send_stop;
    16a8:	90 93 4d 28 	sts	0x284D, r25	; 0x80284d <master_sendStop>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:327
    master_slaveAddress = slave_address << 1;
    16ac:	88 0f       	add	r24, r24
    16ae:	80 93 49 28 	sts	0x2849, r24	; 0x802849 <master_slaveAddress>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:353
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
    16b2:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:346
    /* If read command, send the START condition + Address +
     * 'R/_W = 1'
     */
    else if (master_bytesToRead > 0)
    {
      twi_mode = TWI_MODE_MASTER_RECEIVE;
    16b4:	24 e0       	ldi	r18, 0x04	; 4
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:334
  trigger_action:

    /* If write command, send the START condition + Address +
     * 'R/_W = 0'
     */
    if (master_bytesToWrite > 0)
    16b6:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <master_bytesToWrite>
    16ba:	88 23       	and	r24, r24
    16bc:	31 f0       	breq	.+12     	; 0x16ca <TwoWire::endTransmission()+0x60>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:353
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
    16be:	90 93 5c 28 	sts	0x285C, r25	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:354
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
    16c2:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <master_slaveAddress>
    16c6:	8e 7f       	andi	r24, 0xFE	; 254
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <TwoWire::endTransmission()+0x72>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:344
    }

    /* If read command, send the START condition + Address +
     * 'R/_W = 1'
     */
    else if (master_bytesToRead > 0)
    16ca:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <master_bytesToRead>
    16ce:	88 23       	and	r24, r24
    16d0:	41 f0       	breq	.+16     	; 0x16e2 <TwoWire::endTransmission()+0x78>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:346
    {
      twi_mode = TWI_MODE_MASTER_RECEIVE;
    16d2:	20 93 5c 28 	sts	0x285C, r18	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:347
      uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
    16d6:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <master_slaveAddress>
    16da:	81 60       	ori	r24, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:355

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
      TWI0.MADDR = writeAddress;
    16dc:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <TwoWire::endTransmission()+0x88>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:351
      twi_mode = TWI_MODE_MASTER_RECEIVE;
      uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    16e2:	80 91 4c 28 	lds	r24, 0x284C	; 0x80284c <master_bytesToWrite>
    16e6:	81 11       	cpse	r24, r1
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <TwoWire::endTransmission()+0x88>
    16ea:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <master_bytesToRead>
    16ee:	88 23       	and	r24, r24
    16f0:	31 f3       	breq	.-52     	; 0x16be <TwoWire::endTransmission()+0x54>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:359
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
      TWI0.MADDR = writeAddress;
    }

    /* Arduino requires blocking function */
    while (master_result == TWIM_RESULT_UNKNOWN)
    16f2:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <master_result>
    16f6:	88 23       	and	r24, r24
    16f8:	e1 f3       	breq	.-8      	; 0x16f2 <TwoWire::endTransmission()+0x88>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:364
    {
    }

    // in case of arbitration lost, retry sending
    if (master_result == TWIM_RESULT_ARBITRATION_LOST)
    16fa:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <master_result>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	d1 f2       	breq	.-76     	; 0x16b6 <TwoWire::endTransmission()+0x4c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:370
    {
      goto trigger_action;
    }

    uint8_t ret = 0;
    if (master_bytesToRead > 0)
    1702:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <master_bytesToRead>
    1706:	88 23       	and	r24, r24
    1708:	39 f0       	breq	.+14     	; 0x1718 <TwoWire::endTransmission()+0xae>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:373
    {
      // return bytes really read
      ret = master_bytesRead;
    170a:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <master_bytesRead>
endTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:253

  // reset tx buffer iterator vars
  txBufferIndex = 0;
    170e:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:254
  txBufferLength = 0;
    1712:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:268
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    1716:	08 95       	ret
TWI_MasterWriteRead():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:378
    }
    else
    {
      // return 0 if success, 1 otherwise
      ret = (master_result == TWIM_RESULT_OK ? 0 : 1);
    1718:	90 91 58 28 	lds	r25, 0x2858	; 0x802858 <master_result>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	91 30       	cpi	r25, 0x01	; 1
    1720:	b1 f7       	brne	.-20     	; 0x170e <TwoWire::endTransmission()+0xa4>
endTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:312
                            uint8_t bytes_to_write,
                            uint8_t bytes_to_read,
                            uint8_t send_stop)
{
  if (twi_mode != TWI_MODE_MASTER)
    return false;
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	f4 cf       	rjmp	.-24     	; 0x170e <TwoWire::endTransmission()+0xa4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:385

    return ret;
  }
  else
  {
    return 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	f2 cf       	rjmp	.-28     	; 0x170e <TwoWire::endTransmission()+0xa4>

0000172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>:
ssd1306_commandList():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:416
                   number of commands in the list

    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	7c 01       	movw	r14, r24
    1736:	c6 2f       	mov	r28, r22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:417
  if (wire) { // I2C
    1738:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    173c:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	09 f4       	brne	.+2      	; 0x1746 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0x1c>
    1744:	50 c0       	rjmp	.+160    	; 0x17e6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0xbc>
beginTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
    1746:	20 91 b8 28 	lds	r18, 0x28B8	; 0x8028b8 <display+0x21>
    174a:	20 93 62 28 	sts	0x2862, r18	; 0x802862 <TwoWire::txAddress>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    174e:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
    1752:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
ssd1306_commandList():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:419
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    1756:	dc 01       	movw	r26, r24
    1758:	ed 91       	ld	r30, X+
    175a:	fc 91       	ld	r31, X
    175c:	01 90       	ld	r0, Z+
    175e:	f0 81       	ld	r31, Z
    1760:	e0 2d       	mov	r30, r0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	09 95       	icall
    1766:	87 01       	movw	r16, r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:420
    uint16_t bytesOut = 1;
    1768:	ee 24       	eor	r14, r14
    176a:	e3 94       	inc	r14
    176c:	f1 2c       	mov	r15, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:421
    while (n--) {
    176e:	c1 50       	subi	r28, 0x01	; 1
    1770:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    1774:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    1778:	cf 3f       	cpi	r28, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:422
      if (bytesOut >= WIRE_MAX) {
    177a:	79 f1       	breq	.+94     	; 0x17da <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0xb0>
    177c:	b0 e2       	ldi	r27, 0x20	; 32
    177e:	eb 16       	cp	r14, r27
    1780:	f1 04       	cpc	r15, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:423
        wire->endTransmission();
    1782:	c0 f0       	brcs	.+48     	; 0x17b4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0x8a>
    1784:	72 df       	rcall	.-284    	; 0x166a <TwoWire::endTransmission()>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:424
        wire->beginTransmission(i2caddr);
    1786:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    178a:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
beginTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
    178e:	20 91 b8 28 	lds	r18, 0x28B8	; 0x8028b8 <display+0x21>
    1792:	20 93 62 28 	sts	0x2862, r18	; 0x802862 <TwoWire::txAddress>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1796:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
    179a:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
ssd1306_commandList():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:425
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    179e:	dc 01       	movw	r26, r24
    17a0:	ed 91       	ld	r30, X+
    17a2:	fc 91       	ld	r31, X
    17a4:	01 90       	ld	r0, Z+
    17a6:	f0 81       	ld	r31, Z
    17a8:	e0 2d       	mov	r30, r0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:426
        bytesOut = 1;
    17ae:	ee 24       	eor	r14, r14
    17b0:	e3 94       	inc	r14
    17b2:	f1 2c       	mov	r15, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:428
      }
      WIRE_WRITE(pgm_read_byte(c++));
    17b4:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    17b8:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    17bc:	f8 01       	movw	r30, r16
    17be:	64 91       	lpm	r22, Z
    17c0:	dc 01       	movw	r26, r24
    17c2:	ed 91       	ld	r30, X+
    17c4:	fc 91       	ld	r31, X
    17c6:	01 90       	ld	r0, Z+
    17c8:	f0 81       	ld	r31, Z
    17ca:	e0 2d       	mov	r30, r0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:429
      bytesOut++;
    17cc:	09 95       	icall
    17ce:	bf ef       	ldi	r27, 0xFF	; 255
    17d0:	eb 1a       	sub	r14, r27
    17d2:	fb 0a       	sbc	r15, r27
    17d4:	0f 5f       	subi	r16, 0xFF	; 255
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:437
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    17d8:	ca cf       	rjmp	.-108    	; 0x176e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0x44>
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:431
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
    17e2:	ef 90       	pop	r14
    17e4:	42 cf       	rjmp	.-380    	; 0x166a <TwoWire::endTransmission()>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:433
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    17e6:	e0 91 c4 28 	lds	r30, 0x28C4	; 0x8028c4 <display+0x2d>
    17ea:	f0 91 c5 28 	lds	r31, 0x28C5	; 0x8028c5 <display+0x2e>
    17ee:	90 81       	ld	r25, Z
    17f0:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <display+0x33>
    17f4:	80 95       	com	r24
    17f6:	89 23       	and	r24, r25
    17f8:	80 83       	st	Z, r24
    17fa:	f7 01       	movw	r30, r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:434
    while (n--)
    17fc:	c1 50       	subi	r28, 0x01	; 1
    17fe:	08 f4       	brcc	.+2      	; 0x1802 <__DATA_REGION_LENGTH__+0x2>
    1800:	3d c0       	rjmp	.+122    	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:435
      SPIwrite(pgm_read_byte(c++));
    1802:	44 91       	lpm	r20, Z
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    1804:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
    1808:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    180c:	89 2b       	or	r24, r25
    180e:	59 f0       	breq	.+22     	; 0x1826 <__DATA_REGION_LENGTH__+0x26>
transfer():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:304
  * The following NOP introduces a small delay that can prevent the wait
  * loop from iterating when running at the maximum speed. This gives
  * about 10% more speed, even if it seems counter-intuitive. At lower
  * speeds it is unnoticed.
  */
  asm volatile("nop");
    1810:	00 00       	nop
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:306

  SPI0.DATA = data;
    1812:	40 93 c4 08 	sts	0x08C4, r20	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:307
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
    1816:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
    181a:	87 ff       	sbrs	r24, 7
    181c:	fc cf       	rjmp	.-8      	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:308
  return SPI0.DATA;                             // read data back
    181e:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
    1822:	31 96       	adiw	r30, 0x01	; 1
    1824:	eb cf       	rjmp	.-42     	; 0x17fc <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]+0xd2>
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    1826:	28 e0       	ldi	r18, 0x08	; 8
    1828:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_commandList():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    182a:	90 e8       	ldi	r25, 0x80	; 128
    182c:	a0 91 c0 28 	lds	r26, 0x28C0	; 0x8028c0 <display+0x29>
    1830:	b0 91 c1 28 	lds	r27, 0x28C1	; 0x8028c1 <display+0x2a>
    1834:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
#ifdef HAVE_PORTREG
      if (d & bit)
    1838:	54 2f       	mov	r21, r20
    183a:	59 23       	and	r21, r25
    183c:	d9 f0       	breq	.+54     	; 0x1874 <__DATA_REGION_LENGTH__+0x74>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
        *mosiPort |= mosiPinMask;
    183e:	5c 91       	ld	r21, X
    1840:	85 2b       	or	r24, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
      else
        *mosiPort &= ~mosiPinMask;
    1842:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
      *clkPort |= clkPinMask;  // Clock high
    1844:	a0 91 c2 28 	lds	r26, 0x28C2	; 0x8028c2 <display+0x2b>
    1848:	b0 91 c3 28 	lds	r27, 0x28C3	; 0x8028c3 <display+0x2c>
    184c:	8c 91       	ld	r24, X
    184e:	50 91 c9 28 	lds	r21, 0x28C9	; 0x8028c9 <display+0x32>
    1852:	85 2b       	or	r24, r21
    1854:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
      *clkPort &= ~clkPinMask; // Clock low
    1856:	a0 91 c2 28 	lds	r26, 0x28C2	; 0x8028c2 <display+0x2b>
    185a:	b0 91 c3 28 	lds	r27, 0x28C3	; 0x8028c3 <display+0x2c>
    185e:	5c 91       	ld	r21, X
    1860:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <display+0x32>
    1864:	80 95       	com	r24
    1866:	85 23       	and	r24, r21
    1868:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    186a:	96 95       	lsr	r25
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	31 09       	sbc	r19, r1
    1870:	e9 f6       	brne	.-70     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
    1872:	d7 cf       	rjmp	.-82     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    1874:	5c 91       	ld	r21, X
    1876:	80 95       	com	r24
    1878:	85 23       	and	r24, r21
    187a:	e3 cf       	rjmp	.-58     	; 0x1842 <__DATA_REGION_LENGTH__+0x42>
ssd1306_commandList():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:437
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	08 95       	ret

00001888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
ssd1306_command1():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:392
                   the command character to send to the display.
                   Refer to ssd1306 data sheet for commands
    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	ec 01       	movw	r28, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:393
  if (wire) { // I2C
    1890:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1892:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	01 f1       	breq	.+64     	; 0x18d8 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x50>
    1898:	16 2f       	mov	r17, r22
beginTransmission():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
    189a:	29 a1       	ldd	r18, Y+33	; 0x21
    189c:	20 93 62 28 	sts	0x2862, r18	; 0x802862 <TwoWire::txAddress>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    18a0:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
    18a4:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
ssd1306_command1():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:395
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    18a8:	dc 01       	movw	r26, r24
    18aa:	ed 91       	ld	r30, X+
    18ac:	fc 91       	ld	r31, X
    18ae:	01 90       	ld	r0, Z+
    18b0:	f0 81       	ld	r31, Z
    18b2:	e0 2d       	mov	r30, r0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:396
    WIRE_WRITE(c);
    18b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18bc:	dc 01       	movw	r26, r24
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	01 90       	ld	r0, Z+
    18c4:	f0 81       	ld	r31, Z
    18c6:	e0 2d       	mov	r30, r0
    18c8:	61 2f       	mov	r22, r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:397
    wire->endTransmission();
    18ca:	09 95       	icall
    18cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:402
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    18ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:397
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    WIRE_WRITE(c);
    wire->endTransmission();
    18d4:	1f 91       	pop	r17
    18d6:	c9 ce       	rjmp	.-622    	; 0x166a <TwoWire::endTransmission()>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:399
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    18d8:	ad a5       	ldd	r26, Y+45	; 0x2d
    18da:	be a5       	ldd	r27, Y+46	; 0x2e
    18dc:	9c 91       	ld	r25, X
    18de:	8b a9       	ldd	r24, Y+51	; 0x33
    18e0:	80 95       	com	r24
    18e2:	89 23       	and	r24, r25
    18e4:	8c 93       	st	X, r24
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	89 2b       	or	r24, r25
    18ec:	69 f0       	breq	.+26     	; 0x1908 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x80>
transfer():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:304
  * The following NOP introduces a small delay that can prevent the wait
  * loop from iterating when running at the maximum speed. This gives
  * about 10% more speed, even if it seems counter-intuitive. At lower
  * speeds it is unnoticed.
  */
  asm volatile("nop");
    18ee:	00 00       	nop
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:306

  SPI0.DATA = data;
    18f0:	60 93 c4 08 	sts	0x08C4, r22	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:307
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
    18f4:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
    18f8:	87 ff       	sbrs	r24, 7
    18fa:	fc cf       	rjmp	.-8      	; 0x18f4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x6c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:308
  return SPI0.DATA;                             // read data back
    18fc:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
ssd1306_command1():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:402
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	08 95       	ret
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    1908:	28 e0       	ldi	r18, 0x08	; 8
    190a:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_command1():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    190c:	90 e8       	ldi	r25, 0x80	; 128
    190e:	a9 a5       	ldd	r26, Y+41	; 0x29
    1910:	ba a5       	ldd	r27, Y+42	; 0x2a
    1912:	89 a9       	ldd	r24, Y+49	; 0x31
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
#ifdef HAVE_PORTREG
      if (d & bit)
    1914:	46 2f       	mov	r20, r22
    1916:	49 23       	and	r20, r25
    1918:	a9 f0       	breq	.+42     	; 0x1944 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0xbc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
        *mosiPort |= mosiPinMask;
    191a:	4c 91       	ld	r20, X
    191c:	84 2b       	or	r24, r20
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
      else
        *mosiPort &= ~mosiPinMask;
    191e:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
      *clkPort |= clkPinMask;  // Clock high
    1920:	ab a5       	ldd	r26, Y+43	; 0x2b
    1922:	bc a5       	ldd	r27, Y+44	; 0x2c
    1924:	8c 91       	ld	r24, X
    1926:	4a a9       	ldd	r20, Y+50	; 0x32
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
      *clkPort &= ~clkPinMask; // Clock low
    192c:	ab a5       	ldd	r26, Y+43	; 0x2b
    192e:	bc a5       	ldd	r27, Y+44	; 0x2c
    1930:	4c 91       	ld	r20, X
    1932:	8a a9       	ldd	r24, Y+50	; 0x32
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    193a:	96 95       	lsr	r25
    193c:	21 50       	subi	r18, 0x01	; 1
    193e:	31 09       	sbc	r19, r1
    1940:	31 f7       	brne	.-52     	; 0x190e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x86>
    1942:	de cf       	rjmp	.-68     	; 0x1900 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x78>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    1944:	4c 91       	ld	r20, X
    1946:	80 95       	com	r24
    1948:	84 23       	and	r24, r20
    194a:	e9 cf       	rjmp	.-46     	; 0x191e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x96>

0000194c <Adafruit_GFX::invertDisplay(bool)>:
invertDisplay():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1543
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    194c:	08 95       	ret

0000194e <Adafruit_GFX::setRotation(unsigned char)>:
setRotation():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1316
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    194e:	fc 01       	movw	r30, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1317
  rotation = (x & 3);
    1950:	63 70       	andi	r22, 0x03	; 3
    1952:	66 8b       	std	Z+22, r22	; 0x16
    1954:	84 81       	ldd	r24, Z+4	; 0x04
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	26 81       	ldd	r18, Z+6	; 0x06
    195a:	37 81       	ldd	r19, Z+7	; 0x07
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1318
  switch (rotation) {
    195c:	61 30       	cpi	r22, 0x01	; 1
    195e:	39 f0       	breq	.+14     	; 0x196e <Adafruit_GFX::setRotation(unsigned char)+0x20>
    1960:	63 30       	cpi	r22, 0x03	; 3
    1962:	29 f0       	breq	.+10     	; 0x196e <Adafruit_GFX::setRotation(unsigned char)+0x20>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1321
  case 0:
  case 2:
    _width = WIDTH;
    1964:	80 87       	std	Z+8, r24	; 0x08
    1966:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1322
    _height = HEIGHT;
    1968:	22 87       	std	Z+10, r18	; 0x0a
    196a:	33 87       	std	Z+11, r19	; 0x0b
    196c:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1326
    break;
  case 1:
  case 3:
    _width = HEIGHT;
    196e:	20 87       	std	Z+8, r18	; 0x08
    1970:	31 87       	std	Z+9, r19	; 0x09
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1327
    _height = WIDTH;
    1972:	82 87       	std	Z+10, r24	; 0x0a
    1974:	93 87       	std	Z+11, r25	; 0x0b
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1330
    break;
  }
}
    1976:	08 95       	ret

00001978 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
drawChar():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1136
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
    1978:	2f 92       	push	r2
    197a:	3f 92       	push	r3
    197c:	4f 92       	push	r4
    197e:	5f 92       	push	r5
    1980:	6f 92       	push	r6
    1982:	7f 92       	push	r7
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	6a 97       	sbiw	r28, 0x1a	; 26
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	89 8f       	std	Y+25, r24	; 0x19
    19a8:	9a 8f       	std	Y+26, r25	; 0x1a
    19aa:	69 83       	std	Y+1, r22	; 0x01
    19ac:	7a 83       	std	Y+2, r23	; 0x02
    19ae:	4a 01       	movw	r8, r20
    19b0:	d2 2e       	mov	r13, r18
    19b2:	0f 83       	std	Y+7, r16	; 0x07
    19b4:	18 87       	std	Y+8, r17	; 0x08
    19b6:	37 01       	movw	r6, r14
    19b8:	bc 2c       	mov	r11, r12
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1138

  if (!gfxFont) { // 'Classic' built-in font
    19ba:	dc 01       	movw	r26, r24
    19bc:	59 96       	adiw	r26, 0x19	; 25
    19be:	2d 91       	ld	r18, X+
    19c0:	3c 91       	ld	r19, X
    19c2:	5a 97       	sbiw	r26, 0x1a	; 26
    19c4:	21 15       	cp	r18, r1
    19c6:	31 05       	cpc	r19, r1
    19c8:	09 f0       	breq	.+2      	; 0x19cc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x54>
    19ca:	12 c1       	rjmp	.+548    	; 0x1bf0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x278>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1140

    if ((x >= _width) ||              // Clip right
    19cc:	18 96       	adiw	r26, 0x08	; 8
    19ce:	8d 91       	ld	r24, X+
    19d0:	9c 91       	ld	r25, X
    19d2:	19 97       	sbiw	r26, 0x09	; 9
    19d4:	68 17       	cp	r22, r24
    19d6:	79 07       	cpc	r23, r25
    19d8:	0c f0       	brlt	.+2      	; 0x19dc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x64>
    19da:	d4 c1       	rjmp	.+936    	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x40c>
    19dc:	1a 96       	adiw	r26, 0x0a	; 10
    19de:	8d 91       	ld	r24, X+
    19e0:	9c 91       	ld	r25, X
    19e2:	48 17       	cp	r20, r24
    19e4:	59 07       	cpc	r21, r25
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    19e8:	cd c1       	rjmp	.+922    	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x40c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1142
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    19ea:	4c 2c       	mov	r4, r12
    19ec:	51 2c       	mov	r5, r1
    19ee:	b6 e0       	ldi	r27, 0x06	; 6
    19f0:	cb 9e       	mul	r12, r27
    19f2:	60 0d       	add	r22, r0
    19f4:	71 1d       	adc	r23, r1
    19f6:	11 24       	eor	r1, r1
    19f8:	6b 87       	std	Y+11, r22	; 0x0b
    19fa:	7c 87       	std	Y+12, r23	; 0x0c
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1141
                            uint8_t size_y) {

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
    19fc:	16 16       	cp	r1, r22
    19fe:	17 06       	cpc	r1, r23
    1a00:	0c f0       	brlt	.+2      	; 0x1a04 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x8c>
    1a02:	c0 c1       	rjmp	.+896    	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x40c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1143
        ((x + 6 * size_x - 1) < 0) || // Clip left
        ((y + 8 * size_y - 1) < 0))   // Clip top
    1a04:	ea 2d       	mov	r30, r10
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	e9 87       	std	Y+9, r30	; 0x09
    1a0a:	fa 87       	std	Y+10, r31	; 0x0a
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	9a 95       	dec	r25
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
    1a16:	ef 87       	std	Y+15, r30	; 0x0f
    1a18:	f8 8b       	std	Y+16, r31	; 0x10
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	84 0f       	add	r24, r20
    1a1e:	95 1f       	adc	r25, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1142

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    1a20:	18 16       	cp	r1, r24
    1a22:	19 06       	cpc	r1, r25
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
    1a26:	ae c1       	rjmp	.+860    	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x40c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1146
        ((y + 8 * size_y - 1) < 0))   // Clip top
      return;

    if (!_cp437 && (c >= 176))
    1a28:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a2a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a2c:	58 96       	adiw	r26, 0x18	; 24
    1a2e:	8c 91       	ld	r24, X
    1a30:	81 11       	cpse	r24, r1
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    1a34:	bf ea       	ldi	r27, 0xAF	; 175
    1a36:	bd 15       	cp	r27, r13
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1147
      c++; // Handle 'classic' charset behavior
    1a3a:	d3 94       	inc	r13
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1149

    startWrite();
    1a3c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a3e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	11 97       	sbiw	r26, 0x01	; 1
    1a46:	02 84       	ldd	r0, Z+10	; 0x0a
    1a48:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1151
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    1a50:	b5 e0       	ldi	r27, 0x05	; 5
    1a52:	db 9e       	mul	r13, r27
    1a54:	c0 01       	movw	r24, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5c:	eb 83       	std	Y+3, r30	; 0x03
    1a5e:	fc 83       	std	Y+4, r31	; 0x04
    1a60:	31 2c       	mov	r3, r1
    1a62:	21 2c       	mov	r2, r1
    1a64:	9c 01       	movw	r18, r24
    1a66:	2b 57       	subi	r18, 0x7B	; 123
    1a68:	3e 4f       	sbci	r19, 0xFE	; 254
    1a6a:	2f 8b       	std	Y+23, r18	; 0x17
    1a6c:	38 8f       	std	Y+24, r19	; 0x18
    1a6e:	4a 2d       	mov	r20, r10
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	4d 8b       	std	Y+21, r20	; 0x15
    1a74:	5e 8b       	std	Y+22, r21	; 0x16
    1a76:	ef 89       	ldd	r30, Y+23	; 0x17
    1a78:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a7a:	e2 0d       	add	r30, r2
    1a7c:	f3 1d       	adc	r31, r3
    1a7e:	44 91       	lpm	r20, Z
    1a80:	8d 82       	std	Y+5, r8	; 0x05
    1a82:	9e 82       	std	Y+6, r9	; 0x06
    1a84:	d1 2c       	mov	r13, r1
    1a86:	c1 2c       	mov	r12, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1a88:	69 81       	ldd	r22, Y+1	; 0x01
    1a8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a8c:	62 0d       	add	r22, r2
    1a8e:	73 1d       	adc	r23, r3
    1a90:	69 8b       	std	Y+17, r22	; 0x11
    1a92:	7a 8b       	std	Y+18, r23	; 0x12
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1153

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
    1a94:	84 2f       	mov	r24, r20
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	9c 8b       	std	Y+20, r25	; 0x14
    1a9c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a9e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1aa0:	a0 81       	ld	r26, Z
    1aa2:	b1 81       	ldd	r27, Z+1	; 0x01
    1aa4:	40 ff       	sbrs	r20, 0
    1aa6:	7f c0       	rjmp	.+254    	; 0x1ba6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x22e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1154
          if (size_x == 1 && size_y == 1)
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	bf 12       	cpse	r11, r31
    1aac:	6c c0       	rjmp	.+216    	; 0x1b86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x20e>
    1aae:	af 12       	cpse	r10, r31
    1ab0:	6a c0       	rjmp	.+212    	; 0x1b86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x20e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1155
            writePixel(x + i, y + j, color);
    1ab2:	1c 96       	adiw	r26, 0x0c	; 12
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	2f 81       	ldd	r18, Y+7	; 0x07
    1aba:	38 85       	ldd	r19, Y+8	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1abc:	a4 01       	movw	r20, r8
    1abe:	4c 0d       	add	r20, r12
    1ac0:	5d 1d       	adc	r21, r13
    1ac2:	69 89       	ldd	r22, Y+17	; 0x11
    1ac4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ac6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ac8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aca:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1152
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    1acc:	eb 89       	ldd	r30, Y+19	; 0x13
    1ace:	fc 89       	ldd	r31, Y+20	; 0x14
    1ad0:	f5 95       	asr	r31
    1ad2:	e7 95       	ror	r30
    1ad4:	4e 2f       	mov	r20, r30
    1ad6:	5f ef       	ldi	r21, 0xFF	; 255
    1ad8:	c5 1a       	sub	r12, r21
    1ada:	d5 0a       	sbc	r13, r21
    1adc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ade:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ae2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ae4:	68 0f       	add	r22, r24
    1ae6:	79 1f       	adc	r23, r25
    1ae8:	6d 83       	std	Y+5, r22	; 0x05
    1aea:	7e 83       	std	Y+6, r23	; 0x06
    1aec:	98 e0       	ldi	r25, 0x08	; 8
    1aee:	c9 16       	cp	r12, r25
    1af0:	d1 04       	cpc	r13, r1
    1af2:	81 f6       	brne	.-96     	; 0x1a94 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x11c>
    1af4:	af ef       	ldi	r26, 0xFF	; 255
    1af6:	2a 1a       	sub	r2, r26
    1af8:	3a 0a       	sbc	r3, r26
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	e4 0d       	add	r30, r4
    1b00:	f5 1d       	adc	r31, r5
    1b02:	eb 83       	std	Y+3, r30	; 0x03
    1b04:	fc 83       	std	Y+4, r31	; 0x04
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1150

    if (!_cp437 && (c >= 176))
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    1b06:	f5 e0       	ldi	r31, 0x05	; 5
    1b08:	2f 16       	cp	r2, r31
    1b0a:	31 04       	cpc	r3, r1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x198>
    1b0e:	b3 cf       	rjmp	.-154    	; 0x1a76 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xfe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1167
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
    1b10:	2f 81       	ldd	r18, Y+7	; 0x07
    1b12:	38 85       	ldd	r19, Y+8	; 0x08
    1b14:	26 15       	cp	r18, r6
    1b16:	37 05       	cpc	r19, r7
    1b18:	b9 f0       	breq	.+46     	; 0x1b48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d0>
    1b1a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b1c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b1e:	ed 91       	ld	r30, X+
    1b20:	fc 91       	ld	r31, X
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1168
      if (size_x == 1 && size_y == 1)
    1b22:	b1 e0       	ldi	r27, 0x01	; 1
    1b24:	bb 12       	cpse	r11, r27
    1b26:	54 c0       	rjmp	.+168    	; 0x1bd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x258>
    1b28:	ab 12       	cpse	r10, r27
    1b2a:	52 c0       	rjmp	.+164    	; 0x1bd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x258>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1169
        writeFastVLine(x + 5, y, 8, bg);
    1b2c:	69 81       	ldd	r22, Y+1	; 0x01
    1b2e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b30:	6b 5f       	subi	r22, 0xFB	; 251
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	00 88       	ldd	r0, Z+16	; 0x10
    1b36:	f1 89       	ldd	r31, Z+17	; 0x11
    1b38:	e0 2d       	mov	r30, r0
    1b3a:	83 01       	movw	r16, r6
    1b3c:	28 e0       	ldi	r18, 0x08	; 8
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	a4 01       	movw	r20, r8
    1b42:	89 8d       	ldd	r24, Y+25	; 0x19
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1b48:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b4a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b4c:	ed 91       	ld	r30, X+
    1b4e:	fc 91       	ld	r31, X
    1b50:	11 97       	sbiw	r26, 0x01	; 1
    1b52:	06 88       	ldd	r0, Z+22	; 0x16
    1b54:	f7 89       	ldd	r31, Z+23	; 0x17
    1b56:	e0 2d       	mov	r30, r0
    1b58:	cd 01       	movw	r24, r26
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1235

  } // End classic vs custom font
}
    1b5a:	6a 96       	adiw	r28, 0x1a	; 26
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	9f 90       	pop	r9
    1b76:	8f 90       	pop	r8
    1b78:	7f 90       	pop	r7
    1b7a:	6f 90       	pop	r6
    1b7c:	5f 90       	pop	r5
    1b7e:	4f 90       	pop	r4
    1b80:	3f 90       	pop	r3
    1b82:	2f 90       	pop	r2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1b84:	09 94       	ijmp
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1157
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    1b86:	1e 96       	adiw	r26, 0x0e	; 14
    1b88:	ed 91       	ld	r30, X+
    1b8a:	fc 91       	ld	r31, X
    1b8c:	ef 80       	ldd	r14, Y+7	; 0x07
    1b8e:	f8 84       	ldd	r15, Y+8	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1b90:	09 85       	ldd	r16, Y+9	; 0x09
    1b92:	1a 85       	ldd	r17, Y+10	; 0x0a
    1b94:	92 01       	movw	r18, r4
    1b96:	4d 81       	ldd	r20, Y+5	; 0x05
    1b98:	5e 81       	ldd	r21, Y+6	; 0x06
    1b9a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b9c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b9e:	89 8d       	ldd	r24, Y+25	; 0x19
    1ba0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ba2:	09 95       	icall
    1ba4:	93 cf       	rjmp	.-218    	; 0x1acc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x154>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1159
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
    1ba6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba8:	38 85       	ldd	r19, Y+8	; 0x08
    1baa:	26 15       	cp	r18, r6
    1bac:	37 05       	cpc	r19, r7
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    1bb0:	8d cf       	rjmp	.-230    	; 0x1acc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x154>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1160
          if (size_x == 1 && size_y == 1)
    1bb2:	31 e0       	ldi	r19, 0x01	; 1
    1bb4:	b3 12       	cpse	r11, r19
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x24e>
    1bb8:	a3 12       	cpse	r10, r19
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x24e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
            writePixel(x + i, y + j, bg);
    1bbc:	1c 96       	adiw	r26, 0x0c	; 12
    1bbe:	ed 91       	ld	r30, X+
    1bc0:	fc 91       	ld	r31, X
    1bc2:	93 01       	movw	r18, r6
    1bc4:	7b cf       	rjmp	.-266    	; 0x1abc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x144>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1bc6:	1e 96       	adiw	r26, 0x0e	; 14
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	73 01       	movw	r14, r6
    1bce:	e0 cf       	rjmp	.-64     	; 0x1b90 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1171
    }
    if (bg != color) { // If opaque, draw vertical line for last column
      if (size_x == 1 && size_y == 1)
        writeFastVLine(x + 5, y, 8, bg);
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	64 19       	sub	r22, r4
    1bd6:	75 09       	sbc	r23, r5
    1bd8:	06 84       	ldd	r0, Z+14	; 0x0e
    1bda:	f7 85       	ldd	r31, Z+15	; 0x0f
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	73 01       	movw	r14, r6
    1be0:	0f 85       	ldd	r16, Y+15	; 0x0f
    1be2:	18 89       	ldd	r17, Y+16	; 0x10
    1be4:	92 01       	movw	r18, r4
    1be6:	a4 01       	movw	r20, r8
    1be8:	89 8d       	ldd	r24, Y+25	; 0x19
    1bea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bec:	09 95       	icall
    1bee:	ac cf       	rjmp	.-168    	; 0x1b48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d0>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	34 96       	adiw	r30, 0x04	; 4
    1bf4:	94 91       	lpm	r25, Z
pgm_read_glyph_ptr():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1bf6:	32 97       	sbiw	r30, 0x02	; 2
    1bf8:	45 91       	lpm	r20, Z+
    1bfa:	54 91       	lpm	r21, Z
drawChar():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1bfc:	d9 1a       	sub	r13, r25
pgm_read_glyph_ptr():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1bfe:	b7 e0       	ldi	r27, 0x07	; 7
    1c00:	db 9e       	mul	r13, r27
    1c02:	40 0d       	add	r20, r0
    1c04:	51 1d       	adc	r21, r1
    1c06:	11 24       	eor	r1, r1
_Z19pgm_read_bitmap_ptrPK7GFXfont():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:79
#endif //__AVR__
}

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
#ifdef __AVR__
  return (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    1c08:	f9 01       	movw	r30, r18
    1c0a:	25 91       	lpm	r18, Z+
    1c0c:	34 91       	lpm	r19, Z
    1c0e:	2b 8b       	std	Y+19, r18	; 0x13
    1c10:	3c 8b       	std	Y+20, r19	; 0x14
drawChar():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1185

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    1c12:	fa 01       	movw	r30, r20
    1c14:	25 90       	lpm	r2, Z+
    1c16:	34 90       	lpm	r3, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1186
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    1c18:	fa 01       	movw	r30, r20
    1c1a:	32 96       	adiw	r30, 0x02	; 2
    1c1c:	74 90       	lpm	r7, Z
    1c1e:	31 96       	adiw	r30, 0x01	; 1
    1c20:	34 91       	lpm	r19, Z
    1c22:	39 8b       	std	Y+17, r19	; 0x11
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1187
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    1c24:	32 96       	adiw	r30, 0x02	; 2
    1c26:	64 90       	lpm	r6, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1188
           yo = pgm_read_byte(&glyph->yOffset);
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	44 90       	lpm	r4, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1192
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;

    if (size_x > 1 || size_y > 1) {
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	4c 15       	cp	r20, r12
    1c30:	18 f0       	brcs	.+6      	; 0x1c38 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2c0>
    1c32:	4a 15       	cp	r20, r10
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2c0>
    1c36:	7f c0       	rjmp	.+254    	; 0x1d36 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3be>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1193
      xo16 = xo;
    1c38:	66 2d       	mov	r22, r6
    1c3a:	06 2c       	mov	r0, r6
    1c3c:	00 0c       	add	r0, r0
    1c3e:	77 0b       	sbc	r23, r23
    1c40:	6b 83       	std	Y+3, r22	; 0x03
    1c42:	7c 83       	std	Y+4, r23	; 0x04
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1194
      yo16 = yo;
    1c44:	84 2d       	mov	r24, r4
    1c46:	04 2c       	mov	r0, r4
    1c48:	00 0c       	add	r0, r0
    1c4a:	99 0b       	sbc	r25, r25
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1215
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    1c50:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c52:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c54:	ed 91       	ld	r30, X+
    1c56:	fc 91       	ld	r31, X
    1c58:	11 97       	sbiw	r26, 0x01	; 1
    1c5a:	02 84       	ldd	r0, Z+10	; 0x0a
    1c5c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c5e:	e0 2d       	mov	r30, r0
    1c60:	cd 01       	movw	r24, r26
    1c62:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1189

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    1c64:	51 2c       	mov	r5, r1
    1c66:	d1 2c       	mov	r13, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1c68:	c1 2c       	mov	r12, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1c6a:	ea 2d       	mov	r30, r10
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	e9 87       	std	Y+9, r30	; 0x09
    1c70:	fa 87       	std	Y+10, r31	; 0x0a
    1c72:	2b 2d       	mov	r18, r11
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	2b 87       	std	Y+11, r18	; 0x0b
    1c78:	3c 87       	std	Y+12, r19	; 0x0c
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    1c7a:	a4 01       	movw	r20, r8
    1c7c:	44 0d       	add	r20, r4
    1c7e:	51 1d       	adc	r21, r1
    1c80:	47 fc       	sbrc	r4, 7
    1c82:	5a 95       	dec	r21
    1c84:	4f 8b       	std	Y+23, r20	; 0x17
    1c86:	58 8f       	std	Y+24, r21	; 0x18
    1c88:	69 81       	ldd	r22, Y+1	; 0x01
    1c8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c8c:	66 0d       	add	r22, r6
    1c8e:	71 1d       	adc	r23, r1
    1c90:	67 fc       	sbrc	r6, 7
    1c92:	7a 95       	dec	r23
    1c94:	6d 87       	std	Y+13, r22	; 0x0d
    1c96:	7e 87       	std	Y+14, r23	; 0x0e
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1c98:	79 89       	ldd	r23, Y+17	; 0x11
    1c9a:	c7 16       	cp	r12, r23
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x328>
    1c9e:	54 cf       	rjmp	.-344    	; 0x1b48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d0>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1ca0:	2c 2d       	mov	r18, r12
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ca6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ca8:	42 0f       	add	r20, r18
    1caa:	53 1f       	adc	r21, r19
    1cac:	a9 85       	ldd	r26, Y+9	; 0x09
    1cae:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb0:	4a 9f       	mul	r20, r26
    1cb2:	c0 01       	movw	r24, r0
    1cb4:	4b 9f       	mul	r20, r27
    1cb6:	90 0d       	add	r25, r0
    1cb8:	5a 9f       	mul	r21, r26
    1cba:	90 0d       	add	r25, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e8 0d       	add	r30, r8
    1cc2:	f9 1d       	adc	r31, r9
    1cc4:	ef 87       	std	Y+15, r30	; 0x0f
    1cc6:	f8 8b       	std	Y+16, r31	; 0x10
    1cc8:	85 2d       	mov	r24, r5
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1cca:	61 2c       	mov	r6, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    1ccc:	4f 89       	ldd	r20, Y+23	; 0x17
    1cce:	58 8d       	ldd	r21, Y+24	; 0x18
    1cd0:	42 0f       	add	r20, r18
    1cd2:	53 1f       	adc	r21, r19
    1cd4:	4d 8b       	std	Y+21, r20	; 0x15
    1cd6:	5e 8b       	std	Y+22, r21	; 0x16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1cd8:	67 14       	cp	r6, r7
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x366>
    1cdc:	50 c0       	rjmp	.+160    	; 0x1d7e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x406>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    1cde:	44 24       	eor	r4, r4
    1ce0:	43 94       	inc	r4
    1ce2:	48 0e       	add	r4, r24
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	41 f4       	brne	.+16     	; 0x1cf8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x380>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1219
          bits = pgm_read_byte(&bitmap[bo++]);
    1ce8:	c1 01       	movw	r24, r2
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	eb 89       	ldd	r30, Y+19	; 0x13
    1cee:	fc 89       	ldd	r31, Y+20	; 0x14
    1cf0:	e2 0d       	add	r30, r2
    1cf2:	f3 1d       	adc	r31, r3
    1cf4:	d4 90       	lpm	r13, Z
    1cf6:	1c 01       	movw	r2, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1221
        }
        if (bits & 0x80) {
    1cf8:	d7 fe       	sbrs	r13, 7
    1cfa:	19 c0       	rjmp	.+50     	; 0x1d2e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3b6>
    1cfc:	a9 8d       	ldd	r26, Y+25	; 0x19
    1cfe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d00:	ed 91       	ld	r30, X+
    1d02:	fc 91       	ld	r31, X
    1d04:	66 2d       	mov	r22, r6
    1d06:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1222
          if (size_x == 1 && size_y == 1) {
    1d08:	b1 e0       	ldi	r27, 0x01	; 1
    1d0a:	bb 12       	cpse	r11, r27
    1d0c:	19 c0       	rjmp	.+50     	; 0x1d40 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c8>
    1d0e:	ab 12       	cpse	r10, r27
    1d10:	17 c0       	rjmp	.+46     	; 0x1d40 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c8>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
            writePixel(x + xo + xx, y + yo + yy, color);
    1d12:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d14:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d16:	62 0f       	add	r22, r18
    1d18:	73 1f       	adc	r23, r19
    1d1a:	04 84       	ldd	r0, Z+12	; 0x0c
    1d1c:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d1e:	e0 2d       	mov	r30, r0
    1d20:	2f 81       	ldd	r18, Y+7	; 0x07
    1d22:	38 85       	ldd	r19, Y+8	; 0x08
    1d24:	4d 89       	ldd	r20, Y+21	; 0x15
    1d26:	5e 89       	ldd	r21, Y+22	; 0x16
    1d28:	89 8d       	ldd	r24, Y+25	; 0x19
    1d2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d2c:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1229
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
    1d2e:	dd 0c       	add	r13, r13
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1d30:	63 94       	inc	r6
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    1d32:	84 2d       	mov	r24, r4
    1d34:	d1 cf       	rjmp	.-94     	; 0x1cd8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x360>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1190
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;
    1d36:	1d 82       	std	Y+5, r1	; 0x05
    1d38:	1e 82       	std	Y+6, r1	; 0x06
    1d3a:	1b 82       	std	Y+3, r1	; 0x03
    1d3c:	1c 82       	std	Y+4, r1	; 0x04
    1d3e:	88 cf       	rjmp	.-240    	; 0x1c50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2d8>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1d40:	4b 81       	ldd	r20, Y+3	; 0x03
    1d42:	5c 81       	ldd	r21, Y+4	; 0x04
    1d44:	64 0f       	add	r22, r20
    1d46:	75 1f       	adc	r23, r21
    1d48:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d4a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d4c:	6a 9f       	mul	r22, r26
    1d4e:	c0 01       	movw	r24, r0
    1d50:	6b 9f       	mul	r22, r27
    1d52:	90 0d       	add	r25, r0
    1d54:	7a 9f       	mul	r23, r26
    1d56:	90 0d       	add	r25, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	69 81       	ldd	r22, Y+1	; 0x01
    1d5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d5e:	68 0f       	add	r22, r24
    1d60:	79 1f       	adc	r23, r25
    1d62:	06 84       	ldd	r0, Z+14	; 0x0e
    1d64:	f7 85       	ldd	r31, Z+15	; 0x0f
    1d66:	e0 2d       	mov	r30, r0
    1d68:	ef 80       	ldd	r14, Y+7	; 0x07
    1d6a:	f8 84       	ldd	r15, Y+8	; 0x08
    1d6c:	09 85       	ldd	r16, Y+9	; 0x09
    1d6e:	1a 85       	ldd	r17, Y+10	; 0x0a
    1d70:	9d 01       	movw	r18, r26
    1d72:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d74:	58 89       	ldd	r21, Y+16	; 0x10
    1d76:	89 8d       	ldd	r24, Y+25	; 0x19
    1d78:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d7a:	09 95       	icall
    1d7c:	d8 cf       	rjmp	.-80     	; 0x1d2e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3b6>
    1d7e:	57 0c       	add	r5, r7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1d80:	c3 94       	inc	r12
    1d82:	8a cf       	rjmp	.-236    	; 0x1c98 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x320>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1235
      }
    }
    endWrite();

  } // End classic vs custom font
}
    1d84:	6a 96       	adiw	r28, 0x1a	; 26
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	9f 90       	pop	r9
    1da0:	8f 90       	pop	r8
    1da2:	7f 90       	pop	r7
    1da4:	6f 90       	pop	r6
    1da6:	5f 90       	pop	r5
    1da8:	4f 90       	pop	r4
    1daa:	3f 90       	pop	r3
    1dac:	2f 90       	pop	r2
    1dae:	08 95       	ret

00001db0 <Adafruit_GFX::write(unsigned char)>:
write():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1242
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1db0:	8f 92       	push	r8
    1db2:	9f 92       	push	r9
    1db4:	af 92       	push	r10
    1db6:	cf 92       	push	r12
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	ec 01       	movw	r28, r24
    1dc6:	26 2f       	mov	r18, r22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1243
  if (!gfxFont) { // 'Classic' built-in font
    1dc8:	89 8d       	ldd	r24, Y+25	; 0x19
    1dca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <Adafruit_GFX::write(unsigned char)+0x22>
    1dd0:	50 c0       	rjmp	.+160    	; 0x1e72 <Adafruit_GFX::write(unsigned char)+0xc2>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1245

    if (c == '\n') {              // Newline?
    1dd2:	6a 30       	cpi	r22, 0x0A	; 10
    1dd4:	d1 f4       	brne	.+52     	; 0x1e0a <Adafruit_GFX::write(unsigned char)+0x5a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1246
      cursor_x = 0;               // Reset x to zero,
    1dd6:	1c 86       	std	Y+12, r1	; 0x0c
    1dd8:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1247
      cursor_y += textsize_y * 8; // advance y one line
    1dda:	8d 89       	ldd	r24, Y+21	; 0x15
    1ddc:	48 e0       	ldi	r20, 0x08	; 8
    1dde:	84 9f       	mul	r24, r20
    1de0:	90 01       	movw	r18, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de8:	82 0f       	add	r24, r18
    1dea:	93 1f       	adc	r25, r19
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    1dec:	8e 87       	std	Y+14, r24	; 0x0e
    1dee:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1286
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	cf 90       	pop	r12
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1248
  if (!gfxFont) { // 'Classic' built-in font

    if (c == '\n') {              // Newline?
      cursor_x = 0;               // Reset x to zero,
      cursor_y += textsize_y * 8; // advance y one line
    } else if (c != '\r') {       // Ignore carriage returns
    1e0a:	6d 30       	cpi	r22, 0x0D	; 13
    1e0c:	89 f3       	breq	.-30     	; 0x1df0 <Adafruit_GFX::write(unsigned char)+0x40>
    1e0e:	cc 88       	ldd	r12, Y+20	; 0x14
    1e10:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1249
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	88 23       	and	r24, r24
    1e16:	c1 f0       	breq	.+48     	; 0x1e48 <Adafruit_GFX::write(unsigned char)+0x98>
    1e18:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e1c:	36 e0       	ldi	r19, 0x06	; 6
    1e1e:	c3 9e       	mul	r12, r19
    1e20:	80 0d       	add	r24, r0
    1e22:	91 1d       	adc	r25, r1
    1e24:	11 24       	eor	r1, r1
    1e26:	48 85       	ldd	r20, Y+8	; 0x08
    1e28:	59 85       	ldd	r21, Y+9	; 0x09
    1e2a:	48 17       	cp	r20, r24
    1e2c:	59 07       	cpc	r21, r25
    1e2e:	64 f4       	brge	.+24     	; 0x1e48 <Adafruit_GFX::write(unsigned char)+0x98>
    1e30:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e32:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1250
        cursor_x = 0;                                       // Reset x to zero,
    1e34:	1c 86       	std	Y+12, r1	; 0x0c
    1e36:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1251
        cursor_y += textsize_y * 8; // advance y one line
    1e38:	38 e0       	ldi	r19, 0x08	; 8
    1e3a:	a3 9e       	mul	r10, r19
    1e3c:	c0 01       	movw	r24, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	84 0f       	add	r24, r20
    1e42:	95 1f       	adc	r25, r21
    1e44:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1253
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    1e46:	9f 87       	std	Y+15, r25	; 0x0f
    1e48:	ea 88       	ldd	r14, Y+18	; 0x12
    1e4a:	fb 88       	ldd	r15, Y+19	; 0x13
    1e4c:	08 89       	ldd	r16, Y+16	; 0x10
    1e4e:	19 89       	ldd	r17, Y+17	; 0x11
    1e50:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e52:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e54:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e56:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e58:	ce 01       	movw	r24, r28
    1e5a:	8e dd       	rcall	.-1252   	; 0x1978 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1255
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
    1e5c:	2c 89       	ldd	r18, Y+20	; 0x14
    1e5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e60:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e62:	46 e0       	ldi	r20, 0x06	; 6
    1e64:	24 9f       	mul	r18, r20
    1e66:	80 0d       	add	r24, r0
    1e68:	91 1d       	adc	r25, r1
    1e6a:	11 24       	eor	r1, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    1e6c:	8c 87       	std	Y+12, r24	; 0x0c
    1e6e:	9d 87       	std	Y+13, r25	; 0x0d
    1e70:	bf cf       	rjmp	.-130    	; 0x1df0 <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1260
      cursor_x += textsize_x * 6; // Advance x one char
    }

  } else { // Custom font

    if (c == '\n') {
    1e72:	6a 30       	cpi	r22, 0x0A	; 10
    1e74:	69 f4       	brne	.+26     	; 0x1e90 <Adafruit_GFX::write(unsigned char)+0xe0>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1261
      cursor_x = 0;
    1e76:	1c 86       	std	Y+12, r1	; 0x0c
    1e78:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1263
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	38 96       	adiw	r30, 0x08	; 8
    1e7e:	e4 91       	lpm	r30, Z
    1e80:	2d 89       	ldd	r18, Y+21	; 0x15
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    1e82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e86:	e2 9f       	mul	r30, r18
    1e88:	80 0d       	add	r24, r0
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	11 24       	eor	r1, r1
    1e8e:	ae cf       	rjmp	.-164    	; 0x1dec <Adafruit_GFX::write(unsigned char)+0x3c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1264
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
    1e90:	6d 30       	cpi	r22, 0x0D	; 13
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <Adafruit_GFX::write(unsigned char)+0xe6>
    1e94:	ad cf       	rjmp	.-166    	; 0x1df0 <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1265
      uint8_t first = pgm_read_byte(&gfxFont->first);
    1e96:	fc 01       	movw	r30, r24
    1e98:	34 96       	adiw	r30, 0x04	; 4
    1e9a:	34 91       	lpm	r19, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1266
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1e9c:	63 17       	cp	r22, r19
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <Adafruit_GFX::write(unsigned char)+0xf2>
    1ea0:	a7 cf       	rjmp	.-178    	; 0x1df0 <Adafruit_GFX::write(unsigned char)+0x40>
    1ea2:	32 96       	adiw	r30, 0x02	; 2
    1ea4:	e4 91       	lpm	r30, Z
    1ea6:	e6 17       	cp	r30, r22
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <Adafruit_GFX::write(unsigned char)+0xfc>
    1eaa:	a2 cf       	rjmp	.-188    	; 0x1df0 <Adafruit_GFX::write(unsigned char)+0x40>
pgm_read_glyph_ptr():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1eac:	fc 01       	movw	r30, r24
    1eae:	32 96       	adiw	r30, 0x02	; 2
    1eb0:	85 90       	lpm	r8, Z+
    1eb2:	94 90       	lpm	r9, Z
write():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1267
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    1eb4:	46 2f       	mov	r20, r22
    1eb6:	43 1b       	sub	r20, r19
    1eb8:	34 2f       	mov	r19, r20
pgm_read_glyph_ptr():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1eba:	47 e0       	ldi	r20, 0x07	; 7
    1ebc:	34 9f       	mul	r19, r20
    1ebe:	80 0c       	add	r8, r0
    1ec0:	91 1c       	adc	r9, r1
    1ec2:	11 24       	eor	r1, r1
write():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1268
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    1ec4:	f4 01       	movw	r30, r8
    1ec6:	32 96       	adiw	r30, 0x02	; 2
    1ec8:	34 91       	lpm	r19, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1269
                h = pgm_read_byte(&glyph->height);
    1eca:	31 96       	adiw	r30, 0x01	; 1
    1ecc:	e4 91       	lpm	r30, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1270
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    1ece:	33 23       	and	r19, r19
    1ed0:	a1 f1       	breq	.+104    	; 0x1f3a <Adafruit_GFX::write(unsigned char)+0x18a>
    1ed2:	ee 23       	and	r30, r30
    1ed4:	91 f1       	breq	.+100    	; 0x1f3a <Adafruit_GFX::write(unsigned char)+0x18a>
    1ed6:	cc 88       	ldd	r12, Y+20	; 0x14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    1ed8:	f4 01       	movw	r30, r8
    1eda:	35 96       	adiw	r30, 0x05	; 5
    1edc:	e4 91       	lpm	r30, Z
    1ede:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1ee0:	4f 89       	ldd	r20, Y+23	; 0x17
    1ee2:	44 23       	and	r20, r20
    1ee4:	01 f1       	breq	.+64     	; 0x1f26 <Adafruit_GFX::write(unsigned char)+0x176>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    1ee6:	0e 2e       	mov	r0, r30
    1ee8:	00 0c       	add	r0, r0
    1eea:	ff 0b       	sbc	r31, r31
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1eec:	e3 0f       	add	r30, r19
    1eee:	f1 1d       	adc	r31, r1
    1ef0:	ce 9e       	mul	r12, r30
    1ef2:	a0 01       	movw	r20, r0
    1ef4:	cf 9e       	mul	r12, r31
    1ef6:	50 0d       	add	r21, r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	6c 85       	ldd	r22, Y+12	; 0x0c
    1efc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1efe:	46 0f       	add	r20, r22
    1f00:	57 1f       	adc	r21, r23
    1f02:	68 85       	ldd	r22, Y+8	; 0x08
    1f04:	79 85       	ldd	r23, Y+9	; 0x09
    1f06:	64 17       	cp	r22, r20
    1f08:	75 07       	cpc	r23, r21
    1f0a:	6c f4       	brge	.+26     	; 0x1f26 <Adafruit_GFX::write(unsigned char)+0x176>
    1f0c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f0e:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1273
            cursor_x = 0;
    1f10:	1c 86       	std	Y+12, r1	; 0x0c
    1f12:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1275
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1f14:	fc 01       	movw	r30, r24
    1f16:	38 96       	adiw	r30, 0x08	; 8
    1f18:	e4 91       	lpm	r30, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1274
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
            cursor_x = 0;
            cursor_y += (int16_t)textsize_y *
    1f1a:	ae 9e       	mul	r10, r30
    1f1c:	40 0d       	add	r20, r0
    1f1e:	51 1d       	adc	r21, r1
    1f20:	11 24       	eor	r1, r1
    1f22:	4e 87       	std	Y+14, r20	; 0x0e
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1277
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    1f24:	5f 87       	std	Y+15, r21	; 0x0f
    1f26:	ea 88       	ldd	r14, Y+18	; 0x12
    1f28:	fb 88       	ldd	r15, Y+19	; 0x13
    1f2a:	08 89       	ldd	r16, Y+16	; 0x10
    1f2c:	19 89       	ldd	r17, Y+17	; 0x11
    1f2e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f30:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f36:	ce 01       	movw	r24, r28
    1f38:	1f dd       	rcall	.-1474   	; 0x1978 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1281
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    1f3a:	f4 01       	movw	r30, r8
    1f3c:	34 96       	adiw	r30, 0x04	; 4
    1f3e:	e4 91       	lpm	r30, Z
    1f40:	2c 89       	ldd	r18, Y+20	; 0x14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    1f42:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f44:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f46:	e2 9f       	mul	r30, r18
    1f48:	80 0d       	add	r24, r0
    1f4a:	91 1d       	adc	r25, r1
    1f4c:	11 24       	eor	r1, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:42

size_t Print::print(const __FlashStringHelper *ifsh)
    1f4e:	8e cf       	rjmp	.-228    	; 0x1e6c <Adafruit_GFX::write(unsigned char)+0xbc>

00001f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>:
print():
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:46
{
#if defined(__AVR__)
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1f58:	8c 01       	movw	r16, r24
    1f5a:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:49
  while (1)
  {
    unsigned char c = pgm_read_byte(p++);
    1f5c:	c0 e0       	ldi	r28, 0x00	; 0
    1f5e:	f8 01       	movw	r30, r16
    1f60:	ec 0f       	add	r30, r28
    1f62:	fd 1f       	adc	r31, r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:50
    if (c == 0) break;
    1f64:	64 91       	lpm	r22, Z
    1f66:	66 23       	and	r22, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:51
    if (write(c))
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <Print::print(__FlashStringHelper const*) [clone .constprop.28]+0x28>
    1f6a:	87 e9       	ldi	r24, 0x97	; 151
    1f6c:	98 e2       	ldi	r25, 0x28	; 40
    1f6e:	20 df       	rcall	.-448    	; 0x1db0 <Adafruit_GFX::write(unsigned char)>
    1f70:	89 2b       	or	r24, r25
    1f72:	11 f0       	breq	.+4      	; 0x1f78 <Print::print(__FlashStringHelper const*) [clone .constprop.28]+0x28>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:52
      n++;
    1f74:	21 96       	adiw	r28, 0x01	; 1
    1f76:	f3 cf       	rjmp	.-26     	; 0x1f5e <Print::print(__FlashStringHelper const*) [clone .constprop.28]+0xe>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:60
  }
  return n;
#else
  return print(reinterpret_cast<const char *>(ifsh));
#endif
}
    1f78:	ce 01       	movw	r24, r28
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	08 95       	ret

00001f84 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
drawRect():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:524
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    1f84:	6f 92       	push	r6
    1f86:	7f 92       	push	r7
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	6b 01       	movw	r12, r22
    1fa4:	5a 01       	movw	r10, r20
    1fa6:	39 01       	movw	r6, r18
    1fa8:	48 01       	movw	r8, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:525
  startWrite();
    1faa:	e8 81       	ld	r30, Y
    1fac:	f9 81       	ldd	r31, Y+1	; 0x01
    1fae:	02 84       	ldd	r0, Z+10	; 0x0a
    1fb0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fb2:	e0 2d       	mov	r30, r0
    1fb4:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:526
  writeFastHLine(x, y, w, color);
    1fb6:	e8 81       	ld	r30, Y
    1fb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fba:	02 88       	ldd	r0, Z+18	; 0x12
    1fbc:	f3 89       	ldd	r31, Z+19	; 0x13
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	87 01       	movw	r16, r14
    1fc2:	93 01       	movw	r18, r6
    1fc4:	a5 01       	movw	r20, r10
    1fc6:	b6 01       	movw	r22, r12
    1fc8:	ce 01       	movw	r24, r28
    1fca:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:527
  writeFastHLine(x, y + h - 1, w, color);
    1fcc:	a5 01       	movw	r20, r10
    1fce:	48 0d       	add	r20, r8
    1fd0:	59 1d       	adc	r21, r9
    1fd2:	41 50       	subi	r20, 0x01	; 1
    1fd4:	51 09       	sbc	r21, r1
    1fd6:	e8 81       	ld	r30, Y
    1fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fda:	02 88       	ldd	r0, Z+18	; 0x12
    1fdc:	f3 89       	ldd	r31, Z+19	; 0x13
    1fde:	e0 2d       	mov	r30, r0
    1fe0:	93 01       	movw	r18, r6
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:528
  writeFastVLine(x, y, h, color);
    1fe8:	e8 81       	ld	r30, Y
    1fea:	f9 81       	ldd	r31, Y+1	; 0x01
    1fec:	00 88       	ldd	r0, Z+16	; 0x10
    1fee:	f1 89       	ldd	r31, Z+17	; 0x11
    1ff0:	e0 2d       	mov	r30, r0
    1ff2:	94 01       	movw	r18, r8
    1ff4:	a5 01       	movw	r20, r10
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:529
  writeFastVLine(x + w - 1, y, h, color);
    1ffc:	c6 0c       	add	r12, r6
    1ffe:	d7 1c       	adc	r13, r7
    2000:	b6 01       	movw	r22, r12
    2002:	61 50       	subi	r22, 0x01	; 1
    2004:	71 09       	sbc	r23, r1
    2006:	e8 81       	ld	r30, Y
    2008:	f9 81       	ldd	r31, Y+1	; 0x01
    200a:	00 88       	ldd	r0, Z+16	; 0x10
    200c:	f1 89       	ldd	r31, Z+17	; 0x11
    200e:	e0 2d       	mov	r30, r0
    2010:	94 01       	movw	r18, r8
    2012:	a5 01       	movw	r20, r10
    2014:	ce 01       	movw	r24, r28
    2016:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  endWrite();
    2018:	e8 81       	ld	r30, Y
    201a:	f9 81       	ldd	r31, Y+1	; 0x01
    201c:	06 88       	ldd	r0, Z+22	; 0x16
    201e:	f7 89       	ldd	r31, Z+23	; 0x17
    2020:	e0 2d       	mov	r30, r0
    2022:	ce 01       	movw	r24, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:531
}
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	bf 90       	pop	r11
    2036:	af 90       	pop	r10
    2038:	9f 90       	pop	r9
    203a:	8f 90       	pop	r8
    203c:	7f 90       	pop	r7
    203e:	6f 90       	pop	r6
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  startWrite();
  writeFastHLine(x, y, w, color);
  writeFastHLine(x, y + h - 1, w, color);
  writeFastVLine(x, y, h, color);
  writeFastVLine(x + w - 1, y, h, color);
  endWrite();
    2040:	09 94       	ijmp

00002042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
drawLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:331
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
    2042:	6f 92       	push	r6
    2044:	7f 92       	push	r7
    2046:	8f 92       	push	r8
    2048:	9f 92       	push	r9
    204a:	af 92       	push	r10
    204c:	bf 92       	push	r11
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	5c 01       	movw	r10, r24
    2060:	eb 01       	movw	r28, r22
    2062:	6a 01       	movw	r12, r20
    2064:	49 01       	movw	r8, r18
    2066:	38 01       	movw	r6, r16
    2068:	87 01       	movw	r16, r14
    206a:	dc 01       	movw	r26, r24
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:333
  // Update in subclasses if desired!
  if (x0 == x1) {
    2070:	62 17       	cp	r22, r18
    2072:	73 07       	cpc	r23, r19
    2074:	19 f5       	brne	.+70     	; 0x20bc <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:334
    if (y0 > y1)
    2076:	64 16       	cp	r6, r20
    2078:	75 06       	cpc	r7, r21
    207a:	2c f0       	brlt	.+10     	; 0x2086 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    207c:	96 2d       	mov	r25, r6
    207e:	87 2d       	mov	r24, r7
    2080:	3a 01       	movw	r6, r20
    2082:	c9 2e       	mov	r12, r25
    2084:	d8 2e       	mov	r13, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:336
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    2086:	96 01       	movw	r18, r12
    2088:	26 19       	sub	r18, r6
    208a:	37 09       	sbc	r19, r7
    208c:	2f 5f       	subi	r18, 0xFF	; 255
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	04 8c       	ldd	r0, Z+28	; 0x1c
    2092:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2094:	e0 2d       	mov	r30, r0
    2096:	a3 01       	movw	r20, r6
    2098:	be 01       	movw	r22, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:340
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    209a:	c5 01       	movw	r24, r10
    209c:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	bf 90       	pop	r11
    20b0:	af 90       	pop	r10
    20b2:	9f 90       	pop	r9
    20b4:	8f 90       	pop	r8
    20b6:	7f 90       	pop	r7
    20b8:	6f 90       	pop	r6
    20ba:	08 95       	ret
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:337
  // Update in subclasses if desired!
  if (x0 == x1) {
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
  } else if (y0 == y1) {
    20bc:	46 15       	cp	r20, r6
    20be:	57 05       	cpc	r21, r7
    20c0:	91 f4       	brne	.+36     	; 0x20e6 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:338
    if (x0 > x1)
    20c2:	26 17       	cp	r18, r22
    20c4:	37 07       	cpc	r19, r23
    20c6:	24 f0       	brlt	.+8      	; 0x20d0 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    20c8:	89 2d       	mov	r24, r9
    20ca:	4b 01       	movw	r8, r22
    20cc:	c2 2f       	mov	r28, r18
    20ce:	d8 2f       	mov	r29, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:340
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    20d0:	9e 01       	movw	r18, r28
    20d2:	28 19       	sub	r18, r8
    20d4:	39 09       	sbc	r19, r9
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	06 8c       	ldd	r0, Z+30	; 0x1e
    20dc:	f7 8d       	ldd	r31, Z+31	; 0x1f
    20de:	e0 2d       	mov	r30, r0
    20e0:	a6 01       	movw	r20, r12
    20e2:	b4 01       	movw	r22, r8
    20e4:	da cf       	rjmp	.-76     	; 0x209a <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:342
  } else {
    startWrite();
    20e6:	02 84       	ldd	r0, Z+10	; 0x0a
    20e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    20ea:	e0 2d       	mov	r30, r0
    20ec:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:343
    writeLine(x0, y0, x1, y1, color);
    20ee:	d5 01       	movw	r26, r10
    20f0:	ed 91       	ld	r30, X+
    20f2:	fc 91       	ld	r31, X
    20f4:	04 88       	ldd	r0, Z+20	; 0x14
    20f6:	f5 89       	ldd	r31, Z+21	; 0x15
    20f8:	e0 2d       	mov	r30, r0
    20fa:	83 01       	movw	r16, r6
    20fc:	94 01       	movw	r18, r8
    20fe:	a6 01       	movw	r20, r12
    2100:	be 01       	movw	r22, r28
    2102:	c5 01       	movw	r24, r10
    2104:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:344
    endWrite();
    2106:	d5 01       	movw	r26, r10
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	06 88       	ldd	r0, Z+22	; 0x16
    210e:	f7 89       	ldd	r31, Z+23	; 0x17
    2110:	e0 2d       	mov	r30, r0
    2112:	c5 01       	movw	r24, r10
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  }
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:344
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
    2130:	09 94       	ijmp

00002132 <Adafruit_GFX::fillScreen(unsigned int)>:
fillScreen():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:316
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:317
  fillRect(0, 0, _width, _height, color);
    213a:	dc 01       	movw	r26, r24
    213c:	1a 96       	adiw	r26, 0x0a	; 10
    213e:	0d 91       	ld	r16, X+
    2140:	1c 91       	ld	r17, X
    2142:	1b 97       	sbiw	r26, 0x0b	; 11
    2144:	18 96       	adiw	r26, 0x08	; 8
    2146:	2d 91       	ld	r18, X+
    2148:	3c 91       	ld	r19, X
    214a:	19 97       	sbiw	r26, 0x09	; 9
    214c:	ed 91       	ld	r30, X+
    214e:	fc 91       	ld	r31, X
    2150:	00 a0       	ldd	r0, Z+32	; 0x20
    2152:	f1 a1       	ldd	r31, Z+33	; 0x21
    2154:	e0 2d       	mov	r30, r0
    2156:	7b 01       	movw	r14, r22
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:318
}
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	08 95       	ret

0000216c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
fillRect():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:301
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    216c:	4f 92       	push	r4
    216e:	5f 92       	push	r5
    2170:	6f 92       	push	r6
    2172:	7f 92       	push	r7
    2174:	8f 92       	push	r8
    2176:	9f 92       	push	r9
    2178:	af 92       	push	r10
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	6c 01       	movw	r12, r24
    218e:	2b 01       	movw	r4, r22
    2190:	5a 01       	movw	r10, r20
    2192:	39 01       	movw	r6, r18
    2194:	48 01       	movw	r8, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:302
  startWrite();
    2196:	dc 01       	movw	r26, r24
    2198:	ed 91       	ld	r30, X+
    219a:	fc 91       	ld	r31, X
    219c:	02 84       	ldd	r0, Z+10	; 0x0a
    219e:	f3 85       	ldd	r31, Z+11	; 0x0b
    21a0:	e0 2d       	mov	r30, r0
    21a2:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:303
  for (int16_t i = x; i < x + w; i++) {
    21a4:	e2 01       	movw	r28, r4
    21a6:	64 0c       	add	r6, r4
    21a8:	75 1c       	adc	r7, r5
    21aa:	d6 01       	movw	r26, r12
    21ac:	ed 91       	ld	r30, X+
    21ae:	fc 91       	ld	r31, X
    21b0:	c6 15       	cp	r28, r6
    21b2:	d7 05       	cpc	r29, r7
    21b4:	5c f4       	brge	.+22     	; 0x21cc <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:304
    writeFastVLine(i, y, h, color);
    21b6:	00 88       	ldd	r0, Z+16	; 0x10
    21b8:	f1 89       	ldd	r31, Z+17	; 0x11
    21ba:	e0 2d       	mov	r30, r0
    21bc:	87 01       	movw	r16, r14
    21be:	94 01       	movw	r18, r8
    21c0:	a5 01       	movw	r20, r10
    21c2:	be 01       	movw	r22, r28
    21c4:	c6 01       	movw	r24, r12
    21c6:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:303
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    21c8:	21 96       	adiw	r28, 0x01	; 1
    21ca:	ef cf       	rjmp	.-34     	; 0x21aa <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:306
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    21cc:	06 88       	ldd	r0, Z+22	; 0x16
    21ce:	f7 89       	ldd	r31, Z+23	; 0x17
    21d0:	e0 2d       	mov	r30, r0
    21d2:	c6 01       	movw	r24, r12
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:307
}
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	df 90       	pop	r13
    21e2:	cf 90       	pop	r12
    21e4:	bf 90       	pop	r11
    21e6:	af 90       	pop	r10
    21e8:	9f 90       	pop	r9
    21ea:	8f 90       	pop	r8
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	5f 90       	pop	r5
    21f2:	4f 90       	pop	r4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:306
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    21f4:	09 94       	ijmp

000021f6 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:283
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	ec 01       	movw	r28, r24
    2210:	5b 01       	movw	r10, r22
    2212:	4a 01       	movw	r8, r20
    2214:	69 01       	movw	r12, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:284
  startWrite();
    2216:	e8 81       	ld	r30, Y
    2218:	f9 81       	ldd	r31, Y+1	; 0x01
    221a:	02 84       	ldd	r0, Z+10	; 0x0a
    221c:	f3 85       	ldd	r31, Z+11	; 0x0b
    221e:	e0 2d       	mov	r30, r0
    2220:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:285
  writeLine(x, y, x + w - 1, y, color);
    2222:	95 01       	movw	r18, r10
    2224:	2c 0d       	add	r18, r12
    2226:	3d 1d       	adc	r19, r13
    2228:	21 50       	subi	r18, 0x01	; 1
    222a:	31 09       	sbc	r19, r1
    222c:	e8 81       	ld	r30, Y
    222e:	f9 81       	ldd	r31, Y+1	; 0x01
    2230:	04 88       	ldd	r0, Z+20	; 0x14
    2232:	f5 89       	ldd	r31, Z+21	; 0x15
    2234:	e0 2d       	mov	r30, r0
    2236:	78 01       	movw	r14, r16
    2238:	84 01       	movw	r16, r8
    223a:	a4 01       	movw	r20, r8
    223c:	b5 01       	movw	r22, r10
    223e:	ce 01       	movw	r24, r28
    2240:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:286
  endWrite();
    2242:	e8 81       	ld	r30, Y
    2244:	f9 81       	ldd	r31, Y+1	; 0x01
    2246:	06 88       	ldd	r0, Z+22	; 0x16
    2248:	f7 89       	ldd	r31, Z+23	; 0x17
    224a:	e0 2d       	mov	r30, r0
    224c:	ce 01       	movw	r24, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:287
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	bf 90       	pop	r11
    2260:	af 90       	pop	r10
    2262:	9f 90       	pop	r9
    2264:	8f 90       	pop	r8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:286
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x + w - 1, y, color);
  endWrite();
    2266:	09 94       	ijmp

00002268 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:266
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
    2268:	8f 92       	push	r8
    226a:	9f 92       	push	r9
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	ec 01       	movw	r28, r24
    2282:	5b 01       	movw	r10, r22
    2284:	4a 01       	movw	r8, r20
    2286:	69 01       	movw	r12, r18
    2288:	78 01       	movw	r14, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:267
  startWrite();
    228a:	e8 81       	ld	r30, Y
    228c:	f9 81       	ldd	r31, Y+1	; 0x01
    228e:	02 84       	ldd	r0, Z+10	; 0x0a
    2290:	f3 85       	ldd	r31, Z+11	; 0x0b
    2292:	e0 2d       	mov	r30, r0
    2294:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:268
  writeLine(x, y, x, y + h - 1, color);
    2296:	c8 0c       	add	r12, r8
    2298:	d9 1c       	adc	r13, r9
    229a:	86 01       	movw	r16, r12
    229c:	01 50       	subi	r16, 0x01	; 1
    229e:	11 09       	sbc	r17, r1
    22a0:	e8 81       	ld	r30, Y
    22a2:	f9 81       	ldd	r31, Y+1	; 0x01
    22a4:	04 88       	ldd	r0, Z+20	; 0x14
    22a6:	f5 89       	ldd	r31, Z+21	; 0x15
    22a8:	e0 2d       	mov	r30, r0
    22aa:	95 01       	movw	r18, r10
    22ac:	a4 01       	movw	r20, r8
    22ae:	b5 01       	movw	r22, r10
    22b0:	ce 01       	movw	r24, r28
    22b2:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:269
  endWrite();
    22b4:	e8 81       	ld	r30, Y
    22b6:	f9 81       	ldd	r31, Y+1	; 0x01
    22b8:	06 88       	ldd	r0, Z+22	; 0x16
    22ba:	f7 89       	ldd	r31, Z+23	; 0x17
    22bc:	e0 2d       	mov	r30, r0
    22be:	ce 01       	movw	r24, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:270
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	df 90       	pop	r13
    22ce:	cf 90       	pop	r12
    22d0:	bf 90       	pop	r11
    22d2:	af 90       	pop	r10
    22d4:	9f 90       	pop	r9
    22d6:	8f 90       	pop	r8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:269
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x, y + h - 1, color);
  endWrite();
    22d8:	09 94       	ijmp

000022da <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
writeFillRect():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:242
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:244
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    22e2:	dc 01       	movw	r26, r24
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	00 a0       	ldd	r0, Z+32	; 0x20
    22ea:	f1 a1       	ldd	r31, Z+33	; 0x21
    22ec:	e0 2d       	mov	r30, r0
    22ee:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:245
}
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	08 95       	ret

000022fa <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
writeFastHLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:223
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:227
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    22fe:	dc 01       	movw	r26, r24
    2300:	ed 91       	ld	r30, X+
    2302:	fc 91       	ld	r31, X
    2304:	06 8c       	ldd	r0, Z+30	; 0x1e
    2306:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2308:	e0 2d       	mov	r30, r0
    230a:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:228
}
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
writeFastVLine():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:205
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:209
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    2316:	dc 01       	movw	r26, r24
    2318:	ed 91       	ld	r30, X+
    231a:	fc 91       	ld	r31, X
    231c:	04 8c       	ldd	r0, Z+28	; 0x1c
    231e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2320:	e0 2d       	mov	r30, r0
    2322:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:210
}
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	08 95       	ret

0000232a <Adafruit_GFX::writePixel(int, int, unsigned int)>:
writePixel():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:191
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
  drawPixel(x, y, color);
    232a:	dc 01       	movw	r26, r24
    232c:	ed 91       	ld	r30, X+
    232e:	fc 91       	ld	r31, X
    2330:	00 84       	ldd	r0, Z+8	; 0x08
    2332:	f1 85       	ldd	r31, Z+9	; 0x09
    2334:	e0 2d       	mov	r30, r0
    2336:	09 94       	ijmp

00002338 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]>:
drawCircleHelper():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:407
    @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of
   the circle we're doing
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawCircleHelper(int16_t x0, int16_t y0, int16_t r,
    2338:	2f 92       	push	r2
    233a:	3f 92       	push	r3
    233c:	4f 92       	push	r4
    233e:	5f 92       	push	r5
    2340:	6f 92       	push	r6
    2342:	7f 92       	push	r7
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	7c 01       	movw	r14, r24
    235e:	6b 01       	movw	r12, r22
    2360:	ea 01       	movw	r28, r20
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:409
                                    uint8_t cornername, uint16_t color) {
  int16_t f = 1 - r;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	5c 01       	movw	r10, r24
    2368:	a4 1a       	sub	r10, r20
    236a:	b5 0a       	sbc	r11, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:411
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    236c:	66 24       	eor	r6, r6
    236e:	77 24       	eor	r7, r7
    2370:	64 1a       	sub	r6, r20
    2372:	75 0a       	sbc	r7, r21
    2374:	66 0c       	add	r6, r6
    2376:	77 1c       	adc	r7, r7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:412
  int16_t x = 0;
    2378:	10 e0       	ldi	r17, 0x00	; 0
    237a:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:410
*/
/**************************************************************************/
void Adafruit_GFX::drawCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t cornername, uint16_t color) {
  int16_t f = 1 - r;
  int16_t ddF_x = 1;
    237c:	88 24       	eor	r8, r8
    237e:	83 94       	inc	r8
    2380:	91 2c       	mov	r9, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:424
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;
    if (cornername & 0x4) {
    2382:	82 2f       	mov	r24, r18
    2384:	84 70       	andi	r24, 0x04	; 4
    2386:	58 2e       	mov	r5, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:428
      writePixel(x0 + x, y0 + y, color);
      writePixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
    2388:	82 2f       	mov	r24, r18
    238a:	82 70       	andi	r24, 0x02	; 2
    238c:	48 2e       	mov	r4, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:432
      writePixel(x0 + x, y0 - y, color);
      writePixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
    238e:	82 2f       	mov	r24, r18
    2390:	88 70       	andi	r24, 0x08	; 8
    2392:	38 2e       	mov	r3, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:436
      writePixel(x0 - y, y0 + x, color);
      writePixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
    2394:	21 70       	andi	r18, 0x01	; 1
    2396:	22 2e       	mov	r2, r18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:415
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  while (x < y) {
    2398:	0c 17       	cp	r16, r28
    239a:	1d 07       	cpc	r17, r29
    239c:	0c f0       	brlt	.+2      	; 0x23a0 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x68>
    239e:	71 c0       	rjmp	.+226    	; 0x2482 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x14a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:416
    if (f >= 0) {
    23a0:	b7 fc       	sbrc	r11, 7
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x78>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:417
      y--;
    23a4:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:418
      ddF_y += 2;
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	68 0e       	add	r6, r24
    23aa:	71 1c       	adc	r7, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:419
      f += ddF_y;
    23ac:	a6 0c       	add	r10, r6
    23ae:	b7 1c       	adc	r11, r7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:421
    }
    x++;
    23b0:	0f 5f       	subi	r16, 0xFF	; 255
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:422
    ddF_x += 2;
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	88 0e       	add	r8, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:423
    f += ddF_x;
    23b8:	91 1c       	adc	r9, r1
    23ba:	a8 0c       	add	r10, r8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:424
    if (cornername & 0x4) {
    23bc:	b9 1c       	adc	r11, r9
    23be:	55 20       	and	r5, r5
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:425
      writePixel(x0 + x, y0 + y, color);
    23c0:	b1 f0       	breq	.+44     	; 0x23ee <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0xb6>
    23c2:	21 e0       	ldi	r18, 0x01	; 1
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	ae 01       	movw	r20, r28
    23c8:	4c 0d       	add	r20, r12
    23ca:	5d 1d       	adc	r21, r13
    23cc:	b7 01       	movw	r22, r14
    23ce:	60 0f       	add	r22, r16
    23d0:	71 1f       	adc	r23, r17
    23d2:	87 e9       	ldi	r24, 0x97	; 151
    23d4:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:426
      writePixel(x0 + y, y0 + x, color);
    23d6:	a9 df       	rcall	.-174    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	a6 01       	movw	r20, r12
    23de:	40 0f       	add	r20, r16
    23e0:	51 1f       	adc	r21, r17
    23e2:	be 01       	movw	r22, r28
    23e4:	6e 0d       	add	r22, r14
    23e6:	7f 1d       	adc	r23, r15
    23e8:	87 e9       	ldi	r24, 0x97	; 151
    23ea:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:428
    }
    if (cornername & 0x2) {
    23ec:	9e df       	rcall	.-196    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    23ee:	44 20       	and	r4, r4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:429
      writePixel(x0 + x, y0 - y, color);
    23f0:	b1 f0       	breq	.+44     	; 0x241e <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0xe6>
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	a6 01       	movw	r20, r12
    23f8:	4c 1b       	sub	r20, r28
    23fa:	5d 0b       	sbc	r21, r29
    23fc:	b7 01       	movw	r22, r14
    23fe:	60 0f       	add	r22, r16
    2400:	71 1f       	adc	r23, r17
    2402:	87 e9       	ldi	r24, 0x97	; 151
    2404:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:430
      writePixel(x0 + y, y0 - x, color);
    2406:	91 df       	rcall	.-222    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    2408:	21 e0       	ldi	r18, 0x01	; 1
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	a6 01       	movw	r20, r12
    240e:	40 1b       	sub	r20, r16
    2410:	51 0b       	sbc	r21, r17
    2412:	be 01       	movw	r22, r28
    2414:	6e 0d       	add	r22, r14
    2416:	7f 1d       	adc	r23, r15
    2418:	87 e9       	ldi	r24, 0x97	; 151
    241a:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:432
    }
    if (cornername & 0x8) {
    241c:	86 df       	rcall	.-244    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    241e:	33 20       	and	r3, r3
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:433
      writePixel(x0 - y, y0 + x, color);
    2420:	b1 f0       	breq	.+44     	; 0x244e <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x116>
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	a6 01       	movw	r20, r12
    2428:	40 0f       	add	r20, r16
    242a:	51 1f       	adc	r21, r17
    242c:	b7 01       	movw	r22, r14
    242e:	6c 1b       	sub	r22, r28
    2430:	7d 0b       	sbc	r23, r29
    2432:	87 e9       	ldi	r24, 0x97	; 151
    2434:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:434
      writePixel(x0 - x, y0 + y, color);
    2436:	79 df       	rcall	.-270    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    2438:	21 e0       	ldi	r18, 0x01	; 1
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	ae 01       	movw	r20, r28
    243e:	4c 0d       	add	r20, r12
    2440:	5d 1d       	adc	r21, r13
    2442:	b7 01       	movw	r22, r14
    2444:	60 1b       	sub	r22, r16
    2446:	71 0b       	sbc	r23, r17
    2448:	87 e9       	ldi	r24, 0x97	; 151
    244a:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:436
    }
    if (cornername & 0x1) {
    244c:	6e df       	rcall	.-292    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    244e:	22 20       	and	r2, r2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:437
      writePixel(x0 - y, y0 - x, color);
    2450:	09 f4       	brne	.+2      	; 0x2454 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x11c>
    2452:	a2 cf       	rjmp	.-188    	; 0x2398 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x60>
    2454:	21 e0       	ldi	r18, 0x01	; 1
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	a6 01       	movw	r20, r12
    245a:	40 1b       	sub	r20, r16
    245c:	51 0b       	sbc	r21, r17
    245e:	b7 01       	movw	r22, r14
    2460:	6c 1b       	sub	r22, r28
    2462:	7d 0b       	sbc	r23, r29
    2464:	87 e9       	ldi	r24, 0x97	; 151
    2466:	98 e2       	ldi	r25, 0x28	; 40
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:438
      writePixel(x0 - x, y0 - y, color);
    2468:	60 df       	rcall	.-320    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    246a:	21 e0       	ldi	r18, 0x01	; 1
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	a6 01       	movw	r20, r12
    2470:	4c 1b       	sub	r20, r28
    2472:	5d 0b       	sbc	r21, r29
    2474:	b7 01       	movw	r22, r14
    2476:	60 1b       	sub	r22, r16
    2478:	71 0b       	sbc	r23, r17
    247a:	87 e9       	ldi	r24, 0x97	; 151
    247c:	98 e2       	ldi	r25, 0x28	; 40
    247e:	55 df       	rcall	.-342    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    2480:	8b cf       	rjmp	.-234    	; 0x2398 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]+0x60>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:441
    }
  }
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	9f 90       	pop	r9
    2498:	8f 90       	pop	r8
    249a:	7f 90       	pop	r7
    249c:	6f 90       	pop	r6
    249e:	5f 90       	pop	r5
    24a0:	4f 90       	pop	r4
    24a2:	3f 90       	pop	r3
    24a4:	2f 90       	pop	r2
    24a6:	08 95       	ret

000024a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>:
drawRoundRect():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:544
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:551
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
  if (r > max_radius)
    r = max_radius;
  // smarter version
  startWrite();
  writeFastHLine(x + r, y, w - 2 * r, color);         // Top
    24bc:	6c 01       	movw	r12, r24
    24be:	eb 01       	movw	r28, r22
    24c0:	5b 01       	movw	r10, r22
    24c2:	84 e0       	ldi	r24, 0x04	; 4
    24c4:	a8 1a       	sub	r10, r24
    24c6:	b1 08       	sbc	r11, r1
    24c8:	76 01       	movw	r14, r12
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	e8 0e       	add	r14, r24
    24ce:	f1 1c       	adc	r15, r1
    24d0:	01 e0       	ldi	r16, 0x01	; 1
    24d2:	10 e0       	ldi	r17, 0x00	; 0
    24d4:	95 01       	movw	r18, r10
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	b7 01       	movw	r22, r14
    24dc:	87 e9       	ldi	r24, 0x97	; 151
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:552
  writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
    24de:	98 e2       	ldi	r25, 0x28	; 40
    24e0:	0c df       	rcall	.-488    	; 0x22fa <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>
    24e2:	95 01       	movw	r18, r10
    24e4:	4f e1       	ldi	r20, 0x1F	; 31
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	b7 01       	movw	r22, r14
    24ea:	87 e9       	ldi	r24, 0x97	; 151
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:553
  writeFastVLine(x, y + r, h - 2 * r, color);         // Left
    24ec:	98 e2       	ldi	r25, 0x28	; 40
    24ee:	05 df       	rcall	.-502    	; 0x22fa <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>
    24f0:	2c e1       	ldi	r18, 0x1C	; 28
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	42 e0       	ldi	r20, 0x02	; 2
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	b6 01       	movw	r22, r12
    24fa:	87 e9       	ldi	r24, 0x97	; 151
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:554
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
    24fc:	98 e2       	ldi	r25, 0x28	; 40
    24fe:	09 df       	rcall	.-494    	; 0x2312 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>
    2500:	cc 0d       	add	r28, r12
    2502:	dd 1d       	adc	r29, r13
    2504:	be 01       	movw	r22, r28
    2506:	61 50       	subi	r22, 0x01	; 1
    2508:	71 09       	sbc	r23, r1
    250a:	2c e1       	ldi	r18, 0x1C	; 28
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	42 e0       	ldi	r20, 0x02	; 2
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	87 e9       	ldi	r24, 0x97	; 151
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:556
  // draw four corners
  drawCircleHelper(x + r, y + r, r, 1, color);
    2514:	98 e2       	ldi	r25, 0x28	; 40
    2516:	fd de       	rcall	.-518    	; 0x2312 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>
    2518:	21 e0       	ldi	r18, 0x01	; 1
    251a:	42 e0       	ldi	r20, 0x02	; 2
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	62 e0       	ldi	r22, 0x02	; 2
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	c7 01       	movw	r24, r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:557
  drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
    2524:	09 df       	rcall	.-494    	; 0x2338 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]>
    2526:	23 97       	sbiw	r28, 0x03	; 3
    2528:	22 e0       	ldi	r18, 0x02	; 2
    252a:	42 e0       	ldi	r20, 0x02	; 2
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	ce 01       	movw	r24, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:558
  drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
    2534:	01 df       	rcall	.-510    	; 0x2338 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]>
    2536:	24 e0       	ldi	r18, 0x04	; 4
    2538:	42 e0       	ldi	r20, 0x02	; 2
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	6d e1       	ldi	r22, 0x1D	; 29
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	ce 01       	movw	r24, r28
    2542:	fa de       	rcall	.-524    	; 0x2338 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:559
  drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
    2544:	28 e0       	ldi	r18, 0x08	; 8
    2546:	42 e0       	ldi	r20, 0x02	; 2
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	6d e1       	ldi	r22, 0x1D	; 29
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	c7 01       	movw	r24, r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:561
  endWrite();
}
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	df 90       	pop	r13
    255e:	cf 90       	pop	r12
    2560:	bf 90       	pop	r11
    2562:	af 90       	pop	r10
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:559
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
  // draw four corners
  drawCircleHelper(x + r, y + r, r, 1, color);
  drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
  drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
  drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
    2564:	e9 ce       	rjmp	.-558    	; 0x2338 <Adafruit_GFX::drawCircleHelper(int, int, int, unsigned char, unsigned int) [clone .constprop.23]>

00002566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>:
drawBitmap():
    2566:	3f 92       	push	r3
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:717
    @param    w   Width of bitmap in pixels
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
    2568:	4f 92       	push	r4
    256a:	5f 92       	push	r5
    256c:	6f 92       	push	r6
    256e:	7f 92       	push	r7
    2570:	8f 92       	push	r8
    2572:	9f 92       	push	r9
    2574:	af 92       	push	r10
    2576:	bf 92       	push	r11
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	00 d0       	rcall	.+0      	; 0x258a <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x24>
    258a:	00 d0       	rcall	.+0      	; 0x258c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x26>
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	5c 01       	movw	r10, r24
    2592:	3b 01       	movw	r6, r22
    2594:	6a 01       	movw	r12, r20
    2596:	49 01       	movw	r8, r18
    2598:	28 01       	movw	r4, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:720
                              int16_t w, int16_t h, uint16_t color) {

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    259a:	87 e0       	ldi	r24, 0x07	; 7
    259c:	48 0e       	add	r4, r24
    259e:	51 1c       	adc	r5, r1
    25a0:	93 e0       	ldi	r25, 0x03	; 3
    25a2:	55 94       	asr	r5
    25a4:	47 94       	ror	r4
    25a6:	9a 95       	dec	r25
    25a8:	e1 f7       	brne	.-8      	; 0x25a2 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x3c>
    25aa:	ca 01       	movw	r24, r20
    25ac:	8e 0d       	add	r24, r14
    25ae:	9f 1d       	adc	r25, r15
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	f1 2c       	mov	r15, r1
    25b6:	e1 2c       	mov	r14, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:721
  uint8_t b = 0;
    25b8:	31 2c       	mov	r3, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:725

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    25ba:	1b 82       	std	Y+3, r1	; 0x03
    25bc:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:726
      if (i & 7)
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	87 70       	andi	r24, 0x07	; 7
    25c4:	99 27       	eor	r25, r25
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:727
        b <<= 1;
    25c6:	33 0c       	add	r3, r3
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:726
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
      if (i & 7)
    25c8:	89 2b       	or	r24, r25
    25ca:	61 f4       	brne	.+24     	; 0x25e4 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x7e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:729
        b <<= 1;
      else
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    25cc:	eb 81       	ldd	r30, Y+3	; 0x03
    25ce:	fc 81       	ldd	r31, Y+4	; 0x04
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	f5 95       	asr	r31
    25d4:	e7 95       	ror	r30
    25d6:	8a 95       	dec	r24
    25d8:	e1 f7       	brne	.-8      	; 0x25d2 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x6c>
    25da:	ee 0d       	add	r30, r14
    25dc:	ff 1d       	adc	r31, r15
    25de:	e8 0d       	add	r30, r8
    25e0:	f9 1d       	adc	r31, r9
    25e2:	34 90       	lpm	r3, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:730
      if (b & 0x80)
    25e4:	37 fe       	sbrs	r3, 7
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x94>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:731
        writePixel(x + i, y, color);
    25e8:	21 e0       	ldi	r18, 0x01	; 1
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	a6 01       	movw	r20, r12
    25ee:	6b 81       	ldd	r22, Y+3	; 0x03
    25f0:	7c 81       	ldd	r23, Y+4	; 0x04
    25f2:	66 0d       	add	r22, r6
    25f4:	77 1d       	adc	r23, r7
    25f6:	c5 01       	movw	r24, r10
    25f8:	98 de       	rcall	.-720    	; 0x232a <Adafruit_GFX::writePixel(int, int, unsigned int)>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:725
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	8b 83       	std	Y+3, r24	; 0x03
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	08 17       	cp	r16, r24
    2606:	19 07       	cpc	r17, r25
    2608:	d1 f6       	brne	.-76     	; 0x25be <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x58>
    260a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:724

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    260c:	c9 1a       	sub	r12, r25
    260e:	d9 0a       	sbc	r13, r25
    2610:	e4 0c       	add	r14, r4
    2612:	f5 1c       	adc	r15, r5
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	c8 16       	cp	r12, r24
    261a:	d9 06       	cpc	r13, r25
    261c:	71 f6       	brne	.-100    	; 0x25ba <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]+0x54>
    261e:	24 96       	adiw	r28, 0x04	; 4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:735
      if (b & 0x80)
        writePixel(x + i, y, color);
    }
  }
  endWrite();
}
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
    2634:	bf 90       	pop	r11
    2636:	af 90       	pop	r10
    2638:	9f 90       	pop	r9
    263a:	8f 90       	pop	r8
    263c:	7f 90       	pop	r7
    263e:	6f 90       	pop	r6
    2640:	5f 90       	pop	r5
    2642:	4f 90       	pop	r4
    2644:	3f 90       	pop	r3
    2646:	08 95       	ret

00002648 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
writeLine():
    2648:	2f 92       	push	r2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:133
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
    264a:	3f 92       	push	r3
    264c:	4f 92       	push	r4
    264e:	5f 92       	push	r5
    2650:	6f 92       	push	r6
    2652:	7f 92       	push	r7
    2654:	8f 92       	push	r8
    2656:	9f 92       	push	r9
    2658:	af 92       	push	r10
    265a:	bf 92       	push	r11
    265c:	cf 92       	push	r12
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	26 97       	sbiw	r28, 0x06	; 6
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	3c 01       	movw	r6, r24
    2678:	6a 01       	movw	r12, r20
    267a:	2d 83       	std	Y+5, r18	; 0x05
    267c:	3e 83       	std	Y+6, r19	; 0x06
    267e:	eb 82       	std	Y+3, r14	; 0x03
    2680:	fc 82       	std	Y+4, r15	; 0x04
    2682:	58 01       	movw	r10, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:137
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    2684:	a4 1a       	sub	r10, r20
    2686:	b5 0a       	sbc	r11, r21
    2688:	b7 fe       	sbrs	r11, 7
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    268c:	b1 94       	neg	r11
    268e:	a1 94       	neg	r10
    2690:	b1 08       	sbc	r11, r1
    2692:	8d 80       	ldd	r8, Y+5	; 0x05
    2694:	9e 80       	ldd	r9, Y+6	; 0x06
    2696:	86 1a       	sub	r8, r22
    2698:	97 0a       	sbc	r9, r23
    269a:	97 fe       	sbrs	r9, 7
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    269e:	91 94       	neg	r9
    26a0:	81 94       	neg	r8
    26a2:	91 08       	sbc	r9, r1
    26a4:	8a 14       	cp	r8, r10
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:138
  if (steep) {
    26a6:	9b 04       	cpc	r9, r11
    26a8:	5c f0       	brlt	.+22     	; 0x26c0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    26aa:	90 2f       	mov	r25, r16
    26ac:	81 2f       	mov	r24, r17
    26ae:	0d 81       	ldd	r16, Y+5	; 0x05
    26b0:	1e 81       	ldd	r17, Y+6	; 0x06
    26b2:	9d 83       	std	Y+5, r25	; 0x05
    26b4:	8e 83       	std	Y+6, r24	; 0x06
    26b6:	9c 2d       	mov	r25, r12
    26b8:	8d 2d       	mov	r24, r13
    26ba:	6b 01       	movw	r12, r22
    26bc:	69 2f       	mov	r22, r25
    26be:	78 2f       	mov	r23, r24
    26c0:	0c 15       	cp	r16, r12
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:143
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    26c2:	1d 05       	cpc	r17, r13
    26c4:	5c f0       	brlt	.+22     	; 0x26dc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ca:	6d 83       	std	Y+5, r22	; 0x05
    26cc:	7e 83       	std	Y+6, r23	; 0x06
    26ce:	69 2f       	mov	r22, r25
    26d0:	78 2f       	mov	r23, r24
    26d2:	90 2f       	mov	r25, r16
    26d4:	81 2f       	mov	r24, r17
    26d6:	86 01       	movw	r16, r12
    26d8:	c9 2e       	mov	r12, r25
    26da:	d8 2e       	mov	r13, r24
    26dc:	16 01       	movw	r2, r12
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:149
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    26de:	20 1a       	sub	r2, r16
    26e0:	31 0a       	sbc	r3, r17
    26e2:	2b 01       	movw	r4, r22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:150
  dy = abs(y1 - y0);
    26e4:	2d 81       	ldd	r18, Y+5	; 0x05
    26e6:	3e 81       	ldd	r19, Y+6	; 0x06
    26e8:	42 1a       	sub	r4, r18
    26ea:	53 0a       	sbc	r5, r19
    26ec:	57 fe       	sbrs	r5, 7
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    26f0:	51 94       	neg	r5
    26f2:	41 94       	neg	r4
    26f4:	51 08       	sbc	r5, r1
    26f6:	71 01       	movw	r14, r2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:152

  int16_t err = dx / 2;
    26f8:	37 fe       	sbrs	r3, 7
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	e3 1a       	sub	r14, r19
    2700:	f3 0a       	sbc	r15, r19
    2702:	f5 94       	asr	r15
    2704:	e7 94       	ror	r14
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:155
  int16_t ystep;

  if (y0 < y1) {
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	86 17       	cp	r24, r22
    270c:	97 07       	cpc	r25, r23
    270e:	5c f5       	brge	.+86     	; 0x2766 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    2710:	a1 e0       	ldi	r26, 0x01	; 1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:156
    ystep = 1;
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	a9 83       	std	Y+1, r26	; 0x01
    2716:	ba 83       	std	Y+2, r27	; 0x02
    2718:	c0 16       	cp	r12, r16
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:161
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    271a:	d1 06       	cpc	r13, r17
    271c:	4c f1       	brlt	.+82     	; 0x2770 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    271e:	d3 01       	movw	r26, r6
    2720:	ed 91       	ld	r30, X+
    2722:	fc 91       	ld	r31, X
    2724:	04 84       	ldd	r0, Z+12	; 0x0c
    2726:	f5 85       	ldd	r31, Z+13	; 0x0d
    2728:	e0 2d       	mov	r30, r0
    272a:	2b 81       	ldd	r18, Y+3	; 0x03
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:163
    if (steep) {
      writePixel(y0, x0, color);
    272c:	3c 81       	ldd	r19, Y+4	; 0x04
    272e:	a8 01       	movw	r20, r16
    2730:	6d 81       	ldd	r22, Y+5	; 0x05
    2732:	7e 81       	ldd	r23, Y+6	; 0x06
    2734:	8a 14       	cp	r8, r10
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:162
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    if (steep) {
    2736:	9b 04       	cpc	r9, r11
    2738:	1c f0       	brlt	.+6      	; 0x2740 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    273a:	4d 81       	ldd	r20, Y+5	; 0x05
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:165
      writePixel(y0, x0, color);
    } else {
      writePixel(x0, y0, color);
    273c:	5e 81       	ldd	r21, Y+6	; 0x06
    273e:	b8 01       	movw	r22, r16
    2740:	c3 01       	movw	r24, r6
    2742:	09 95       	icall
    2744:	e4 18       	sub	r14, r4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:167
    }
    err -= dy;
    2746:	f5 08       	sbc	r15, r5
    2748:	f7 fe       	sbrs	r15, 7
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:168
    if (err < 0) {
    274a:	0a c0       	rjmp	.+20     	; 0x2760 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    274c:	2d 81       	ldd	r18, Y+5	; 0x05
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:169
      y0 += ystep;
    274e:	3e 81       	ldd	r19, Y+6	; 0x06
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	28 0f       	add	r18, r24
    2756:	39 1f       	adc	r19, r25
    2758:	2d 83       	std	Y+5, r18	; 0x05
    275a:	3e 83       	std	Y+6, r19	; 0x06
    275c:	e2 0c       	add	r14, r2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:170
      err += dx;
    275e:	f3 1c       	adc	r15, r3
    2760:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:161
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	d9 cf       	rjmp	.-78     	; 0x2718 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    2766:	2f ef       	ldi	r18, 0xFF	; 255
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:158
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	29 83       	std	Y+1, r18	; 0x01
    276c:	3a 83       	std	Y+2, r19	; 0x02
    276e:	d4 cf       	rjmp	.-88     	; 0x2718 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    2770:	26 96       	adiw	r28, 0x06	; 6
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:173
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	bf 90       	pop	r11
    2788:	af 90       	pop	r10
    278a:	9f 90       	pop	r9
    278c:	8f 90       	pop	r8
    278e:	7f 90       	pop	r7
    2790:	6f 90       	pop	r6
    2792:	5f 90       	pop	r5
    2794:	4f 90       	pop	r4
    2796:	3f 90       	pop	r3
    2798:	2f 90       	pop	r2
    279a:	08 95       	ret

0000279c <Print::flush()>:
flush():
    279c:	08 95       	ret

0000279e <Print::availableForWrite()>:
availableForWrite():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.h:88
    size_t println(void);

    int16_t printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));
    int16_t printf(const __FlashStringHelper *format, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    279e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.h:58
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	08 95       	ret

000027a4 <SPIClass::endTransaction()>:
endTransaction():
    27a4:	8f 92       	push	r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:264
  }
  config(settings);
}

void SPIClass::endTransaction(void)
{
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	fc 01       	movw	r30, r24
    27be:	86 81       	ldd	r24, Z+6	; 0x06
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:265
  if (interruptMode != SPI_IMODE_NONE)
    27c0:	88 23       	and	r24, r24
    27c2:	19 f0       	breq	.+6      	; 0x27ca <SPIClass::endTransaction()+0x26>
    27c4:	81 ff       	sbrs	r24, 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:267
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <SPIClass::endTransaction()+0x40>
    27c8:	78 94       	sei
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:269
    {
        interrupts();
    27ca:	df 91       	pop	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:274
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      reattachMaskedInterrupts();
  }
}
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
    27da:	bf 90       	pop	r11
    27dc:	af 90       	pop	r10
    27de:	9f 90       	pop	r9
    27e0:	8f 90       	pop	r8
    27e2:	08 95       	ret
    27e4:	80 ff       	sbrs	r24, 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:271
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    {
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    27e6:	f1 cf       	rjmp	.-30     	; 0x27ca <SPIClass::endTransaction()+0x26>
reattachMaskedInterrupts():
    27e8:	80 84       	ldd	r8, Z+8	; 0x08
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:225
    shift++;
  }
}

void SPIClass::reattachMaskedInterrupts() {
  uint64_t temp = interruptMask_lo;
    27ea:	91 84       	ldd	r9, Z+9	; 0x09
    27ec:	a2 84       	ldd	r10, Z+10	; 0x0a
    27ee:	b3 84       	ldd	r11, Z+11	; 0x0b
    27f0:	c1 2c       	mov	r12, r1
    27f2:	d1 2c       	mov	r13, r1
    27f4:	76 01       	movw	r14, r12
endTransaction():
    27f6:	10 e0       	ldi	r17, 0x00	; 0
reattachMaskedInterrupts():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:226
  uint8_t shift = 0;
    27f8:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:227
  while (temp != 0) {
    27fa:	a5 01       	movw	r20, r10
    27fc:	b6 01       	movw	r22, r12
    27fe:	c7 01       	movw	r24, r14
    2800:	a0 e0       	ldi	r26, 0x00	; 0
    2802:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    2806:	99 f1       	breq	.+102    	; 0x286e <SPIClass::endTransaction()+0xca>
    2808:	21 70       	andi	r18, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:228
    if (temp & 1) {
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    281c:	d9 f0       	breq	.+54     	; 0x2854 <SPIClass::endTransaction()+0xb0>
endTransaction():
    281e:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:229
      volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(portToPortStruct(shift/8), shift%8);
    2820:	c0 e0       	ldi	r28, 0x00	; 0
reattachMaskedInterrupts():
    2822:	10 33       	cpi	r17, 0x30	; 48
    2824:	70 f4       	brcc	.+28     	; 0x2842 <SPIClass::endTransaction()+0x9e>
    2826:	c1 2f       	mov	r28, r17
    2828:	c6 95       	lsr	r28
    282a:	c6 95       	lsr	r28
    282c:	c6 95       	lsr	r28
    282e:	80 e2       	ldi	r24, 0x20	; 32
    2830:	c8 9f       	mul	r28, r24
    2832:	e0 01       	movw	r28, r0
    2834:	11 24       	eor	r1, r1
    2836:	c0 5f       	subi	r28, 0xF0	; 240
    2838:	db 4f       	sbci	r29, 0xFB	; 251
    283a:	81 2f       	mov	r24, r17
    283c:	87 70       	andi	r24, 0x07	; 7
    283e:	c8 0f       	add	r28, r24
    2840:	d1 1d       	adc	r29, r1
    2842:	cf 01       	movw	r24, r30
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:230
      *pin_ctrl_reg |= irqMap[shift];
    2844:	81 0f       	add	r24, r17
    2846:	91 1d       	adc	r25, r1
    2848:	dc 01       	movw	r26, r24
    284a:	50 96       	adiw	r26, 0x10	; 16
    284c:	8c 91       	ld	r24, X
    284e:	98 81       	ld	r25, Y
    2850:	89 2b       	or	r24, r25
    2852:	88 83       	st	Y, r24
    2854:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:232
    }
    temp = temp >> 1;
    2856:	a5 01       	movw	r20, r10
    2858:	b6 01       	movw	r22, r12
    285a:	c7 01       	movw	r24, r14
    285c:	01 e0       	ldi	r16, 0x01	; 1
    285e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__lshrdi3>
    2862:	49 01       	movw	r8, r18
    2864:	5a 01       	movw	r10, r20
    2866:	6b 01       	movw	r12, r22
    2868:	7c 01       	movw	r14, r24
    286a:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:233
    shift++;
    286c:	c5 cf       	rjmp	.-118    	; 0x27f8 <SPIClass::endTransaction()+0x54>
    286e:	84 84       	ldd	r8, Z+12	; 0x0c
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:235
  }
  temp = interruptMask_hi;
    2870:	95 84       	ldd	r9, Z+13	; 0x0d
    2872:	a6 84       	ldd	r10, Z+14	; 0x0e
    2874:	b7 84       	ldd	r11, Z+15	; 0x0f
    2876:	c1 2c       	mov	r12, r1
    2878:	d1 2c       	mov	r13, r1
    287a:	76 01       	movw	r14, r12
endTransaction():
    287c:	10 e2       	ldi	r17, 0x20	; 32
reattachMaskedInterrupts():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:236
  shift = 32;
    287e:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:237
  while (temp != 0) {
    2880:	a5 01       	movw	r20, r10
    2882:	b6 01       	movw	r22, r12
    2884:	c7 01       	movw	r24, r14
    2886:	a0 e0       	ldi	r26, 0x00	; 0
    2888:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    288c:	09 f4       	brne	.+2      	; 0x2890 <SPIClass::endTransaction()+0xec>
    288e:	9d cf       	rjmp	.-198    	; 0x27ca <SPIClass::endTransaction()+0x26>
    2890:	21 70       	andi	r18, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:238
    if (temp & 1) {
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    28a4:	d9 f0       	breq	.+54     	; 0x28dc <SPIClass::endTransaction()+0x138>
endTransaction():
    28a6:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:239
      volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(portToPortStruct(shift/8), shift%8);
    28a8:	c0 e0       	ldi	r28, 0x00	; 0
reattachMaskedInterrupts():
    28aa:	10 33       	cpi	r17, 0x30	; 48
    28ac:	70 f4       	brcc	.+28     	; 0x28ca <SPIClass::endTransaction()+0x126>
    28ae:	c1 2f       	mov	r28, r17
    28b0:	c6 95       	lsr	r28
    28b2:	c6 95       	lsr	r28
    28b4:	c6 95       	lsr	r28
    28b6:	b0 e2       	ldi	r27, 0x20	; 32
    28b8:	cb 9f       	mul	r28, r27
    28ba:	e0 01       	movw	r28, r0
    28bc:	11 24       	eor	r1, r1
    28be:	c0 5f       	subi	r28, 0xF0	; 240
    28c0:	db 4f       	sbci	r29, 0xFB	; 251
    28c2:	81 2f       	mov	r24, r17
    28c4:	87 70       	andi	r24, 0x07	; 7
    28c6:	c8 0f       	add	r28, r24
    28c8:	d1 1d       	adc	r29, r1
    28ca:	cf 01       	movw	r24, r30
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:240
      *pin_ctrl_reg |= irqMap[shift];
    28cc:	81 0f       	add	r24, r17
    28ce:	91 1d       	adc	r25, r1
    28d0:	dc 01       	movw	r26, r24
    28d2:	50 96       	adiw	r26, 0x10	; 16
    28d4:	8c 91       	ld	r24, X
    28d6:	98 81       	ld	r25, Y
    28d8:	89 2b       	or	r24, r25
    28da:	88 83       	st	Y, r24
    28dc:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:242
    }
    temp = temp >> 1;
    28de:	a5 01       	movw	r20, r10
    28e0:	b6 01       	movw	r22, r12
    28e2:	c7 01       	movw	r24, r14
    28e4:	01 e0       	ldi	r16, 0x01	; 1
    28e6:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__lshrdi3>
    28ea:	49 01       	movw	r8, r18
    28ec:	5a 01       	movw	r10, r20
    28ee:	6b 01       	movw	r12, r22
    28f0:	7c 01       	movw	r14, r24
    28f2:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:243
    shift++;
    28f4:	c4 cf       	rjmp	.-120    	; 0x287e <SPIClass::endTransaction()+0xda>

000028f6 <SPIClass::beginTransaction(SPISettings)>:
beginTransaction():
    28f6:	8f 92       	push	r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:248
  }
}

void SPIClass::beginTransaction(SPISettings settings)
{
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	fc 01       	movw	r30, r24
    2910:	c6 2f       	mov	r28, r22
    2912:	17 2f       	mov	r17, r23
    2914:	86 81       	ldd	r24, Z+6	; 0x06
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:249
  if (interruptMode != SPI_IMODE_NONE)
    2916:	88 23       	and	r24, r24
    2918:	19 f0       	breq	.+6      	; 0x2920 <SPIClass::beginTransaction(SPISettings)+0x2a>
    291a:	81 ff       	sbrs	r24, 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:251
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    291c:	12 c0       	rjmp	.+36     	; 0x2942 <SPIClass::beginTransaction(SPISettings)+0x4c>
    291e:	f8 94       	cli
config():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:253
    {
      noInterrupts();
    2920:	c0 93 c0 08 	sts	0x08C0, r28	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f48c0>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:142
  initialized = true;
}

void SPIClass::config(SPISettings settings)
{
  SPI0.CTRLA = settings.ctrla;
    2924:	10 93 c1 08 	sts	0x08C1, r17	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f48c1>
beginTransaction():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:143
  SPI0.CTRLB = settings.ctrlb;
    2928:	df 91       	pop	r29
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:261
    {
      detachMaskedInterrupts();
    }
  }
  config(settings);
}
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	08 95       	ret
    2942:	80 ff       	sbrs	r24, 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:255
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    {
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    2944:	ed cf       	rjmp	.-38     	; 0x2920 <SPIClass::beginTransaction(SPISettings)+0x2a>
detachMaskedInterrupts():
    2946:	80 84       	ldd	r8, Z+8	; 0x08
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:200
    #endif
  }
}

void SPIClass::detachMaskedInterrupts() {
  uint64_t temp = interruptMask_lo;
    2948:	91 84       	ldd	r9, Z+9	; 0x09
    294a:	a2 84       	ldd	r10, Z+10	; 0x0a
    294c:	b3 84       	ldd	r11, Z+11	; 0x0b
    294e:	c1 2c       	mov	r12, r1
    2950:	d1 2c       	mov	r13, r1
    2952:	76 01       	movw	r14, r12
beginTransaction():
    2954:	d0 e0       	ldi	r29, 0x00	; 0
detachMaskedInterrupts():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:201
  uint8_t shift = 0;
    2956:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:202
  while (temp != 0) {
    2958:	a5 01       	movw	r20, r10
    295a:	b6 01       	movw	r22, r12
    295c:	c7 01       	movw	r24, r14
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    2964:	b1 f1       	breq	.+108    	; 0x29d2 <SPIClass::beginTransaction(SPISettings)+0xdc>
    2966:	21 70       	andi	r18, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:203
    if (temp & 1) {
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    297a:	f1 f0       	breq	.+60     	; 0x29b8 <SPIClass::beginTransaction(SPISettings)+0xc2>
beginTransaction():
    297c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:204
      volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(portToPortStruct(shift/8), shift%8);
    297e:	80 e0       	ldi	r24, 0x00	; 0
detachMaskedInterrupts():
    2980:	d0 33       	cpi	r29, 0x30	; 48
    2982:	70 f4       	brcc	.+28     	; 0x29a0 <SPIClass::beginTransaction(SPISettings)+0xaa>
    2984:	8d 2f       	mov	r24, r29
    2986:	86 95       	lsr	r24
    2988:	86 95       	lsr	r24
    298a:	86 95       	lsr	r24
    298c:	20 e2       	ldi	r18, 0x20	; 32
    298e:	82 9f       	mul	r24, r18
    2990:	c0 01       	movw	r24, r0
    2992:	11 24       	eor	r1, r1
    2994:	80 5f       	subi	r24, 0xF0	; 240
    2996:	9b 4f       	sbci	r25, 0xFB	; 251
    2998:	2d 2f       	mov	r18, r29
    299a:	27 70       	andi	r18, 0x07	; 7
    299c:	82 0f       	add	r24, r18
    299e:	91 1d       	adc	r25, r1
    29a0:	dc 01       	movw	r26, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:205
      irqMap[shift] = *pin_ctrl_reg;
    29a2:	4c 91       	ld	r20, X
    29a4:	9f 01       	movw	r18, r30
    29a6:	2d 0f       	add	r18, r29
    29a8:	31 1d       	adc	r19, r1
    29aa:	d9 01       	movw	r26, r18
    29ac:	50 96       	adiw	r26, 0x10	; 16
    29ae:	4c 93       	st	X, r20
    29b0:	dc 01       	movw	r26, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:206
      *pin_ctrl_reg &= ~(PORT_ISC_gm);
    29b2:	2c 91       	ld	r18, X
    29b4:	28 7f       	andi	r18, 0xF8	; 248
    29b6:	2c 93       	st	X, r18
    29b8:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:208
    }
    temp = temp >> 1;
    29ba:	a5 01       	movw	r20, r10
    29bc:	b6 01       	movw	r22, r12
    29be:	c7 01       	movw	r24, r14
    29c0:	01 e0       	ldi	r16, 0x01	; 1
    29c2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__lshrdi3>
    29c6:	49 01       	movw	r8, r18
    29c8:	5a 01       	movw	r10, r20
    29ca:	6b 01       	movw	r12, r22
    29cc:	7c 01       	movw	r14, r24
    29ce:	df 5f       	subi	r29, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:209
    shift++;
    29d0:	c2 cf       	rjmp	.-124    	; 0x2956 <SPIClass::beginTransaction(SPISettings)+0x60>
    29d2:	84 84       	ldd	r8, Z+12	; 0x0c
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:211
  }
  temp = interruptMask_hi;
    29d4:	95 84       	ldd	r9, Z+13	; 0x0d
    29d6:	a6 84       	ldd	r10, Z+14	; 0x0e
    29d8:	b7 84       	ldd	r11, Z+15	; 0x0f
    29da:	c1 2c       	mov	r12, r1
    29dc:	d1 2c       	mov	r13, r1
    29de:	76 01       	movw	r14, r12
beginTransaction():
    29e0:	d0 e2       	ldi	r29, 0x20	; 32
detachMaskedInterrupts():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:212
  shift = 32;
    29e2:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:213
  while (temp != 0) {
    29e4:	a5 01       	movw	r20, r10
    29e6:	b6 01       	movw	r22, r12
    29e8:	c7 01       	movw	r24, r14
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <SPIClass::beginTransaction(SPISettings)+0xfe>
    29f2:	96 cf       	rjmp	.-212    	; 0x2920 <SPIClass::beginTransaction(SPISettings)+0x2a>
    29f4:	21 70       	andi	r18, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:214
    if (temp & 1) {
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <__cmpdi2_s8>
    2a08:	f1 f0       	breq	.+60     	; 0x2a46 <SPIClass::beginTransaction(SPISettings)+0x150>
beginTransaction():
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:215
      volatile uint8_t* pin_ctrl_reg = getPINnCTRLregister(portToPortStruct(shift/8), shift%8);
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
detachMaskedInterrupts():
    2a0e:	d0 33       	cpi	r29, 0x30	; 48
    2a10:	70 f4       	brcc	.+28     	; 0x2a2e <SPIClass::beginTransaction(SPISettings)+0x138>
    2a12:	8d 2f       	mov	r24, r29
    2a14:	86 95       	lsr	r24
    2a16:	86 95       	lsr	r24
    2a18:	86 95       	lsr	r24
    2a1a:	b0 e2       	ldi	r27, 0x20	; 32
    2a1c:	8b 9f       	mul	r24, r27
    2a1e:	c0 01       	movw	r24, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	80 5f       	subi	r24, 0xF0	; 240
    2a24:	9b 4f       	sbci	r25, 0xFB	; 251
    2a26:	2d 2f       	mov	r18, r29
    2a28:	27 70       	andi	r18, 0x07	; 7
    2a2a:	82 0f       	add	r24, r18
    2a2c:	91 1d       	adc	r25, r1
    2a2e:	dc 01       	movw	r26, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:216
      irqMap[shift] = *pin_ctrl_reg;
    2a30:	4c 91       	ld	r20, X
    2a32:	9f 01       	movw	r18, r30
    2a34:	2d 0f       	add	r18, r29
    2a36:	31 1d       	adc	r19, r1
    2a38:	d9 01       	movw	r26, r18
    2a3a:	50 96       	adiw	r26, 0x10	; 16
    2a3c:	4c 93       	st	X, r20
    2a3e:	dc 01       	movw	r26, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:217
      *pin_ctrl_reg &= ~(PORT_ISC_gm);
    2a40:	2c 91       	ld	r18, X
    2a42:	28 7f       	andi	r18, 0xF8	; 248
    2a44:	2c 93       	st	X, r18
    2a46:	94 01       	movw	r18, r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:219
    }
    temp = temp >> 1;
    2a48:	a5 01       	movw	r20, r10
    2a4a:	b6 01       	movw	r22, r12
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	01 e0       	ldi	r16, 0x01	; 1
    2a50:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__lshrdi3>
    2a54:	49 01       	movw	r8, r18
    2a56:	5a 01       	movw	r10, r20
    2a58:	6b 01       	movw	r12, r22
    2a5a:	7c 01       	movw	r14, r24
    2a5c:	df 5f       	subi	r29, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:220
    shift++;
    2a5e:	c1 cf       	rjmp	.-126    	; 0x29e2 <SPIClass::beginTransaction(SPISettings)+0xec>

00002a60 <Adafruit_SSD1306::display() [clone .constprop.31]>:
display():
    2a60:	ef 92       	push	r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:992
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:993
  TRANSACTION_START
    2a70:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    2a74:	89 2b       	or	r24, r25
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <Adafruit_SSD1306::display() [clone .constprop.31]+0x1a>
    2a78:	83 c0       	rjmp	.+262    	; 0x2b80 <Adafruit_SSD1306::display() [clone .constprop.31]+0x120>
setClock():
    2a7a:	60 91 cc 28 	lds	r22, 0x28CC	; 0x8028cc <display+0x35>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
  TWI_Disable();
}

void TwoWire::setClock(uint32_t frequency)
{
  TWI_MasterSetBaud(frequency);
    2a7e:	70 91 cd 28 	lds	r23, 0x28CD	; 0x8028cd <display+0x36>
    2a82:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <display+0x37>
    2a86:	90 91 cf 28 	lds	r25, 0x28CF	; 0x8028cf <display+0x38>
    2a8a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
display():
    2a8e:	65 e0       	ldi	r22, 0x05	; 5
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:999
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	9d e0       	ldi	r25, 0x0D	; 13
    2a94:	0e 94 95 0b 	call	0x172a	; 0x172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>
    2a98:	60 91 9b 28 	lds	r22, 0x289B	; 0x80289b <display+0x4>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1000
  ssd1306_command1(WIDTH - 1); // Column end address
    2a9c:	61 50       	subi	r22, 0x01	; 1
    2a9e:	87 e9       	ldi	r24, 0x97	; 151
    2aa0:	98 e2       	ldi	r25, 0x28	; 40
    2aa2:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    2aa6:	20 91 9d 28 	lds	r18, 0x289D	; 0x80289d <display+0x6>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1011
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    2aaa:	30 91 9e 28 	lds	r19, 0x289E	; 0x80289e <display+0x7>
    2aae:	c9 01       	movw	r24, r18
    2ab0:	07 96       	adiw	r24, 0x07	; 7
    2ab2:	97 fd       	sbrc	r25, 7
    2ab4:	07 96       	adiw	r24, 0x07	; 7
    2ab6:	23 e0       	ldi	r18, 0x03	; 3
    2ab8:	95 95       	asr	r25
    2aba:	87 95       	ror	r24
    2abc:	2a 95       	dec	r18
    2abe:	e1 f7       	brne	.-8      	; 0x2ab8 <Adafruit_SSD1306::display() [clone .constprop.31]+0x58>
    2ac0:	20 91 9b 28 	lds	r18, 0x289B	; 0x80289b <display+0x4>
    2ac4:	30 91 9c 28 	lds	r19, 0x289C	; 0x80289c <display+0x5>
    2ac8:	82 9f       	mul	r24, r18
    2aca:	80 01       	movw	r16, r0
    2acc:	83 9f       	mul	r24, r19
    2ace:	10 0d       	add	r17, r0
    2ad0:	92 9f       	mul	r25, r18
    2ad2:	10 0d       	add	r17, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	c0 91 b6 28 	lds	r28, 0x28B6	; 0x8028b6 <display+0x1f>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1012
  uint8_t *ptr = buffer;
    2ada:	d0 91 b7 28 	lds	r29, 0x28B7	; 0x8028b7 <display+0x20>
    2ade:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1013
  if (wire) { // I2C
    2ae2:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    2ae6:	0c 0f       	add	r16, r28
    2ae8:	1d 1f       	adc	r17, r29
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <Adafruit_SSD1306::display() [clone .constprop.31]+0x90>
    2aee:	77 c0       	rjmp	.+238    	; 0x2bde <Adafruit_SSD1306::display() [clone .constprop.31]+0x17e>
beginTransmission():
    2af0:	20 91 b8 28 	lds	r18, 0x28B8	; 0x8028b8 <display+0x21>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
    2af4:	20 93 62 28 	sts	0x2862, r18	; 0x802862 <TwoWire::txAddress>
    2af8:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2afc:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
display():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
    2b00:	dc 01       	movw	r26, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1015
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    2b02:	ed 91       	ld	r30, X+
    2b04:	fc 91       	ld	r31, X
    2b06:	01 90       	ld	r0, Z+
    2b08:	f0 81       	ld	r31, Z
    2b0a:	e0 2d       	mov	r30, r0
    2b0c:	60 e4       	ldi	r22, 0x40	; 64
    2b0e:	09 95       	icall
    2b10:	ee 24       	eor	r14, r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1016
    uint16_t bytesOut = 1;
    2b12:	e3 94       	inc	r14
    2b14:	f1 2c       	mov	r15, r1
    2b16:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    2b1a:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    2b1e:	0c 17       	cp	r16, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1017
    while (count--) {
    2b20:	1d 07       	cpc	r17, r29
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <Adafruit_SSD1306::display() [clone .constprop.31]+0xc6>
    2b24:	43 c0       	rjmp	.+134    	; 0x2bac <Adafruit_SSD1306::display() [clone .constprop.31]+0x14c>
    2b26:	b0 e2       	ldi	r27, 0x20	; 32
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1018
      if (bytesOut >= WIRE_MAX) {
    2b28:	eb 16       	cp	r14, r27
    2b2a:	f1 04       	cpc	r15, r1
    2b2c:	c8 f0       	brcs	.+50     	; 0x2b60 <Adafruit_SSD1306::display() [clone .constprop.31]+0x100>
    2b2e:	0e 94 35 0b 	call	0x166a	; 0x166a <TwoWire::endTransmission()>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1019
        wire->endTransmission();
    2b32:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1020
        wire->beginTransmission(i2caddr);
    2b36:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
beginTransmission():
    2b3a:	20 91 b8 28 	lds	r18, 0x28B8	; 0x8028b8 <display+0x21>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
    2b3e:	20 93 62 28 	sts	0x2862, r18	; 0x802862 <TwoWire::txAddress>
    2b42:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2b46:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
display():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
    2b4a:	dc 01       	movw	r26, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1021
        WIRE_WRITE((uint8_t)0x40);
    2b4c:	ed 91       	ld	r30, X+
    2b4e:	fc 91       	ld	r31, X
    2b50:	01 90       	ld	r0, Z+
    2b52:	f0 81       	ld	r31, Z
    2b54:	e0 2d       	mov	r30, r0
    2b56:	60 e4       	ldi	r22, 0x40	; 64
    2b58:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1022
        bytesOut = 1;
    2b5a:	ee 24       	eor	r14, r14
    2b5c:	e3 94       	inc	r14
    2b5e:	f1 2c       	mov	r15, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1024
      }
      WIRE_WRITE(*ptr++);
    2b60:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    2b64:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    2b68:	69 91       	ld	r22, Y+
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	ed 91       	ld	r30, X+
    2b6e:	fc 91       	ld	r31, X
    2b70:	01 90       	ld	r0, Z+
    2b72:	f0 81       	ld	r31, Z
    2b74:	e0 2d       	mov	r30, r0
    2b76:	09 95       	icall
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1025
      bytesOut++;
    2b78:	bf ef       	ldi	r27, 0xFF	; 255
    2b7a:	eb 1a       	sub	r14, r27
    2b7c:	fb 0a       	sbc	r15, r27
    2b7e:	cb cf       	rjmp	.-106    	; 0x2b16 <Adafruit_SSD1306::display() [clone .constprop.31]+0xb6>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:993
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    2b80:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
    2b84:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	29 f0       	breq	.+10     	; 0x2b96 <Adafruit_SSD1306::display() [clone .constprop.31]+0x136>
    2b8c:	60 91 d5 28 	lds	r22, 0x28D5	; 0x8028d5 <display+0x3e>
    2b90:	70 91 d6 28 	lds	r23, 0x28D6	; 0x8028d6 <display+0x3f>
    2b94:	b0 de       	rcall	.-672    	; 0x28f6 <SPIClass::beginTransaction(SPISettings)>
    2b96:	e0 91 c6 28 	lds	r30, 0x28C6	; 0x8028c6 <display+0x2f>
    2b9a:	f0 91 c7 28 	lds	r31, 0x28C7	; 0x8028c7 <display+0x30>
    2b9e:	90 81       	ld	r25, Z
    2ba0:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <display+0x34>
    2ba4:	80 95       	com	r24
    2ba6:	89 23       	and	r24, r25
    2ba8:	80 83       	st	Z, r24
    2baa:	71 cf       	rjmp	.-286    	; 0x2a8e <Adafruit_SSD1306::display() [clone .constprop.31]+0x2e>
    2bac:	0e 94 35 0b 	call	0x166a	; 0x166a <TwoWire::endTransmission()>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1027
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    2bb0:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1033
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2bb4:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    2bb8:	89 2b       	or	r24, r25
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <Adafruit_SSD1306::display() [clone .constprop.31]+0x15e>
    2bbc:	58 c0       	rjmp	.+176    	; 0x2c6e <Adafruit_SSD1306::display() [clone .constprop.31]+0x20e>
setClock():
    2bbe:	60 91 d0 28 	lds	r22, 0x28D0	; 0x8028d0 <display+0x39>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
  TWI_Disable();
}

void TwoWire::setClock(uint32_t frequency)
{
  TWI_MasterSetBaud(frequency);
    2bc2:	70 91 d1 28 	lds	r23, 0x28D1	; 0x8028d1 <display+0x3a>
    2bc6:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <display+0x3b>
    2bca:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <display+0x3c>
display():
    2bce:	df 91       	pop	r29
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1037
#if defined(ESP8266)
  yield();
#endif
}
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
setClock():
    2bda:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
display():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
    2bde:	e0 91 c4 28 	lds	r30, 0x28C4	; 0x8028c4 <display+0x2d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1029
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    2be2:	f0 91 c5 28 	lds	r31, 0x28C5	; 0x8028c5 <display+0x2e>
    2be6:	80 81       	ld	r24, Z
    2be8:	90 91 ca 28 	lds	r25, 0x28CA	; 0x8028ca <display+0x33>
    2bec:	89 2b       	or	r24, r25
    2bee:	80 83       	st	Z, r24
    2bf0:	0c 17       	cp	r16, r28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1030
    while (count--)
    2bf2:	1d 07       	cpc	r17, r29
    2bf4:	e9 f2       	breq	.-70     	; 0x2bb0 <Adafruit_SSD1306::display() [clone .constprop.31]+0x150>
    2bf6:	59 91       	ld	r21, Y+
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1031
      SPIwrite(*ptr++);
    2bf8:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2bfc:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    2c00:	89 2b       	or	r24, r25
    2c02:	51 f0       	breq	.+20     	; 0x2c18 <Adafruit_SSD1306::display() [clone .constprop.31]+0x1b8>
transfer():
    2c04:	00 00       	nop
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:304
  * The following NOP introduces a small delay that can prevent the wait
  * loop from iterating when running at the maximum speed. This gives
  * about 10% more speed, even if it seems counter-intuitive. At lower
  * speeds it is unnoticed.
  */
  asm volatile("nop");
    2c06:	50 93 c4 08 	sts	0x08C4, r21	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:306

  SPI0.DATA = data;
    2c0a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:307
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
    2c0e:	87 ff       	sbrs	r24, 7
    2c10:	fc cf       	rjmp	.-8      	; 0x2c0a <Adafruit_SSD1306::display() [clone .constprop.31]+0x1aa>
    2c12:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:308
  return SPI0.DATA;                             // read data back
    2c16:	ec cf       	rjmp	.-40     	; 0x2bf0 <Adafruit_SSD1306::display() [clone .constprop.31]+0x190>
_ZN16Adafruit_SSD13068SPIwriteEh():
    2c18:	28 e0       	ldi	r18, 0x08	; 8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:360
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
display():
    2c1c:	90 e8       	ldi	r25, 0x80	; 128
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2c1e:	e0 91 c0 28 	lds	r30, 0x28C0	; 0x8028c0 <display+0x29>
    2c22:	f0 91 c1 28 	lds	r31, 0x28C1	; 0x8028c1 <display+0x2a>
    2c26:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
    2c2a:	45 2f       	mov	r20, r21
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
#ifdef HAVE_PORTREG
      if (d & bit)
    2c2c:	49 23       	and	r20, r25
    2c2e:	d9 f0       	breq	.+54     	; 0x2c66 <Adafruit_SSD1306::display() [clone .constprop.31]+0x206>
    2c30:	40 81       	ld	r20, Z
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
        *mosiPort |= mosiPinMask;
    2c32:	84 2b       	or	r24, r20
    2c34:	80 83       	st	Z, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
      else
        *mosiPort &= ~mosiPinMask;
    2c36:	e0 91 c2 28 	lds	r30, 0x28C2	; 0x8028c2 <display+0x2b>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
      *clkPort |= clkPinMask;  // Clock high
    2c3a:	f0 91 c3 28 	lds	r31, 0x28C3	; 0x8028c3 <display+0x2c>
    2c3e:	80 81       	ld	r24, Z
    2c40:	40 91 c9 28 	lds	r20, 0x28C9	; 0x8028c9 <display+0x32>
    2c44:	84 2b       	or	r24, r20
    2c46:	80 83       	st	Z, r24
    2c48:	e0 91 c2 28 	lds	r30, 0x28C2	; 0x8028c2 <display+0x2b>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
      *clkPort &= ~clkPinMask; // Clock low
    2c4c:	f0 91 c3 28 	lds	r31, 0x28C3	; 0x8028c3 <display+0x2c>
    2c50:	40 81       	ld	r20, Z
    2c52:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <display+0x32>
    2c56:	80 95       	com	r24
    2c58:	84 23       	and	r24, r20
    2c5a:	80 83       	st	Z, r24
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2c5c:	96 95       	lsr	r25
    2c5e:	21 50       	subi	r18, 0x01	; 1
    2c60:	31 09       	sbc	r19, r1
    2c62:	e9 f6       	brne	.-70     	; 0x2c1e <Adafruit_SSD1306::display() [clone .constprop.31]+0x1be>
    2c64:	c5 cf       	rjmp	.-118    	; 0x2bf0 <Adafruit_SSD1306::display() [clone .constprop.31]+0x190>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    2c66:	40 81       	ld	r20, Z
    2c68:	80 95       	com	r24
    2c6a:	84 23       	and	r24, r20
    2c6c:	e3 cf       	rjmp	.-58     	; 0x2c34 <Adafruit_SSD1306::display() [clone .constprop.31]+0x1d4>
display():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1033
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2c6e:	e0 91 c6 28 	lds	r30, 0x28C6	; 0x8028c6 <display+0x2f>
    2c72:	f0 91 c7 28 	lds	r31, 0x28C7	; 0x8028c7 <display+0x30>
    2c76:	80 81       	ld	r24, Z
    2c78:	90 91 cb 28 	lds	r25, 0x28CB	; 0x8028cb <display+0x34>
    2c7c:	89 2b       	or	r24, r25
    2c7e:	80 83       	st	Z, r24
    2c80:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
    2c84:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	39 f0       	breq	.+14     	; 0x2c9a <Adafruit_SSD1306::display() [clone .constprop.31]+0x23a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1037
#if defined(ESP8266)
  yield();
#endif
}
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	ff 90       	pop	r15
    2c96:	ef 90       	pop	r14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1033
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2c98:	85 cd       	rjmp	.-1270   	; 0x27a4 <SPIClass::endTransaction()>
    2c9a:	df 91       	pop	r29
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1037
#if defined(ESP8266)
  yield();
#endif
}
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	08 95       	ret

00002ca8 <Adafruit_SSD1306::invertDisplay(bool)>:
invertDisplay():
    2ca8:	1f 93       	push	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1164
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	ec 01       	movw	r28, r24
    2cb0:	16 2f       	mov	r17, r22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1165
  TRANSACTION_START
    2cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb6:	89 2b       	or	r24, r25
    2cb8:	c9 f0       	breq	.+50     	; 0x2cec <Adafruit_SSD1306::invertDisplay(bool)+0x44>
setClock():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
    2cba:	6d a9       	ldd	r22, Y+53	; 0x35
    2cbc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cbe:	8f a9       	ldd	r24, Y+55	; 0x37
    2cc0:	98 ad       	ldd	r25, Y+56	; 0x38
    2cc2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
invertDisplay():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1166
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    2cc6:	66 ea       	ldi	r22, 0xA6	; 166
    2cc8:	11 11       	cpse	r17, r1
    2cca:	67 ea       	ldi	r22, 0xA7	; 167
    2ccc:	ce 01       	movw	r24, r28
    2cce:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1167
  TRANSACTION_END
    2cd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd6:	89 2b       	or	r24, r25
    2cd8:	c1 f0       	breq	.+48     	; 0x2d0a <Adafruit_SSD1306::invertDisplay(bool)+0x62>
setClock():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
    2cda:	69 ad       	ldd	r22, Y+57	; 0x39
    2cdc:	7a ad       	ldd	r23, Y+58	; 0x3a
    2cde:	8b ad       	ldd	r24, Y+59	; 0x3b
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1168
}
    2ce0:	9c ad       	ldd	r25, Y+60	; 0x3c
invertDisplay():
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
    2ce6:	1f 91       	pop	r17
setClock():
    2ce8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
invertDisplay():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1165
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
    2cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	19 f0       	breq	.+6      	; 0x2cfa <Adafruit_SSD1306::invertDisplay(bool)+0x52>
    2cf4:	6e ad       	ldd	r22, Y+62	; 0x3e
    2cf6:	7f ad       	ldd	r23, Y+63	; 0x3f
    2cf8:	fe dd       	rcall	.-1028   	; 0x28f6 <SPIClass::beginTransaction(SPISettings)>
    2cfa:	ef a5       	ldd	r30, Y+47	; 0x2f
    2cfc:	f8 a9       	ldd	r31, Y+48	; 0x30
    2cfe:	90 81       	ld	r25, Z
    2d00:	8c a9       	ldd	r24, Y+52	; 0x34
    2d02:	80 95       	com	r24
    2d04:	89 23       	and	r24, r25
    2d06:	80 83       	st	Z, r24
    2d08:	de cf       	rjmp	.-68     	; 0x2cc6 <Adafruit_SSD1306::invertDisplay(bool)+0x1e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1167
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    2d0a:	ef a5       	ldd	r30, Y+47	; 0x2f
    2d0c:	f8 a9       	ldd	r31, Y+48	; 0x30
    2d0e:	80 81       	ld	r24, Z
    2d10:	9c a9       	ldd	r25, Y+52	; 0x34
    2d12:	89 2b       	or	r24, r25
    2d14:	80 83       	st	Z, r24
    2d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	21 f0       	breq	.+8      	; 0x2d26 <Adafruit_SSD1306::invertDisplay(bool)+0x7e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1168
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1167
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    2d24:	3f cd       	rjmp	.-1410   	; 0x27a4 <SPIClass::endTransaction()>
    2d26:	df 91       	pop	r29
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:1168
}
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	08 95       	ret

00002d2e <getTemp()>:
getTemp():
    2d2e:	cf 92       	push	r12
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:501
    upButton.update();
    downButton.update();
  }
}

float getTemp(){
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	c4 e6       	ldi	r28, 0x64	; 100
    2d3e:	c1 2c       	mov	r12, r1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:502
  float t = 0;
    2d40:	d1 2c       	mov	r13, r1
    2d42:	76 01       	movw	r14, r12
analogRead():
    2d44:	df e0       	ldi	r29, 0x0F	; 15
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    2d46:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2d48:	d0 93 06 06 	sts	0x0606, r29	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    2d4c:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2d50:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
    2d54:	80 ff       	sbrs	r24, 0
    2d56:	fc cf       	rjmp	.-8      	; 0x2d50 <getTemp()+0x22>
    2d58:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
    2d5c:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
getTemp():
    2d60:	07 2e       	mov	r0, r23
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:504
  for (byte i = 0; i < 100; i++){ //Poll temp reading 100 times
    t = t + analogRead(temp);
    2d62:	00 0c       	add	r0, r0
    2d64:	88 0b       	sbc	r24, r24
    2d66:	99 0b       	sbc	r25, r25
    2d68:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    2d6c:	9b 01       	movw	r18, r22
    2d6e:	ac 01       	movw	r20, r24
    2d70:	c7 01       	movw	r24, r14
    2d72:	b6 01       	movw	r22, r12
    2d74:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <__addsf3>
    2d78:	6b 01       	movw	r12, r22
    2d7a:	7c 01       	movw	r14, r24
    2d7c:	c1 50       	subi	r28, 0x01	; 1
    2d7e:	21 f7       	brne	.-56     	; 0x2d48 <getTemp()+0x1a>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:503
  }
}

float getTemp(){
  float t = 0;
  for (byte i = 0; i < 100; i++){ //Poll temp reading 100 times
    2d80:	20 e0       	ldi	r18, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:506
    t = t + analogRead(temp);
  }
  return ((t / 100) * -1.46) + 434; //Average, convert to C, and return
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	48 ec       	ldi	r20, 0xC8	; 200
    2d86:	52 e4       	ldi	r21, 0x42	; 66
    2d88:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__divsf3>
    2d8c:	28 e4       	ldi	r18, 0x48	; 72
    2d8e:	31 ee       	ldi	r19, 0xE1	; 225
    2d90:	4a eb       	ldi	r20, 0xBA	; 186
    2d92:	5f eb       	ldi	r21, 0xBF	; 191
    2d94:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	49 ed       	ldi	r20, 0xD9	; 217
    2d9e:	53 e4       	ldi	r21, 0x43	; 67
    2da0:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <__addsf3>
    2da4:	df 91       	pop	r29
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:507
}
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	ff 90       	pop	r15
    2dac:	ef 90       	pop	r14
    2dae:	df 90       	pop	r13
    2db0:	cf 90       	pop	r12
    2db2:	08 95       	ret

00002db4 <Bounce2::Button::pressed() const>:
pressed():
    2db4:	fc 01       	movw	r30, r24
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:320
  };

    /*!
    @brief Returns true if the button was physically pressed          
*/
  inline bool pressed() const {
    2db6:	90 85       	ldd	r25, Z+8	; 0x08
    2db8:	92 ff       	sbrs	r25, 2
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:321
    return changed() && isPressed();
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <Bounce2::Button::pressed() const+0x10>
_ZNK9Debouncer12getStateFlagEh():
    2dbc:	91 70       	andi	r25, 0x01	; 1
pressed():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:321

    /*!
    @brief Returns true if the button was physically pressed          
*/
  inline bool pressed() const {
    return changed() && isPressed();
    2dc0:	22 89       	ldd	r18, Z+18	; 0x12
    2dc2:	29 13       	cpse	r18, r25
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	08 95       	ret

00002dc8 <Bounce::setPinMode(int, int)>:
setPinMode():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:322
  };
    2dc8:	86 2f       	mov	r24, r22
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:258


	uint8_t pin;

	virtual bool readCurrentState() { return digitalRead(pin); }
	virtual void setPinMode(int pin, int mode) {
    2dca:	64 2f       	mov	r22, r20
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:262
#if defined(ARDUINO_ARCH_STM32F1)
		pinMode(pin, (WiringPinMode)mode);
#else
		pinMode(pin, mode);
    2dcc:	0c 94 13 07 	jmp	0xe26	; 0xe26 <pinMode>

00002dd0 <Bounce::readCurrentState()>:
readCurrentState():
    2dd0:	0f 93       	push	r16
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:257
protected:


	uint8_t pin;

	virtual bool readCurrentState() { return digitalRead(pin); }
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	81 89       	ldd	r24, Z+17	; 0x11
digitalRead():
    2dda:	89 32       	cpi	r24, 0x29	; 41
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:230
}

uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    2ddc:	b8 f4       	brcc	.+46     	; 0x2e0c <Bounce::readCurrentState()+0x3c>
    2dde:	08 2f       	mov	r16, r24
    2de0:	10 e0       	ldi	r17, 0x00	; 0
    2de2:	f8 01       	movw	r30, r16
    2de4:	e3 50       	subi	r30, 0x03	; 3
    2de6:	f0 47       	sbci	r31, 0x70	; 112
    2de8:	c0 81       	ld	r28, Z
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:231
  if (bit_mask == NOT_A_PIN)
    2dea:	cf 3f       	cpi	r28, 0xFF	; 255
    2dec:	79 f0       	breq	.+30     	; 0x2e0c <Bounce::readCurrentState()+0x3c>
turnOffPWM():
    2dee:	0e 94 17 07 	call	0xe2e	; 0xe2e <turnOffPWM.part.0>
digitalRead():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:239
  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
    2df2:	f8 01       	movw	r30, r16
    2df4:	ea 5d       	subi	r30, 0xDA	; 218
    2df6:	ff 46       	sbci	r31, 0x6F	; 111
    2df8:	e0 81       	ld	r30, Z
    2dfa:	80 e2       	ldi	r24, 0x20	; 32
    2dfc:	e8 9f       	mul	r30, r24
    2dfe:	f0 01       	movw	r30, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:242

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask)
    2e04:	80 85       	ldd	r24, Z+8	; 0x08
    2e06:	c8 23       	and	r28, r24
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <Bounce::readCurrentState()+0x3e>
readCurrentState():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:232
uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN)
    return LOW;
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:257
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	08 95       	ret

00002e16 <Debouncer::update() [clone .constprop.40]>:
update():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:32
#else
    previous_millis = millis();
#endif
}

bool Debouncer::update()
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	ec 01       	movw	r28, r24
_ZN9Debouncer14unsetStateFlagEh():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:74

// Note : this is private as it migh change in the futur
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
    2e28:	88 85       	ldd	r24, Y+8	; 0x08
    2e2a:	8b 7f       	andi	r24, 0xFB	; 251
    2e2c:	88 87       	std	Y+8, r24	; 0x08
update():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:76
    }
    
    
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = readCurrentState();
    2e2e:	ce 01       	movw	r24, r28
    2e30:	cf df       	rcall	.-98     	; 0x2dd0 <Bounce::readCurrentState()>
    2e32:	18 2f       	mov	r17, r24
_ZNK9Debouncer12getStateFlagEh():
    2e34:	88 85       	ldd	r24, Y+8	; 0x08
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
    2e36:	86 95       	lsr	r24
    2e38:	81 70       	andi	r24, 0x01	; 1
update():
    2e3a:	18 17       	cp	r17, r24
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:80
    

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
    2e3c:	b9 f0       	breq	.+46     	; 0x2e6c <Debouncer::update() [clone .constprop.40]+0x56>
    2e3e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:81
        previous_millis = millis();
    2e42:	6a 83       	std	Y+2, r22	; 0x02
    2e44:	7b 83       	std	Y+3, r23	; 0x03
    2e46:	8c 83       	std	Y+4, r24	; 0x04
    2e48:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
    2e4a:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:75
// Note : this is private as it migh change in the futur
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	89 27       	eor	r24, r25
    2e50:	88 87       	std	Y+8, r24	; 0x08
_ZNK9Debouncer12getStateFlagEh():
    2e52:	88 85       	ldd	r24, Y+8	; 0x08
update():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
  inline bool getStateFlag(const uint8_t flag) const {return((state & flag) != 0);}
    2e54:	82 fb       	bst	r24, 2
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:100
    
#endif

		return  changed(); 

}
    2e56:	88 27       	eor	r24, r24
    2e58:	80 f9       	bld	r24, 0
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	df 90       	pop	r13
    2e68:	cf 90       	pop	r12
    2e6a:	08 95       	ret
    2e6c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:84
    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
        previous_millis = millis();
         toggleStateFlag(UNSTABLE_STATE);
    } else
        if ( millis() - previous_millis >= interval_millis ) {
    2e70:	ca 80       	ldd	r12, Y+2	; 0x02
    2e72:	db 80       	ldd	r13, Y+3	; 0x03
    2e74:	ec 80       	ldd	r14, Y+4	; 0x04
    2e76:	fd 80       	ldd	r15, Y+5	; 0x05
    2e78:	ab 01       	movw	r20, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	4c 19       	sub	r20, r12
    2e7e:	5d 09       	sbc	r21, r13
    2e80:	6e 09       	sbc	r22, r14
    2e82:	7f 09       	sbc	r23, r15
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	a0 e0       	ldi	r26, 0x00	; 0
    2e8c:	48 17       	cp	r20, r24
    2e8e:	59 07       	cpc	r21, r25
    2e90:	6a 07       	cpc	r22, r26
    2e92:	7b 07       	cpc	r23, r27
    2e94:	f0 f2       	brcs	.-68     	; 0x2e52 <Debouncer::update() [clone .constprop.40]+0x3c>
_ZNK9Debouncer12getStateFlagEh():
    2e96:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:76
    2e98:	81 70       	andi	r24, 0x01	; 1
update():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:87
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if (currentState != getStateFlag(DEBOUNCED_STATE) ) {
    2e9a:	18 17       	cp	r17, r24
    2e9c:	d1 f2       	breq	.-76     	; 0x2e52 <Debouncer::update() [clone .constprop.40]+0x3c>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:88
                previous_millis = millis();
    2e9e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
    2ea2:	6a 83       	std	Y+2, r22	; 0x02
    2ea4:	7b 83       	std	Y+3, r23	; 0x03
    2ea6:	8c 83       	std	Y+4, r24	; 0x04
    2ea8:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:75
// Note : this is private as it migh change in the futur
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)     {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag)    {state ^= flag;}
    2eaa:	88 85       	ldd	r24, Y+8	; 0x08
    2eac:	91 e0       	ldi	r25, 0x01	; 1
    2eae:	89 27       	eor	r24, r25
_ZN9Debouncer12setStateFlagEh():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:73
  static const uint8_t CHANGED_STATE   = 0b00000100; // The DEBOUNCED_STATE has changed since last update()

// Note : this is private as it migh change in the futur
private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)       {state |= flag;}
    2eb0:	84 60       	ori	r24, 0x04	; 4
    2eb2:	88 87       	std	Y+8, r24	; 0x08
changeState():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:114
}

inline void Debouncer::changeState() {
	toggleStateFlag(DEBOUNCED_STATE);
	setStateFlag(CHANGED_STATE) ;
	durationOfPreviousState = millis() - stateChangeLastTime;
    2eb4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
    2eb8:	09 85       	ldd	r16, Y+9	; 0x09
    2eba:	1a 85       	ldd	r17, Y+10	; 0x0a
    2ebc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ebe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ec0:	60 1b       	sub	r22, r16
    2ec2:	71 0b       	sbc	r23, r17
    2ec4:	82 0b       	sbc	r24, r18
    2ec6:	93 0b       	sbc	r25, r19
    2ec8:	6d 87       	std	Y+13, r22	; 0x0d
    2eca:	7e 87       	std	Y+14, r23	; 0x0e
    2ecc:	8f 87       	std	Y+15, r24	; 0x0f
    2ece:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:115
	stateChangeLastTime = millis();
    2ed0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
    2ed4:	69 87       	std	Y+9, r22	; 0x09
    2ed6:	7a 87       	std	Y+10, r23	; 0x0a
    2ed8:	8b 87       	std	Y+11, r24	; 0x0b
    2eda:	9c 87       	std	Y+12, r25	; 0x0c
    2edc:	ba cf       	rjmp	.-140    	; 0x2e52 <Debouncer::update() [clone .constprop.40]+0x3c>

00002ede <Debouncer::begin() [clone .constprop.3]>:
begin():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:19
void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
}

void Debouncer::begin() {
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	ec 01       	movw	r28, r24
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:20
	 state = 0;
    2ee4:	18 86       	std	Y+8, r1	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:21
    if (readCurrentState()) {
    2ee6:	74 df       	rcall	.-280    	; 0x2dd0 <Bounce::readCurrentState()>
    2ee8:	88 23       	and	r24, r24
    2eea:	19 f0       	breq	.+6      	; 0x2ef2 <Debouncer::begin() [clone .constprop.3]+0x14>
_ZN9Debouncer12setStateFlagEh():
    2eec:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:73
    2eee:	83 60       	ori	r24, 0x03	; 3
    2ef0:	88 87       	std	Y+8, r24	; 0x08
begin():
    2ef2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:28
    }

	#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
    2ef6:	6a 83       	std	Y+2, r22	; 0x02
    2ef8:	7b 83       	std	Y+3, r23	; 0x03
    2efa:	8c 83       	std	Y+4, r24	; 0x04
    2efc:	9d 83       	std	Y+5, r25	; 0x05
    2efe:	df 91       	pop	r29
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:30
#endif
}
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <EERef::operator*() const>:
operator*():
    2f04:	fc 01       	movw	r30, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:52
{
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
    2f06:	80 81       	ld	r24, Z
    2f08:	91 81       	ldd	r25, Z+1	; 0x01
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	ff 27       	eor	r31, r31
    2f0e:	90 fd       	sbrc	r25, 0
    2f10:	06 c0       	rjmp	.+12     	; 0x2f1e <EERef::operator*() const+0x1a>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	94 e1       	ldi	r25, 0x14	; 20
    2f16:	e8 2b       	or	r30, r24
    2f18:	f9 2b       	or	r31, r25
    2f1a:	80 81       	ld	r24, Z
    2f1c:	08 95       	ret
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	93 e1       	ldi	r25, 0x13	; 19
    2f22:	f9 cf       	rjmp	.-14     	; 0x2f16 <EERef::operator*() const+0x12>

00002f24 <nvm_write_byte(unsigned int, unsigned char)>:
nvm_write_byte():
    2f24:	fc 01       	movw	r30, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    2f26:	ff 27       	eor	r31, r31
    2f28:	90 fd       	sbrc	r25, 0
    2f2a:	12 c0       	rjmp	.+36     	; 0x2f50 <nvm_write_byte(unsigned int, unsigned char)+0x2c>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	94 e1       	ldi	r25, 0x14	; 20
    2f30:	e8 2b       	or	r30, r24
    2f32:	f9 2b       	or	r31, r25
    2f34:	60 83       	st	Z, r22
    2f36:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:38
  uint8_t oldSREG = SREG;
    2f38:	f8 94       	cli
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:39
  cli();
    2f3a:	9d e9       	ldi	r25, 0x9D	; 157
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:40
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
    2f3c:	23 e0       	ldi	r18, 0x03	; 3
    2f3e:	94 bf       	out	0x34, r25	; 52
    2f40:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
    2f44:	8f bf       	out	0x3f, r24	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:41
  SREG = oldSREG;
    2f46:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:42
  while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
    2f4a:	81 fd       	sbrc	r24, 1
    2f4c:	fc cf       	rjmp	.-8      	; 0x2f46 <nvm_write_byte(unsigned int, unsigned char)+0x22>
    2f4e:	08 95       	ret
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:44
    ;
}
    2f50:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    2f52:	93 e1       	ldi	r25, 0x13	; 19
    2f54:	ed cf       	rjmp	.-38     	; 0x2f30 <nvm_write_byte(unsigned int, unsigned char)+0xc>

00002f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>:
_ZN5Print5writeEPKc.part.2():
    2f56:	fc 01       	movw	r30, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.h:49
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    2f58:	01 90       	ld	r0, Z+
    2f5a:	00 20       	and	r0, r0
    2f5c:	e9 f7       	brne	.-6      	; 0x2f58 <Print::write(char const*) [clone .part.2] [clone .constprop.27]+0x2>
    2f5e:	31 97       	sbiw	r30, 0x01	; 1
    2f60:	af 01       	movw	r20, r30
    2f62:	48 1b       	sub	r20, r24
    2f64:	59 0b       	sbc	r21, r25
    2f66:	bc 01       	movw	r22, r24
    2f68:	87 e9       	ldi	r24, 0x97	; 151
    2f6a:	98 e2       	ldi	r25, 0x28	; 40
    2f6c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <Print::write(unsigned char const*, unsigned int)>

00002f70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]>:
printNumber():
    2f70:	8f 92       	push	r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:245
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    2f72:	9f 92       	push	r9
    2f74:	af 92       	push	r10
    2f76:	bf 92       	push	r11
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	a1 97       	sbiw	r28, 0x21	; 33
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	de bf       	out	0x3e, r29	; 62
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:250
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2f8a:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:253

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2f8c:	42 30       	cpi	r20, 0x02	; 2
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]+0x22>
    2f90:	4a e0       	ldi	r20, 0x0A	; 10
    2f92:	8e 01       	movw	r16, r28
    2f94:	0f 5d       	subi	r16, 0xDF	; 223
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:257

  do
  {
    char c = n % base;
    2f98:	84 2e       	mov	r8, r20
    2f9a:	91 2c       	mov	r9, r1
    2f9c:	b1 2c       	mov	r11, r1
    2f9e:	a1 2c       	mov	r10, r1
    2fa0:	a5 01       	movw	r20, r10
    2fa2:	94 01       	movw	r18, r8
    2fa4:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__udivmodsi4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:258
    n /= base;
    2fa8:	e6 2f       	mov	r30, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:260

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2faa:	b9 01       	movw	r22, r18
    2fac:	ca 01       	movw	r24, r20
    2fae:	ea 30       	cpi	r30, 0x0A	; 10
    2fb0:	d4 f4       	brge	.+52     	; 0x2fe6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]+0x76>
    2fb2:	e0 5d       	subi	r30, 0xD0	; 208
    2fb4:	d8 01       	movw	r26, r16
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:261
  } while (n);
    2fb6:	ee 93       	st	-X, r30
    2fb8:	8d 01       	movw	r16, r26
    2fba:	23 2b       	or	r18, r19
    2fbc:	24 2b       	or	r18, r20
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.h:48
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2fbe:	25 2b       	or	r18, r21
    2fc0:	79 f7       	brne	.-34     	; 0x2fa0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]+0x30>
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
write():
    2fc6:	10 97       	sbiw	r26, 0x00	; 0
    2fc8:	11 f0       	breq	.+4      	; 0x2fce <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]+0x5e>
    2fca:	cd 01       	movw	r24, r26
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:264

  return write(str);
}
    2fcc:	c4 df       	rcall	.-120    	; 0x2f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>
printNumber():
    2fce:	a1 96       	adiw	r28, 0x21	; 33
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	bf 90       	pop	r11
    2fde:	af 90       	pop	r10
    2fe0:	9f 90       	pop	r9
    2fe2:	8f 90       	pop	r8
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:260
  do
  {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2fe4:	08 95       	ret
    2fe6:	e9 5c       	subi	r30, 0xC9	; 201
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:151
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    2fe8:	e5 cf       	rjmp	.-54     	; 0x2fb4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]+0x44>

00002fea <Print::println(char const*) [clone .constprop.24]>:
println():
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
write():
    2fee:	b3 df       	rcall	.-154    	; 0x2f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>
    2ff0:	ec 01       	movw	r28, r24
    2ff2:	87 ee       	ldi	r24, 0xE7	; 231
    2ff4:	90 e9       	ldi	r25, 0x90	; 144
    2ff6:	af df       	rcall	.-162    	; 0x2f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>
println():
    2ff8:	8c 0f       	add	r24, r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:156
{
  size_t n = print(c);
  n += println();
  return n;
}
    2ffa:	9d 1f       	adc	r25, r29
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>:
printFloat():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:266
  } while (n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
    3002:	4f 92       	push	r4
    3004:	5f 92       	push	r5
    3006:	6f 92       	push	r6
    3008:	7f 92       	push	r7
    300a:	8f 92       	push	r8
    300c:	9f 92       	push	r9
    300e:	af 92       	push	r10
    3010:	bf 92       	push	r11
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	6b 01       	movw	r12, r22
    3022:	7c 01       	movw	r14, r24
    3024:	74 2e       	mov	r7, r20
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:270
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
    3026:	ac 01       	movw	r20, r24
    3028:	9b 01       	movw	r18, r22
    302a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__unordsf2>
    302e:	88 23       	and	r24, r24
    3030:	91 f0       	breq	.+36     	; 0x3056 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x54>
write():
    3032:	8a ee       	ldi	r24, 0xEA	; 234
    3034:	90 e9       	ldi	r25, 0x90	; 144
printFloat():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:310
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	df 90       	pop	r13
    3042:	cf 90       	pop	r12
    3044:	bf 90       	pop	r11
    3046:	af 90       	pop	r10
    3048:	9f 90       	pop	r9
    304a:	8f 90       	pop	r8
    304c:	7f 90       	pop	r7
    304e:	6f 90       	pop	r6
    3050:	5f 90       	pop	r5
    3052:	4f 90       	pop	r4
write():
    3054:	80 cf       	rjmp	.-256    	; 0x2f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>
printFloat():
    3056:	46 01       	movw	r8, r12
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:271
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3058:	57 01       	movw	r10, r14
    305a:	e8 94       	clt
    305c:	b7 f8       	bld	r11, 7
    305e:	2f ef       	ldi	r18, 0xFF	; 255
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	5f e7       	ldi	r21, 0x7F	; 127
    3066:	c5 01       	movw	r24, r10
    3068:	b4 01       	movw	r22, r8
    306a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__unordsf2>
    306e:	81 11       	cpse	r24, r1
    3070:	0d c0       	rjmp	.+26     	; 0x308c <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x8a>
    3072:	2f ef       	ldi	r18, 0xFF	; 255
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	5f e7       	ldi	r21, 0x7F	; 127
    307a:	c5 01       	movw	r24, r10
    307c:	b4 01       	movw	r22, r8
    307e:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    3082:	18 16       	cp	r1, r24
    3084:	1c f4       	brge	.+6      	; 0x308c <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x8a>
write():
    3086:	8e ee       	ldi	r24, 0xEE	; 238
    3088:	90 e9       	ldi	r25, 0x90	; 144
    308a:	d5 cf       	rjmp	.-86     	; 0x3036 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x34>
printFloat():
    308c:	2f ef       	ldi	r18, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:272
  if (number > 4294967040.0) return print("ovf");  // constant determined empirically
    308e:	3f ef       	ldi	r19, 0xFF	; 255
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	5f e4       	ldi	r21, 0x4F	; 79
    3094:	c7 01       	movw	r24, r14
    3096:	b6 01       	movw	r22, r12
    3098:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    309c:	18 16       	cp	r1, r24
    309e:	1c f4       	brge	.+6      	; 0x30a6 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0xa4>
write():
    30a0:	82 ef       	ldi	r24, 0xF2	; 242
    30a2:	90 e9       	ldi	r25, 0x90	; 144
    30a4:	c8 cf       	rjmp	.-112    	; 0x3036 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x34>
printFloat():
    30a6:	2f ef       	ldi	r18, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:273
  if (number < -4294967040.0) return print("ovf"); // constant determined empirically
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	5f ec       	ldi	r21, 0xCF	; 207
    30ae:	c7 01       	movw	r24, r14
    30b0:	b6 01       	movw	r22, r12
    30b2:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    30b6:	87 fd       	sbrc	r24, 7
    30b8:	f3 cf       	rjmp	.-26     	; 0x30a0 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x9e>
    30ba:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:276

  // Handle negative numbers
  if (number < 0.0)
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	a9 01       	movw	r20, r18
    30c0:	c7 01       	movw	r24, r14
    30c2:	b6 01       	movw	r22, r12
    30c4:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:268
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
    30c8:	10 e0       	ldi	r17, 0x00	; 0
    30ca:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:276
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print("ovf");  // constant determined empirically
  if (number < -4294967040.0) return print("ovf"); // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
    30cc:	87 ff       	sbrs	r24, 7
    30ce:	0a c0       	rjmp	.+20     	; 0x30e4 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0xe2>
print():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:74
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    30d0:	6d e2       	ldi	r22, 0x2D	; 45
    30d2:	87 e9       	ldi	r24, 0x97	; 151
    30d4:	98 e2       	ldi	r25, 0x28	; 40
    30d6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Adafruit_GFX::write(unsigned char)>
    30da:	8c 01       	movw	r16, r24
printFloat():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:279

  // Handle negative numbers
  if (number < 0.0)
  {
    n += print('-');
    number = -number;
    30dc:	f7 fa       	bst	r15, 7
    30de:	f0 94       	com	r15
    30e0:	f7 f8       	bld	r15, 7
    30e2:	f0 94       	com	r15
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:284
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i)
    30e4:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:283
    n += print('-');
    number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:284
  for (uint8_t i = 0; i < digits; ++i)
    30ec:	9f e3       	ldi	r25, 0x3F	; 63
    30ee:	7c 16       	cp	r7, r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:285
    rounding /= 10.0;
    30f0:	41 f0       	breq	.+16     	; 0x3102 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x100>
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__divsf3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:284
    number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i)
    30fe:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:287
    rounding /= 10.0;

  number += rounding;
    3100:	f6 cf       	rjmp	.-20     	; 0x30ee <Print::printFloat(double, unsigned char) [clone .constprop.14]+0xec>
    3102:	a7 01       	movw	r20, r14
    3104:	96 01       	movw	r18, r12
    3106:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <__addsf3>
    310a:	2b 01       	movw	r4, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:290

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    310c:	3c 01       	movw	r6, r24
    310e:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    3112:	4b 01       	movw	r8, r22
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    3114:	5c 01       	movw	r10, r24
print():
    3116:	4a e0       	ldi	r20, 0x0A	; 10
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:292
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3118:	2b df       	rcall	.-426    	; 0x2f70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]>
printFloat():
    311a:	7c 01       	movw	r14, r24
    311c:	e0 0e       	add	r14, r16
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:295

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    311e:	f1 1e       	adc	r15, r17
    3120:	cc 23       	and	r28, r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:291

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3122:	a9 f1       	breq	.+106    	; 0x318e <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x18c>
    3124:	c5 01       	movw	r24, r10
    3126:	b4 01       	movw	r22, r8
    3128:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    312c:	9b 01       	movw	r18, r22
    312e:	ac 01       	movw	r20, r24
    3130:	c3 01       	movw	r24, r6
    3132:	b2 01       	movw	r22, r4
    3134:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__subsf3>
    3138:	4b 01       	movw	r8, r22
    313a:	5c 01       	movw	r10, r24
write():
    313c:	86 ef       	ldi	r24, 0xF6	; 246
    313e:	90 e9       	ldi	r25, 0x90	; 144
    3140:	0a df       	rcall	.-492    	; 0x2f56 <Print::write(char const*) [clone .part.2] [clone .constprop.27]>
printFloat():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:297
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
  {
    n += print(".");
    3142:	e8 0e       	add	r14, r24
    3144:	f9 1e       	adc	r15, r25
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:301
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3146:	c1 50       	subi	r28, 0x01	; 1
    3148:	10 f1       	brcs	.+68     	; 0x318e <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x18c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:303
  {
    remainder *= 10.0;
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	c5 01       	movw	r24, r10
    3154:	b4 01       	movw	r22, r8
    3156:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    315a:	2b 01       	movw	r4, r22
    315c:	3c 01       	movw	r6, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:304
    unsigned int toPrint = (unsigned int)remainder;
    315e:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
print():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:89
  return print((long)n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long)n, base);
    3162:	4b 01       	movw	r8, r22
    3164:	b1 2c       	mov	r11, r1
    3166:	a1 2c       	mov	r10, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    3168:	4a e0       	ldi	r20, 0x0A	; 10
    316a:	c5 01       	movw	r24, r10
    316c:	b4 01       	movw	r22, r8
    316e:	00 df       	rcall	.-512    	; 0x2f70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]>
printFloat():
    3170:	e8 0e       	add	r14, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:305
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    3172:	f9 1e       	adc	r15, r25
    3174:	c5 01       	movw	r24, r10
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:306
    remainder -= toPrint;
    3176:	b4 01       	movw	r22, r8
    3178:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	c3 01       	movw	r24, r6
    3182:	b2 01       	movw	r22, r4
    3184:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__subsf3>
    3188:	4b 01       	movw	r8, r22
    318a:	5c 01       	movw	r10, r24
    318c:	dc cf       	rjmp	.-72     	; 0x3146 <Print::printFloat(double, unsigned char) [clone .constprop.14]+0x144>
    318e:	c7 01       	movw	r24, r14
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:310
  }

  return n;
}
    3190:	cf 91       	pop	r28
    3192:	1f 91       	pop	r17
    3194:	0f 91       	pop	r16
    3196:	ff 90       	pop	r15
    3198:	ef 90       	pop	r14
    319a:	df 90       	pop	r13
    319c:	cf 90       	pop	r12
    319e:	bf 90       	pop	r11
    31a0:	af 90       	pop	r10
    31a2:	9f 90       	pop	r9
    31a4:	8f 90       	pop	r8
    31a6:	7f 90       	pop	r7
    31a8:	6f 90       	pop	r6
    31aa:	5f 90       	pop	r5
    31ac:	4f 90       	pop	r4
    31ae:	08 95       	ret

000031b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>:
clearDisplay():
    31b0:	20 91 9d 28 	lds	r18, 0x289D	; 0x80289d <display+0x6>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:680
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    31b4:	30 91 9e 28 	lds	r19, 0x289E	; 0x80289e <display+0x7>
    31b8:	c9 01       	movw	r24, r18
    31ba:	07 96       	adiw	r24, 0x07	; 7
    31bc:	97 fd       	sbrc	r25, 7
    31be:	07 96       	adiw	r24, 0x07	; 7
    31c0:	23 e0       	ldi	r18, 0x03	; 3
    31c2:	95 95       	asr	r25
    31c4:	87 95       	ror	r24
    31c6:	2a 95       	dec	r18
    31c8:	e1 f7       	brne	.-8      	; 0x31c2 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]+0x12>
    31ca:	20 91 9b 28 	lds	r18, 0x289B	; 0x80289b <display+0x4>
    31ce:	30 91 9c 28 	lds	r19, 0x289C	; 0x80289c <display+0x5>
    31d2:	82 9f       	mul	r24, r18
    31d4:	a0 01       	movw	r20, r0
    31d6:	83 9f       	mul	r24, r19
    31d8:	50 0d       	add	r21, r0
    31da:	92 9f       	mul	r25, r18
    31dc:	50 0d       	add	r21, r0
    31de:	11 24       	eor	r1, r1
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <display+0x1f>
    31e8:	90 91 b7 28 	lds	r25, 0x28B7	; 0x8028b7 <display+0x20>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:201

  //Go to main menu
  main_menu();
}

void main_menu() {
    31ec:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <memset>

000031f0 <main_menu()>:
main_menu():
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	cd b7       	in	r28, 0x3d	; 61
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:203
  
  int x = 0;  //Display change counter
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	63 97       	sbiw	r28, 0x13	; 19
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    31fa:	cd bf       	out	0x3d, r28	; 61
    31fc:	de bf       	out	0x3e, r29	; 62
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:49
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    31fe:	d1 2c       	mov	r13, r1
    3200:	c1 2c       	mov	r12, r1
setTextSize():
    3202:	33 24       	eor	r3, r3
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3204:	33 94       	inc	r3
_ZN5EERefC2Ei():
    3206:	88 24       	eor	r8, r8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3208:	83 94       	inc	r8
    320a:	91 2c       	mov	r9, r1
_ZN12Adafruit_GFX9setCursorEii():
    320c:	73 e0       	ldi	r23, 0x03	; 3
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    320e:	a7 2e       	mov	r10, r23
    3210:	b1 2c       	mov	r11, r1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:206
  int y = 200; //Display change max (modulused below)
  while(1) {
    upButton.update();
    3212:	e4 e0       	ldi	r30, 0x04	; 4
    3214:	6e 2e       	mov	r6, r30
    3216:	71 2c       	mov	r7, r1
    3218:	ff e5       	ldi	r31, 0x5F	; 95
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:207
    downButton.update();
    321a:	4f 2e       	mov	r4, r31
    321c:	51 2c       	mov	r5, r1
main_menu():
    321e:	88 e7       	ldi	r24, 0x78	; 120
    3220:	98 e2       	ldi	r25, 0x28	; 40
    3222:	f9 dd       	rcall	.-1038   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    3224:	85 e6       	ldi	r24, 0x65	; 101
    3226:	98 e2       	ldi	r25, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:209
    analogWrite(mosfet,0); //Ensure MOSFET off
    display.clearDisplay();
    3228:	f6 dd       	rcall	.-1044   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
analogWrite():
    322a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	0e 94 80 07 	call	0xf00	; 0xf00 <analogWrite.part.3.constprop.11>
main_menu():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    3232:	be df       	rcall	.-132    	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
setTextSize():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:211
    display.setTextSize(1);
    display.drawRoundRect( 0, 0, 83, 32, 2, SSD1306_WHITE);
    3234:	30 92 ab 28 	sts	0x28AB, r3	; 0x8028ab <display+0x14>
    3238:	30 92 ac 28 	sts	0x28AC, r3	; 0x8028ac <display+0x15>
main_menu():
    323c:	63 e5       	ldi	r22, 0x53	; 83
    323e:	70 e0       	ldi	r23, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:214

    //Button Logic
    if(downButton.pressed() || upButton.pressed()) { //If either button pressed
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	31 d9       	rcall	.-3486   	; 0x24a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>
    3246:	85 e6       	ldi	r24, 0x65	; 101
    3248:	98 e2       	ldi	r25, 0x28	; 40
    324a:	b4 dd       	rcall	.-1176   	; 0x2db4 <Bounce2::Button::pressed() const>
    324c:	81 11       	cpse	r24, r1
    324e:	06 c0       	rjmp	.+12     	; 0x325c <main_menu()+0x6c>
    3250:	88 e7       	ldi	r24, 0x78	; 120
    3252:	98 e2       	ldi	r25, 0x28	; 40
    3254:	af dd       	rcall	.-1186   	; 0x2db4 <Bounce2::Button::pressed() const>
    3256:	88 23       	and	r24, r24
    3258:	09 f4       	brne	.+2      	; 0x325c <main_menu()+0x6c>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:215
      delay(100);
    325a:	88 c4       	rjmp	.+2320   	; 0x3b6c <main_menu()+0x97c>
    325c:	64 e6       	ldi	r22, 0x64	; 100
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:218
      //upButton.update();
      //downButton.update();
      if(downButton.pressed() && upButton.pressed()) { //If both buttons pressed
    3268:	85 e6       	ldi	r24, 0x65	; 101
    326a:	98 e2       	ldi	r25, 0x28	; 40
    326c:	a3 dd       	rcall	.-1210   	; 0x2db4 <Bounce2::Button::pressed() const>
    326e:	88 23       	and	r24, r24
    3270:	09 f4       	brne	.+2      	; 0x3274 <main_menu()+0x84>
    3272:	4c c4       	rjmp	.+2200   	; 0x3b0c <main_menu()+0x91c>
    3274:	88 e7       	ldi	r24, 0x78	; 120
    3276:	98 e2       	ldi	r25, 0x28	; 40
    3278:	9d dd       	rcall	.-1222   	; 0x2db4 <Bounce2::Button::pressed() const>
    327a:	88 23       	and	r24, r24
    327c:	09 f4       	brne	.+2      	; 0x3280 <main_menu()+0x90>
    327e:	46 c4       	rjmp	.+2188   	; 0x3b0c <main_menu()+0x91c>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:219
        if(!heat(maxTempArray[maxTempIndex])) {
    3280:	e0 91 5f 28 	lds	r30, 0x285F	; 0x80285f <maxTempIndex>
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	ec 50       	subi	r30, 0x0C	; 12
    3288:	f0 47       	sbci	r31, 0x70	; 112
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:270
  }
}

bool heat(byte maxTemp) {
  //Heating Display
  display.clearDisplay();
    328a:	10 81       	ld	r17, Z
heat():
    328c:	91 df       	rcall	.-222    	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	80 93 ab 28 	sts	0x28AB, r24	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    3294:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    3298:	86 e1       	ldi	r24, 0x16	; 22
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    32a0:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    32ac:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
heat():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:273
  display.setTextSize(2);
  display.setCursor(22,4);
  display.print(F("HEATING"));
    32b0:	82 ee       	ldi	r24, 0xE2	; 226
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	80 93 ab 28 	sts	0x28AB, r24	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    32be:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    32c2:	84 e3       	ldi	r24, 0x34	; 52
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    32ca:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    32ce:	88 e1       	ldi	r24, 0x18	; 24
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    32d6:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
print():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:79
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long)b, base);
    32da:	61 2f       	mov	r22, r17
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    32e2:	4a e0       	ldi	r20, 0x0A	; 10
    32e4:	45 de       	rcall	.-886    	; 0x2f70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]>
heat():
    32e6:	80 ee       	ldi	r24, 0xE0	; 224
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:277
  display.setTextSize(1);
  display.setCursor(52,24);
  display.print(maxTemp);
  display.print(F("C"));
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    32ee:	b8 db       	rcall	.-2192   	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:278
  display.display();
    32f0:	68 eb       	ldi	r22, 0xB8	; 184
    32f2:	7b e0       	ldi	r23, 0x0B	; 11
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:279
  delay(3000);
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
    32fc:	61 2f       	mov	r22, r17
    32fe:	70 e0       	ldi	r23, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:286
  //Heater Control Variables
  /*  Heater follows industry reflow graph. Slow build-up to 'warmUp' temp. Rapid ascent
   *  to 'maxTemp'. Then descent to room temperature. 
   */
  //byte maxTemp; //Declared in function call
  byte maxPWM = 0.70 * maxTemp; //Temperatures (in PWM / 255) influenced by paste temperature
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    3308:	6b 83       	std	Y+3, r22	; 0x03
    330a:	7c 83       	std	Y+4, r23	; 0x04
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	23 e3       	ldi	r18, 0x33	; 51
    3312:	33 e3       	ldi	r19, 0x33	; 51
    3314:	43 e3       	ldi	r20, 0x33	; 51
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    331c:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    3320:	26 2e       	mov	r2, r22
    3322:	20 e0       	ldi	r18, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:287
  byte warmUpTemp = 0.75 * maxTemp;
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e4       	ldi	r20, 0x40	; 64
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	6b 81       	ldd	r22, Y+3	; 0x03
    332c:	7c 81       	ldd	r23, Y+4	; 0x04
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3336:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:288
  byte warmUpPWM = 0.72 * warmUpTemp;
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    3344:	69 87       	std	Y+9, r22	; 0x09
    3346:	7a 87       	std	Y+10, r23	; 0x0a
    3348:	8b 87       	std	Y+11, r24	; 0x0b
    334a:	9c 87       	std	Y+12, r25	; 0x0c
    334c:	2c ee       	ldi	r18, 0xEC	; 236
    334e:	31 e5       	ldi	r19, 0x51	; 81
    3350:	48 e3       	ldi	r20, 0x38	; 56
    3352:	5f e3       	ldi	r21, 0x3F	; 63
    3354:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:292
  float t; //Used to store current temperature
  float v; //Used to store current voltage
  byte pwmVal = 0; //PWM Value applied to MOSFET
  unsigned long eTime = (millis() / 1000) + (8*60); //Used to store the end time of the heating process, limited to 8 mins
    3358:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    335c:	6f 87       	std	Y+15, r22	; 0x0f
    335e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
    3362:	28 ee       	ldi	r18, 0xE8	; 232
    3364:	33 e0       	ldi	r19, 0x03	; 3
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__udivmodsi4>
    336e:	da 01       	movw	r26, r20
    3370:	c9 01       	movw	r24, r18
    3372:	80 52       	subi	r24, 0x20	; 32
    3374:	9e 4f       	sbci	r25, 0xFE	; 254
    3376:	af 4f       	sbci	r26, 0xFF	; 255
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	88 8b       	std	Y+16, r24	; 0x10
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:295

  //Other control variables
  int x = 0;  //Heat Animate Counter
    337c:	99 8b       	std	Y+17, r25	; 0x11
    337e:	aa 8b       	std	Y+18, r26	; 0x12
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:291
  byte maxPWM = 0.70 * maxTemp; //Temperatures (in PWM / 255) influenced by paste temperature
  byte warmUpTemp = 0.75 * maxTemp;
  byte warmUpPWM = 0.72 * warmUpTemp;
  float t; //Used to store current temperature
  float v; //Used to store current voltage
  byte pwmVal = 0; //PWM Value applied to MOSFET
    3380:	bb 8b       	std	Y+19, r27	; 0x13
main_menu():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    3382:	1f 82       	std	Y+7, r1	; 0x07
    3384:	18 86       	std	Y+8, r1	; 0x08
    3386:	31 2c       	mov	r3, r1
_ZN12Adafruit_GFX9setCursorEii():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:300
  int x = 0;  //Heat Animate Counter
  int y = 80; //Heat Animate max (modulused below)
  
  while(1) {

    upButton.update();
    3388:	58 e1       	ldi	r21, 0x18	; 24
    338a:	c5 2e       	mov	r12, r21
    338c:	d1 2c       	mov	r13, r1
heat():
    338e:	88 e7       	ldi	r24, 0x78	; 120
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:301
    downButton.update();
    3390:	98 e2       	ldi	r25, 0x28	; 40
    3392:	41 dd       	rcall	.-1406   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    3394:	85 e6       	ldi	r24, 0x65	; 101
    3396:	98 e2       	ldi	r25, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:304
    
    //Button Control
    if(downButton.pressed() && upButton.pressed()) {
    3398:	3e dd       	rcall	.-1412   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    339a:	85 e6       	ldi	r24, 0x65	; 101
    339c:	98 e2       	ldi	r25, 0x28	; 40
    339e:	0a dd       	rcall	.-1516   	; 0x2db4 <Bounce2::Button::pressed() const>
    33a0:	88 23       	and	r24, r24
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <main_menu()+0x1b6>
    33a4:	8d c0       	rjmp	.+282    	; 0x34c0 <main_menu()+0x2d0>
    33a6:	88 e7       	ldi	r24, 0x78	; 120
    33a8:	98 e2       	ldi	r25, 0x28	; 40
    33aa:	04 dd       	rcall	.-1528   	; 0x2db4 <Bounce2::Button::pressed() const>
    33ac:	88 23       	and	r24, r24
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <main_menu()+0x1c2>
    33b0:	87 c0       	rjmp	.+270    	; 0x34c0 <main_menu()+0x2d0>
analogWrite():
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	0e 94 80 07 	call	0xf00	; 0xf00 <analogWrite.part.3.constprop.11>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:370
}

void cancelledPB() { //Cancelled via push button

  //Update Display
  display.clearDisplay();
    33ba:	fa de       	rcall	.-524    	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
    33bc:	64 e5       	ldi	r22, 0x54	; 84
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:371
  display.drawRoundRect( 22, 0, 84, 32, 2, SSD1306_WHITE );
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	86 e1       	ldi	r24, 0x16	; 22
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	71 d8       	rcall	.-3870   	; 0x24a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>
_ZN12Adafruit_GFX9setCursorEii():
    33c6:	29 e1       	ldi	r18, 0x19	; 25
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    33c8:	a2 2e       	mov	r10, r18
    33ca:	b1 2c       	mov	r11, r1
    33cc:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    33d0:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
    33d4:	34 e0       	ldi	r19, 0x04	; 4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    33d6:	c3 2e       	mov	r12, r19
    33d8:	d1 2c       	mov	r13, r1
    33da:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
    33de:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
cancelledPB():
    33e2:	8e ee       	ldi	r24, 0xEE	; 238
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:373
  display.setCursor(25,4);
  display.print(F("  CANCELLED"));
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    33ea:	ee 24       	eor	r14, r14
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:374
  display.drawLine( 25, 12, 103, 12, SSD1306_WHITE );
    33ec:	e3 94       	inc	r14
    33ee:	f1 2c       	mov	r15, r1
    33f0:	0c e0       	ldi	r16, 0x0C	; 12
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	27 e6       	ldi	r18, 0x67	; 103
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	4c e0       	ldi	r20, 0x0C	; 12
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	69 e1       	ldi	r22, 0x19	; 25
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	87 e9       	ldi	r24, 0x97	; 151
    3402:	98 e2       	ldi	r25, 0x28	; 40
    3404:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
_ZN12Adafruit_GFX9setCursorEii():
    3408:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    340c:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
    3410:	8e e0       	ldi	r24, 0x0E	; 14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    3418:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:376
  display.setCursor(25,14);
  display.println(" Push button");
    341c:	88 ef       	ldi	r24, 0xF8	; 248
    341e:	90 e9       	ldi	r25, 0x90	; 144
    3420:	e4 dd       	rcall	.-1080   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3422:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3426:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    342a:	86 e1       	ldi	r24, 0x16	; 22
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    3432:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:378
  display.setCursor(25,22);
  display.println("  to return");
    3436:	85 e0       	ldi	r24, 0x05	; 5
    3438:	91 e9       	ldi	r25, 0x91	; 145
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    343a:	d7 dd       	rcall	.-1106   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
setTextSize():
    343c:	13 e0       	ldi	r17, 0x03	; 3
    343e:	10 93 ab 28 	sts	0x28AB, r17	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    3442:	10 93 ac 28 	sts	0x28AC, r17	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3446:	85 e0       	ldi	r24, 0x05	; 5
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    344e:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3452:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
    3456:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:381
  display.setTextSize(3);
  display.setCursor(5,4);
  display.print(F("!"));
    345a:	8c ee       	ldi	r24, 0xEC	; 236
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    3462:	10 93 ab 28 	sts	0x28AB, r17	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    3466:	10 93 ac 28 	sts	0x28AC, r17	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    346a:	8c e6       	ldi	r24, 0x6C	; 108
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    3472:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3476:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
    347a:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:384
  display.setTextSize(3);
  display.setCursor(108,4);
  display.print(F("!"));
    347e:	8a ee       	ldi	r24, 0xEA	; 234
    3480:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    3482:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
    3486:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    3488:	80 93 ab 28 	sts	0x28AB, r24	; 0x8028ab <display+0x14>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:386
  display.setTextSize(1);
  display.display();
    348c:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <display+0x15>
cancelledPB():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:387
  delay(50);
    3490:	e7 da       	rcall	.-2610   	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
    3492:	62 e3       	ldi	r22, 0x32	; 50
    3494:	70 e0       	ldi	r23, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:390

  //Wait to return on any button press
  while(!downButton.pressed() && !upButton.pressed()) { 
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
    349e:	85 e6       	ldi	r24, 0x65	; 101
    34a0:	98 e2       	ldi	r25, 0x28	; 40
    34a2:	88 dc       	rcall	.-1776   	; 0x2db4 <Bounce2::Button::pressed() const>
    34a4:	81 11       	cpse	r24, r1
    34a6:	bd c0       	rjmp	.+378    	; 0x3622 <main_menu()+0x432>
    34a8:	88 e7       	ldi	r24, 0x78	; 120
    34aa:	98 e2       	ldi	r25, 0x28	; 40
    34ac:	83 dc       	rcall	.-1786   	; 0x2db4 <Bounce2::Button::pressed() const>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:391
    upButton.update();
    34ae:	81 11       	cpse	r24, r1
    34b0:	b8 c0       	rjmp	.+368    	; 0x3622 <main_menu()+0x432>
    34b2:	88 e7       	ldi	r24, 0x78	; 120
    34b4:	98 e2       	ldi	r25, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:392
    downButton.update(); 
    34b6:	af dc       	rcall	.-1698   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    34b8:	85 e6       	ldi	r24, 0x65	; 101
    34ba:	98 e2       	ldi	r25, 0x28	; 40
    34bc:	ac dc       	rcall	.-1704   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    34be:	ef cf       	rjmp	.-34     	; 0x349e <main_menu()+0x2ae>
heat():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:310
      analogWrite(mosfet, 0);
      return 0;
    }

    //Check Heating not taken more than 8 minutes
    if(millis() / 1000 > eTime) {
    34c0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <millis>
    34c4:	28 ee       	ldi	r18, 0xE8	; 232
    34c6:	33 e0       	ldi	r19, 0x03	; 3
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__udivmodsi4>
    34d0:	88 89       	ldd	r24, Y+16	; 0x10
    34d2:	99 89       	ldd	r25, Y+17	; 0x11
    34d4:	aa 89       	ldd	r26, Y+18	; 0x12
    34d6:	bb 89       	ldd	r27, Y+19	; 0x13
    34d8:	82 17       	cp	r24, r18
    34da:	93 07       	cpc	r25, r19
    34dc:	a4 07       	cpc	r26, r20
    34de:	b5 07       	cpc	r27, r21
    34e0:	08 f0       	brcs	.+2      	; 0x34e4 <main_menu()+0x2f4>
    34e2:	e0 c0       	rjmp	.+448    	; 0x36a4 <main_menu()+0x4b4>
analogWrite():
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	0e 94 80 07 	call	0xf00	; 0xf00 <analogWrite.part.3.constprop.11>
main_menu():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:399
}

void cancelledTimer() { //Cancelled via 5 minute Time Limit

  //Initiate Swap Display
  int x = 0;  //Display change counter
    34ec:	b1 2c       	mov	r11, r1
    34ee:	a1 2c       	mov	r10, r1
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    34f0:	09 e1       	ldi	r16, 0x19	; 25
    34f2:	c0 2e       	mov	r12, r16
    34f4:	d1 2c       	mov	r13, r1
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    34f6:	84 e0       	ldi	r24, 0x04	; 4
    34f8:	88 2e       	mov	r8, r24
    34fa:	91 2c       	mov	r9, r1
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    34fc:	93 e0       	ldi	r25, 0x03	; 3
    34fe:	39 2e       	mov	r3, r25
    3500:	22 24       	eor	r2, r2
    3502:	23 94       	inc	r2
cancelledTimer():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:403
  int y = 150; //Display change max (modulused below)

  //Wait to return on any button press
  while(!downButton.pressed() || !downButton.pressed()) {
    3504:	85 e6       	ldi	r24, 0x65	; 101
    3506:	98 e2       	ldi	r25, 0x28	; 40
    3508:	55 dc       	rcall	.-1878   	; 0x2db4 <Bounce2::Button::pressed() const>
    350a:	81 11       	cpse	r24, r1
    350c:	8a c0       	rjmp	.+276    	; 0x3622 <main_menu()+0x432>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:404
    upButton.update();
    350e:	88 e7       	ldi	r24, 0x78	; 120
    3510:	98 e2       	ldi	r25, 0x28	; 40
    3512:	81 dc       	rcall	.-1790   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    3514:	85 e6       	ldi	r24, 0x65	; 101
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:405
    downButton.update();
    3516:	98 e2       	ldi	r25, 0x28	; 40
    3518:	7e dc       	rcall	.-1796   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    351a:	4a de       	rcall	.-876    	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
    351c:	64 e5       	ldi	r22, 0x54	; 84
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:407
    //Update Display
    display.clearDisplay();
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	86 e1       	ldi	r24, 0x16	; 22
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:408
    display.drawRoundRect( 22, 0, 84, 32, 2, SSD1306_WHITE );
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>
_ZN12Adafruit_GFX9setCursorEii():
    3528:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    352c:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    3530:	80 92 a5 28 	sts	0x28A5, r8	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3534:	90 92 a6 28 	sts	0x28A6, r9	; 0x8028a6 <display+0xf>
cancelledTimer():
    3538:	84 ea       	ldi	r24, 0xA4	; 164
    353a:	90 e0       	ldi	r25, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:410
    display.setCursor(25,4);
    display.print(F("  TIMED OUT"));
    353c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3540:	ee 24       	eor	r14, r14
    3542:	e3 94       	inc	r14
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:411
    display.drawLine( 25, 12, 103, 12, SSD1306_WHITE );
    3544:	f1 2c       	mov	r15, r1
    3546:	0c e0       	ldi	r16, 0x0C	; 12
    3548:	10 e0       	ldi	r17, 0x00	; 0
    354a:	27 e6       	ldi	r18, 0x67	; 103
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	4c e0       	ldi	r20, 0x0C	; 12
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	69 e1       	ldi	r22, 0x19	; 25
    3554:	70 e0       	ldi	r23, 0x00	; 0
    3556:	87 e9       	ldi	r24, 0x97	; 151
    3558:	98 e2       	ldi	r25, 0x28	; 40
    355a:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
    355e:	b5 01       	movw	r22, r10
    3560:	0b 2c       	mov	r0, r11
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:414

    //Swap Main Text
    if( x < (y * 0.3)) {
    3562:	00 0c       	add	r0, r0
    3564:	88 0b       	sbc	r24, r24
    3566:	99 0b       	sbc	r25, r25
    3568:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    356c:	2b 01       	movw	r4, r22
    356e:	3c 01       	movw	r6, r24
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	44 e3       	ldi	r20, 0x34	; 52
    3576:	52 e4       	ldi	r21, 0x42	; 66
    3578:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    357c:	87 ff       	sbrs	r24, 7
    357e:	52 c0       	rjmp	.+164    	; 0x3624 <main_menu()+0x434>
_ZN12Adafruit_GFX9setCursorEii():
    3580:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3584:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    3588:	ae e0       	ldi	r26, 0x0E	; 14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	a0 93 a5 28 	sts	0x28A5, r26	; 0x8028a5 <display+0xe>
    3590:	b0 93 a6 28 	sts	0x28A6, r27	; 0x8028a6 <display+0xf>
cancelledTimer():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:416
      display.setCursor(25,14);
      display.println(" Took longer");
    3594:	81 e1       	ldi	r24, 0x11	; 17
    3596:	91 e9       	ldi	r25, 0x91	; 145
    3598:	28 dd       	rcall	.-1456   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
_ZN12Adafruit_GFX9setCursorEii():
    359a:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    359e:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    35a2:	86 e1       	ldi	r24, 0x16	; 22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    35aa:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledTimer():
    35ae:	8e e1       	ldi	r24, 0x1E	; 30
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:418
      display.setCursor(25,22);
      display.println(" than 5 mins");
    35b0:	91 e9       	ldi	r25, 0x91	; 145
    35b2:	1b dd       	rcall	.-1482   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:430
    }
    else {
      display.setCursor(25,14);
      display.println(" Push button");
      display.setCursor(25,22);
      display.println("  to return");
    35b4:	c5 01       	movw	r24, r10
    35b6:	01 96       	adiw	r24, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:432
    }
    x = ( x + 1 ) % y; //Display change increment and modulus
    35b8:	66 e9       	ldi	r22, 0x96	; 150
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__divmodhi4>
    35c0:	5c 01       	movw	r10, r24
setTextSize():
    35c2:	30 92 ab 28 	sts	0x28AB, r3	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    35c6:	30 92 ac 28 	sts	0x28AC, r3	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    35ca:	25 e0       	ldi	r18, 0x05	; 5
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <display+0xc>
    35d2:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <display+0xd>
    35d6:	80 92 a5 28 	sts	0x28A5, r8	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    35da:	90 92 a6 28 	sts	0x28A6, r9	; 0x8028a6 <display+0xf>
cancelledTimer():
    35de:	82 ea       	ldi	r24, 0xA2	; 162
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:436
    
    display.setTextSize(3);
    display.setCursor(5,4);
    display.print(F("!"));
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
    35e6:	30 92 ab 28 	sts	0x28AB, r3	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    35ea:	30 92 ac 28 	sts	0x28AC, r3	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    35ee:	8c e6       	ldi	r24, 0x6C	; 108
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    35f6:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    35fa:	80 92 a5 28 	sts	0x28A5, r8	; 0x8028a5 <display+0xe>
    35fe:	90 92 a6 28 	sts	0x28A6, r9	; 0x8028a6 <display+0xf>
cancelledTimer():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:439
    display.setTextSize(3);
    display.setCursor(108,4);
    display.print(F("!"));
    3602:	80 ea       	ldi	r24, 0xA0	; 160
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    360a:	20 92 ab 28 	sts	0x28AB, r2	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    360e:	20 92 ac 28 	sts	0x28AC, r2	; 0x8028ac <display+0x15>
cancelledTimer():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:441
    display.setTextSize(1);
    display.display();
    3612:	26 da       	rcall	.-2996   	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:442
    delay(50);
    3614:	62 e3       	ldi	r22, 0x32	; 50
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
    3620:	71 cf       	rjmp	.-286    	; 0x3504 <main_menu()+0x314>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:444
  }
  main_menu();
    3622:	e6 dd       	rcall	.-1076   	; 0x31f0 <main_menu()>
    3624:	20 e0       	ldi	r18, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:420
      display.setCursor(25,14);
      display.println(" Took longer");
      display.setCursor(25,22);
      display.println(" than 5 mins");
    }
    else if( x < (y * 0.6)) {
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	44 eb       	ldi	r20, 0xB4	; 180
    362a:	52 e4       	ldi	r21, 0x42	; 66
    362c:	c3 01       	movw	r24, r6
    362e:	b2 01       	movw	r22, r4
    3630:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    3634:	87 ff       	sbrs	r24, 7
    3636:	1c c0       	rjmp	.+56     	; 0x3670 <main_menu()+0x480>
_ZN12Adafruit_GFX9setCursorEii():
    3638:	2c e1       	ldi	r18, 0x1C	; 28
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <display+0xc>
    3640:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <display+0xd>
    3644:	8e e0       	ldi	r24, 0x0E	; 14
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    364c:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledTimer():
    3650:	8b e2       	ldi	r24, 0x2B	; 43
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:422
      display.setCursor(28,14);
      display.println("Try a higher");
    3652:	91 e9       	ldi	r25, 0x91	; 145
    3654:	ca dc       	rcall	.-1644   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
_ZN12Adafruit_GFX9setCursorEii():
    3656:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    365a:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    365e:	86 e1       	ldi	r24, 0x16	; 22
    3660:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3662:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    3666:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledTimer():
    366a:	88 e3       	ldi	r24, 0x38	; 56
    366c:	91 e9       	ldi	r25, 0x91	; 145
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:424
      display.setCursor(25,22);
      display.println(" current PSU");
    366e:	a1 cf       	rjmp	.-190    	; 0x35b2 <main_menu()+0x3c2>
_ZN12Adafruit_GFX9setCursorEii():
    3670:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3674:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    3678:	ae e0       	ldi	r26, 0x0E	; 14
    367a:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    367c:	a0 93 a5 28 	sts	0x28A5, r26	; 0x8028a5 <display+0xe>
    3680:	b0 93 a6 28 	sts	0x28A6, r27	; 0x8028a6 <display+0xf>
cancelledTimer():
    3684:	88 ef       	ldi	r24, 0xF8	; 248
    3686:	90 e9       	ldi	r25, 0x90	; 144
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:428
    }
    else {
      display.setCursor(25,14);
      display.println(" Push button");
    3688:	b0 dc       	rcall	.-1696   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
_ZN12Adafruit_GFX9setCursorEii():
    368a:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
    368e:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3692:	86 e1       	ldi	r24, 0x16	; 22
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    369a:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
cancelledTimer():
    369e:	85 e0       	ldi	r24, 0x05	; 5
    36a0:	91 e9       	ldi	r25, 0x91	; 145
    36a2:	87 cf       	rjmp	.-242    	; 0x35b2 <main_menu()+0x3c2>
heat():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:430
      display.setCursor(25,22);
      display.println("  to return");
    36a4:	44 db       	rcall	.-2424   	; 0x2d2e <getTemp()>
    36a6:	4b 01       	movw	r8, r22
    36a8:	5c 01       	movw	r10, r24
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:316
      analogWrite(mosfet, 0);
      cancelledTimer();
    }

    //Measure Values
    t = getTemp();
    36aa:	14 e1       	ldi	r17, 0x14	; 20
main_menu():
    36ac:	41 2c       	mov	r4, r1
    36ae:	51 2c       	mov	r5, r1
    36b0:	32 01       	movw	r6, r4
analogRead():
    36b2:	9d e0       	ldi	r25, 0x0D	; 13
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:510
  }
  return ((t / 100) * -1.46) + 434; //Average, convert to C, and return
}

float getVolts(){
  float v = 0;
    36b4:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    36b8:	a1 e0       	ldi	r26, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    36ba:	a0 93 08 06 	sts	0x0608, r26	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    36be:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    36c2:	80 ff       	sbrs	r24, 0
    36c4:	fc cf       	rjmp	.-8      	; 0x36be <main_menu()+0x4ce>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
    36c6:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    36ca:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
getVolts():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
    36ce:	07 2e       	mov	r0, r23
    36d0:	00 0c       	add	r0, r0
    36d2:	88 0b       	sbc	r24, r24
    36d4:	99 0b       	sbc	r25, r25
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:512
  for (byte i = 0; i < 20; i++){ //Poll Voltage reading 20 times
    v = v + analogRead(vcc);
    36d6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    36da:	9b 01       	movw	r18, r22
    36dc:	ac 01       	movw	r20, r24
    36de:	c3 01       	movw	r24, r6
    36e0:	b2 01       	movw	r22, r4
    36e2:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <__addsf3>
    36e6:	2b 01       	movw	r4, r22
    36e8:	3c 01       	movw	r6, r24
    36ea:	11 50       	subi	r17, 0x01	; 1
    36ec:	11 f7       	brne	.-60     	; 0x36b2 <main_menu()+0x4c2>
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:511
  return ((t / 100) * -1.46) + 434; //Average, convert to C, and return
}

float getVolts(){
  float v = 0;
  for (byte i = 0; i < 20; i++){ //Poll Voltage reading 20 times
    36f2:	40 ea       	ldi	r20, 0xA0	; 160
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:514
    v = v + analogRead(vcc);
  }
  return v / 20 / vConvert; //Average, convert to V, and return
    36f4:	51 e4       	ldi	r21, 0x41	; 65
    36f6:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__divsf3>
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e5       	ldi	r20, 0x50	; 80
    3700:	52 e4       	ldi	r21, 0x42	; 66
    3702:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__divsf3>
    3706:	2b 01       	movw	r4, r22
    3708:	3c 01       	movw	r6, r24
heat():
    370a:	a5 01       	movw	r20, r10
    370c:	94 01       	movw	r18, r8
    370e:	69 85       	ldd	r22, Y+9	; 0x09
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:320
    //Measure Values
    t = getTemp();
    v = getVolts();

    //Reflow Profile
    if (t < warmUpTemp) { //Warm Up Section
    3710:	7a 85       	ldd	r23, Y+10	; 0x0a
    3712:	8b 85       	ldd	r24, Y+11	; 0x0b
    3714:	9c 85       	ldd	r25, Y+12	; 0x0c
    3716:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    371a:	18 16       	cp	r1, r24
    371c:	9c f4       	brge	.+38     	; 0x3744 <main_menu()+0x554>
    371e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3720:	b3 11       	cpse	r27, r3
    3722:	33 94       	inc	r3
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:321
      if (pwmVal != warmUpPWM) { pwmVal++; } //Slowly ramp to desired PWM Value
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	48 e2       	ldi	r20, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:322
      if (v < vMin && pwmVal > 1) { pwmVal = pwmVal - 2; } //Reduce PWM Value if V drops too low but not unless it is still above 1 (avoid overflow/underflow)
    372a:	51 e4       	ldi	r21, 0x41	; 65
    372c:	c3 01       	movw	r24, r6
    372e:	b2 01       	movw	r22, r4
    3730:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    3734:	87 ff       	sbrs	r24, 7
    3736:	20 c0       	rjmp	.+64     	; 0x3778 <main_menu()+0x588>
    3738:	21 e0       	ldi	r18, 0x01	; 1
    373a:	23 15       	cp	r18, r3
    373c:	e8 f4       	brcc	.+58     	; 0x3778 <main_menu()+0x588>
    373e:	3a 94       	dec	r3
    3740:	3a 94       	dec	r3
    3742:	1a c0       	rjmp	.+52     	; 0x3778 <main_menu()+0x588>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:326
    }
    else if (t < maxTemp) { //Push to maximum temp
      if (pwmVal != maxPWM) { pwmVal++; } //Slowly ramp to desired PWM Value
      if (v < vMin && pwmVal > 1) { pwmVal = pwmVal - 2; } //Reduce PWM Value if V drops too low but not unless it is still above 1 (avoid overflow/underflow)
    3744:	a5 01       	movw	r20, r10
    3746:	94 01       	movw	r18, r8
    3748:	6b 81       	ldd	r22, Y+3	; 0x03
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:324
    //Reflow Profile
    if (t < warmUpTemp) { //Warm Up Section
      if (pwmVal != warmUpPWM) { pwmVal++; } //Slowly ramp to desired PWM Value
      if (v < vMin && pwmVal > 1) { pwmVal = pwmVal - 2; } //Reduce PWM Value if V drops too low but not unless it is still above 1 (avoid overflow/underflow)
    }
    else if (t < maxTemp) { //Push to maximum temp
    374a:	7c 81       	ldd	r23, Y+4	; 0x04
    374c:	8d 81       	ldd	r24, Y+5	; 0x05
    374e:	9e 81       	ldd	r25, Y+6	; 0x06
    3750:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    3754:	18 16       	cp	r1, r24
    3756:	0c f0       	brlt	.+2      	; 0x375a <main_menu()+0x56a>
    3758:	b5 c0       	rjmp	.+362    	; 0x38c4 <main_menu()+0x6d4>
    375a:	23 10       	cpse	r2, r3
    375c:	33 94       	inc	r3
    375e:	20 e0       	ldi	r18, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:325
      if (pwmVal != maxPWM) { pwmVal++; } //Slowly ramp to desired PWM Value
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	48 e2       	ldi	r20, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:326
      if (v < vMin && pwmVal > 1) { pwmVal = pwmVal - 2; } //Reduce PWM Value if V drops too low but not unless it is still above 1 (avoid overflow/underflow)
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	c3 01       	movw	r24, r6
    3768:	b2 01       	movw	r22, r4
    376a:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__cmpsf2>
    376e:	87 ff       	sbrs	r24, 7
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <main_menu()+0x588>
    3772:	31 e0       	ldi	r19, 0x01	; 1
    3774:	33 15       	cp	r19, r3
    3776:	18 f3       	brcs	.-58     	; 0x373e <main_menu()+0x54e>
    3778:	23 14       	cp	r2, r3
    377a:	08 f4       	brcc	.+2      	; 0x377e <main_menu()+0x58e>
    377c:	32 2c       	mov	r3, r2
analogWrite():
    377e:	83 2d       	mov	r24, r3
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 80 07 	call	0xf00	; 0xf00 <analogWrite.part.3.constprop.11>
heat():
    3786:	14 dd       	rcall	.-1496   	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
    3788:	60 e1       	ldi	r22, 0x10	; 16
    378a:	e6 2e       	mov	r14, r22
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:338

    //MOSFET Control
    analogWrite(mosfet, pwmVal);

    //Heat Animate Control
    display.clearDisplay();
    378c:	f1 2c       	mov	r15, r1
    378e:	00 e1       	ldi	r16, 0x10	; 16
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:339
    display.drawBitmap( 0, 3, heat_animate, heat_animate_width, heat_animate_height, SSD1306_WHITE);
    3790:	10 e0       	ldi	r17, 0x00	; 0
    3792:	20 ec       	ldi	r18, 0xC0	; 192
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	43 e0       	ldi	r20, 0x03	; 3
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	87 e9       	ldi	r24, 0x97	; 151
    37a0:	98 e2       	ldi	r25, 0x28	; 40
    37a2:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
    37a6:	20 ec       	ldi	r18, 0xC0	; 192
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	43 e0       	ldi	r20, 0x03	; 3
    37ac:	50 e0       	ldi	r21, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:340
    display.drawBitmap( 112, 3, heat_animate, heat_animate_width, heat_animate_height, SSD1306_WHITE);
    37ae:	60 e7       	ldi	r22, 0x70	; 112
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	87 e9       	ldi	r24, 0x97	; 151
    37b4:	98 e2       	ldi	r25, 0x28	; 40
    37b6:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
    37ba:	80 e5       	ldi	r24, 0x50	; 80
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	af 81       	ldd	r26, Y+7	; 0x07
    37c0:	b8 85       	ldd	r27, Y+8	; 0x08
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:341
    display.fillRect( 0, 3, heat_animate_width, heat_animate_height * (y - x) / y, SSD1306_BLACK);
    37c2:	8a 1b       	sub	r24, r26
    37c4:	9b 0b       	sbc	r25, r27
    37c6:	74 e0       	ldi	r23, 0x04	; 4
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	7a 95       	dec	r23
    37ce:	e1 f7       	brne	.-8      	; 0x37c8 <main_menu()+0x5d8>
    37d0:	60 e5       	ldi	r22, 0x50	; 80
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__divmodhi4>
    37d8:	6d 87       	std	Y+13, r22	; 0x0d
    37da:	7e 87       	std	Y+14, r23	; 0x0e
    37dc:	f1 2c       	mov	r15, r1
    37de:	e1 2c       	mov	r14, r1
    37e0:	8b 01       	movw	r16, r22
    37e2:	20 e1       	ldi	r18, 0x10	; 16
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	43 e0       	ldi	r20, 0x03	; 3
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	87 e9       	ldi	r24, 0x97	; 151
    37f0:	98 e2       	ldi	r25, 0x28	; 40
    37f2:	0e 94 b6 10 	call	0x216c	; 0x216c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>
    37f6:	0d 85       	ldd	r16, Y+13	; 0x0d
    37f8:	1e 85       	ldd	r17, Y+14	; 0x0e
    37fa:	20 e1       	ldi	r18, 0x10	; 16
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:342
    display.fillRect( 112, 3, heat_animate_width, heat_animate_height * (y - x) / y, SSD1306_BLACK);
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	43 e0       	ldi	r20, 0x03	; 3
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	60 e7       	ldi	r22, 0x70	; 112
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	87 e9       	ldi	r24, 0x97	; 151
    3808:	98 e2       	ldi	r25, 0x28	; 40
    380a:	0e 94 b6 10 	call	0x216c	; 0x216c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>
    380e:	8f 81       	ldd	r24, Y+7	; 0x07
    3810:	98 85       	ldd	r25, Y+8	; 0x08
    3812:	01 96       	adiw	r24, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:343
    x = ( x + 1 ) % y; //Heat animate increment and modulus
    3814:	60 e5       	ldi	r22, 0x50	; 80
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__divmodhi4>
    381c:	8f 83       	std	Y+7, r24	; 0x07
    381e:	98 87       	std	Y+8, r25	; 0x08
setTextSize():
    3820:	b2 e0       	ldi	r27, 0x02	; 2
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    3822:	b0 93 ab 28 	sts	0x28AB, r27	; 0x8028ab <display+0x14>
    3826:	b0 93 ac 28 	sts	0x28AC, r27	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    382a:	26 e1       	ldi	r18, 0x16	; 22
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <display+0xc>
    3832:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3836:	84 e0       	ldi	r24, 0x04	; 4
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    383e:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
heat():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:348

    //Update display
    display.setTextSize(2);
    display.setCursor(22,4);
    display.print(F("HEATING"));
    3842:	88 eb       	ldi	r24, 0xB8	; 184
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3850:	90 93 ac 28 	sts	0x28AC, r25	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
    3854:	a4 e1       	ldi	r26, 0x14	; 20
    3856:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3858:	a0 93 a3 28 	sts	0x28A3, r26	; 0x8028a3 <display+0xc>
    385c:	b0 93 a4 28 	sts	0x28A4, r27	; 0x8028a4 <display+0xd>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:351
    display.setTextSize(1);
    display.setCursor(20,24);
    display.print(F("~"));
    3860:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
    3864:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
heat():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:124
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3868:	86 eb       	ldi	r24, 0xB6	; 182
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
print():
    3870:	41 e0       	ldi	r20, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:353
    display.print(v,1);
    display.print(F("V"));
    3872:	c3 01       	movw	r24, r6
    3874:	b2 01       	movw	r22, r4
    3876:	c5 db       	rcall	.-2166   	; 0x3002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>
heat():
    3878:	84 eb       	ldi	r24, 0xB4	; 180
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:354
    if( t >= 100 )      { display.setCursor(78,24); }
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	48 ec       	ldi	r20, 0xC8	; 200
    3886:	52 e4       	ldi	r21, 0x42	; 66
    3888:	c5 01       	movw	r24, r10
    388a:	b4 01       	movw	r22, r8
    388c:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3890:	87 fd       	sbrc	r24, 7
    3892:	b1 c0       	rjmp	.+354    	; 0x39f6 <main_menu()+0x806>
_ZN12Adafruit_GFX9setCursorEii():
    3894:	2e e4       	ldi	r18, 0x4E	; 78
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    389c:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <display+0xd>
    38a0:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:357
    else if ( t >= 10 ) { display.setCursor(81,24); }
    else                { display.setCursor(84,24); }
    display.print(F("~"));
    38a4:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
heat():
    38a8:	82 eb       	ldi	r24, 0xB2	; 178
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:124
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
print():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:359
    display.print(t,0);
    display.print(F("C"));
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	c5 01       	movw	r24, r10
    38b4:	b4 01       	movw	r22, r8
    38b6:	a5 db       	rcall	.-2230   	; 0x3002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>
heat():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:360
    display.display();
    38b8:	80 eb       	ldi	r24, 0xB0	; 176
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    38c0:	cf d8       	rcall	.-3682   	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
    38c2:	65 cd       	rjmp	.-1334   	; 0x338e <main_menu()+0x19e>
analogWrite():
    38c4:	90 e0       	ldi	r25, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:449
  main_menu();
}

void coolDown() {
  
  float t = getTemp(); //Used to store current temperature
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	0e 94 80 07 	call	0xf00	; 0xf00 <analogWrite.part.3.constprop.11>
coolDown():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    38cc:	30 da       	rcall	.-2976   	; 0x2d2e <getTemp()>
_ZN12Adafruit_GFX9setCursorEii():
    38ce:	e9 e1       	ldi	r30, 0x19	; 25
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    38d0:	ae 2e       	mov	r10, r30
    38d2:	b1 2c       	mov	r11, r1
    38d4:	f4 e0       	ldi	r31, 0x04	; 4
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    38d6:	cf 2e       	mov	r12, r31
    38d8:	d1 2c       	mov	r13, r1
    38da:	a4 e3       	ldi	r26, 0x34	; 52
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    38dc:	8a 2e       	mov	r8, r26
    38de:	91 2c       	mov	r9, r1
setTextSize():
    38e0:	b3 e0       	ldi	r27, 0x03	; 3
    38e2:	3b 2e       	mov	r3, r27
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:452
  
  //Wait to return on any button press, or temp below threshold
  while(!downButton.pressed() || !downButton.pressed() && t > 45.00) {
    38e4:	22 24       	eor	r2, r2
    38e6:	23 94       	inc	r2
coolDown():
    38e8:	85 e6       	ldi	r24, 0x65	; 101
    38ea:	98 e2       	ldi	r25, 0x28	; 40
    38ec:	63 da       	rcall	.-2874   	; 0x2db4 <Bounce2::Button::pressed() const>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:453
    upButton.update();
    38ee:	81 11       	cpse	r24, r1
    38f0:	9f c0       	rjmp	.+318    	; 0x3a30 <main_menu()+0x840>
    38f2:	88 e7       	ldi	r24, 0x78	; 120
    38f4:	98 e2       	ldi	r25, 0x28	; 40
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:454
    downButton.update();
    38f6:	8f da       	rcall	.-2786   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    38f8:	85 e6       	ldi	r24, 0x65	; 101
    38fa:	98 e2       	ldi	r25, 0x28	; 40
    38fc:	8c da       	rcall	.-2792   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:455
    display.clearDisplay();
    38fe:	58 dc       	rcall	.-1872   	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
    3900:	64 e5       	ldi	r22, 0x54	; 84
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:456
    display.drawRoundRect( 22, 0, 84, 32, 2, SSD1306_WHITE );
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	86 e1       	ldi	r24, 0x16	; 22
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>
_ZN12Adafruit_GFX9setCursorEii():
    390c:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    3910:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
    3914:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3918:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
coolDown():
    391c:	82 e0       	ldi	r24, 0x02	; 2
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:458
    display.setCursor(25,4);
    display.print(F("  COOL DOWN"));
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3924:	ee 24       	eor	r14, r14
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:459
    display.drawLine( 25, 12, 103, 12, SSD1306_WHITE );
    3926:	e3 94       	inc	r14
    3928:	f1 2c       	mov	r15, r1
    392a:	0c e0       	ldi	r16, 0x0C	; 12
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	27 e6       	ldi	r18, 0x67	; 103
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4c e0       	ldi	r20, 0x0C	; 12
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	69 e1       	ldi	r22, 0x19	; 25
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	87 e9       	ldi	r24, 0x97	; 151
    393c:	98 e2       	ldi	r25, 0x28	; 40
    393e:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3942:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3946:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    394a:	2e e0       	ldi	r18, 0x0E	; 14
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	20 93 a5 28 	sts	0x28A5, r18	; 0x8028a5 <display+0xe>
    3952:	30 93 a6 28 	sts	0x28A6, r19	; 0x8028a6 <display+0xf>
coolDown():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:461
    display.setCursor(25,14);
    display.println("  Still Hot");
    3956:	85 e4       	ldi	r24, 0x45	; 69
    3958:	91 e9       	ldi	r25, 0x91	; 145
    395a:	47 db       	rcall	.-2418   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
    395c:	e8 d9       	rcall	.-3120   	; 0x2d2e <getTemp()>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:462
    t = getTemp();
    395e:	2b 01       	movw	r4, r22
    3960:	3c 01       	movw	r6, r24
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:463
      if( t >= 100 ) { display.setCursor(49,22); }
    3966:	48 ec       	ldi	r20, 0xC8	; 200
    3968:	52 e4       	ldi	r21, 0x42	; 66
    396a:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    396e:	87 fd       	sbrc	r24, 7
    3970:	5a c0       	rjmp	.+180    	; 0x3a26 <main_menu()+0x836>
_ZN12Adafruit_GFX9setCursorEii():
    3972:	81 e3       	ldi	r24, 0x31	; 49
    3974:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3976:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    397a:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
    397e:	86 e1       	ldi	r24, 0x16	; 22
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    3986:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
coolDown():
    398a:	80 e0       	ldi	r24, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:465
      else           { display.setCursor(52,22); }
      display.print(F("~"));
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
print():
    3992:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:124
    3994:	c3 01       	movw	r24, r6
    3996:	b2 01       	movw	r22, r4
    3998:	34 db       	rcall	.-2456   	; 0x3002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>
coolDown():
    399a:	8e ef       	ldi	r24, 0xFE	; 254
    399c:	90 e0       	ldi	r25, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:467
      display.print(t,0);
      display.print(F("C"));
    399e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
    39a2:	30 92 ab 28 	sts	0x28AB, r3	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    39a6:	30 92 ac 28 	sts	0x28AC, r3	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    39aa:	a5 e0       	ldi	r26, 0x05	; 5
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    39ae:	a0 93 a3 28 	sts	0x28A3, r26	; 0x8028a3 <display+0xc>
    39b2:	b0 93 a4 28 	sts	0x28A4, r27	; 0x8028a4 <display+0xd>
    39b6:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    39ba:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
coolDown():
    39be:	8c ef       	ldi	r24, 0xFC	; 252
    39c0:	90 e0       	ldi	r25, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:470
    display.setTextSize(3);
    display.setCursor(5,4);
    display.print(F("!"));
    39c2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
    39c6:	30 92 ab 28 	sts	0x28AB, r3	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    39ca:	30 92 ac 28 	sts	0x28AC, r3	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    39ce:	2c e6       	ldi	r18, 0x6C	; 108
    39d0:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    39d2:	20 93 a3 28 	sts	0x28A3, r18	; 0x8028a3 <display+0xc>
    39d6:	30 93 a4 28 	sts	0x28A4, r19	; 0x8028a4 <display+0xd>
    39da:	c0 92 a5 28 	sts	0x28A5, r12	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    39de:	d0 92 a6 28 	sts	0x28A6, r13	; 0x8028a6 <display+0xf>
coolDown():
    39e2:	8a ef       	ldi	r24, 0xFA	; 250
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:473
    display.setTextSize(3);
    display.setCursor(108,4);
    display.print(F("!"));
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
setTextSize():
    39ea:	20 92 ab 28 	sts	0x28AB, r2	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    39ee:	20 92 ac 28 	sts	0x28AC, r2	; 0x8028ac <display+0x15>
coolDown():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    39f2:	36 d8       	rcall	.-3988   	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:475
    display.setTextSize(1);
    display.display();
    39f4:	79 cf       	rjmp	.-270    	; 0x38e8 <main_menu()+0x6f8>
heat():
    39f6:	20 e0       	ldi	r18, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:355
    display.setCursor(20,24);
    display.print(F("~"));
    display.print(v,1);
    display.print(F("V"));
    if( t >= 100 )      { display.setCursor(78,24); }
    else if ( t >= 10 ) { display.setCursor(81,24); }
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e2       	ldi	r20, 0x20	; 32
    39fc:	51 e4       	ldi	r21, 0x41	; 65
    39fe:	c5 01       	movw	r24, r10
    3a00:	b4 01       	movw	r22, r8
    3a02:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    3a06:	87 fd       	sbrc	r24, 7
    3a08:	07 c0       	rjmp	.+14     	; 0x3a18 <main_menu()+0x828>
_ZN12Adafruit_GFX9setCursorEii():
    3a0a:	81 e5       	ldi	r24, 0x51	; 81
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <display+0xc>
    3a12:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <display+0xd>
    3a16:	44 cf       	rjmp	.-376    	; 0x38a0 <main_menu()+0x6b0>
    3a18:	a4 e5       	ldi	r26, 0x54	; 84
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	a0 93 a3 28 	sts	0x28A3, r26	; 0x8028a3 <display+0xc>
    3a20:	b0 93 a4 28 	sts	0x28A4, r27	; 0x8028a4 <display+0xd>
    3a24:	3d cf       	rjmp	.-390    	; 0x38a0 <main_menu()+0x6b0>
    3a26:	80 92 a3 28 	sts	0x28A3, r8	; 0x8028a3 <display+0xc>
    3a2a:	90 92 a4 28 	sts	0x28A4, r9	; 0x8028a4 <display+0xd>
    3a2e:	a7 cf       	rjmp	.-178    	; 0x397e <main_menu()+0x78e>
completed():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:481
  }
}

void completed() {
  //Update Display
  display.clearDisplay();
    3a30:	bf db       	rcall	.-2178   	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
    3a32:	64 e5       	ldi	r22, 0x54	; 84
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:482
  display.drawRoundRect( 22, 0, 84, 32, 2, SSD1306_WHITE );
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	86 e1       	ldi	r24, 0x16	; 22
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <Adafruit_GFX::drawRoundRect(int, int, int, int, int, unsigned int) [clone .constprop.22]>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    3a3e:	29 e1       	ldi	r18, 0x19	; 25
    3a40:	c2 2e       	mov	r12, r18
    3a42:	d1 2c       	mov	r13, r1
    3a44:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3a48:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    3a4c:	84 e0       	ldi	r24, 0x04	; 4
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:484
  display.setCursor(25,4);
  display.print(F("  COMPLETED  "));
    3a54:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
completed():
    3a58:	8c e2       	ldi	r24, 0x2C	; 44
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:485
  display.drawLine( 25, 12, 103, 12, SSD1306_WHITE );
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3a60:	ee 24       	eor	r14, r14
    3a62:	e3 94       	inc	r14
    3a64:	f1 2c       	mov	r15, r1
    3a66:	0c e0       	ldi	r16, 0x0C	; 12
    3a68:	10 e0       	ldi	r17, 0x00	; 0
    3a6a:	27 e6       	ldi	r18, 0x67	; 103
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	4c e0       	ldi	r20, 0x0C	; 12
    3a70:	50 e0       	ldi	r21, 0x00	; 0
    3a72:	69 e1       	ldi	r22, 0x19	; 25
    3a74:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3a76:	87 e9       	ldi	r24, 0x97	; 151
    3a78:	98 e2       	ldi	r25, 0x28	; 40
    3a7a:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3a7e:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
    3a82:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
    3a86:	8e e0       	ldi	r24, 0x0E	; 14
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:487
  display.setCursor(25,14);
  display.println(" Push button");
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    3a8e:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
completed():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3a92:	88 ef       	ldi	r24, 0xF8	; 248
    3a94:	90 e9       	ldi	r25, 0x90	; 144
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3a96:	a9 da       	rcall	.-2734   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
_ZN12Adafruit_GFX9setCursorEii():
    3a98:	c0 92 a3 28 	sts	0x28A3, r12	; 0x8028a3 <display+0xc>
    3a9c:	d0 92 a4 28 	sts	0x28A4, r13	; 0x8028a4 <display+0xd>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:489
  display.setCursor(25,22);
  display.println("  to return");
    3aa0:	86 e1       	ldi	r24, 0x16	; 22
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:490
  display.drawBitmap( 0, 9, tick, tick_width, tick_height, SSD1306_WHITE);
    3aa8:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
completed():
    3aac:	85 e0       	ldi	r24, 0x05	; 5
    3aae:	91 e9       	ldi	r25, 0x91	; 145
    3ab0:	9c da       	rcall	.-2760   	; 0x2fea <Print::println(char const*) [clone .constprop.24]>
    3ab2:	4f e0       	ldi	r20, 0x0F	; 15
    3ab4:	e4 2e       	mov	r14, r20
    3ab6:	f1 2c       	mov	r15, r1
    3ab8:	00 e1       	ldi	r16, 0x10	; 16
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	2e e0       	ldi	r18, 0x0E	; 14
    3abe:	31 e0       	ldi	r19, 0x01	; 1
    3ac0:	49 e0       	ldi	r20, 0x09	; 9
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:491
  display.drawBitmap( 112, 9, tick, tick_width, tick_height, SSD1306_WHITE);
    3ac2:	50 e0       	ldi	r21, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	60 e0       	ldi	r22, 0x00	; 0
    3ac8:	87 e9       	ldi	r24, 0x97	; 151
    3aca:	98 e2       	ldi	r25, 0x28	; 40
    3acc:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
    3ad0:	2e e0       	ldi	r18, 0x0E	; 14
    3ad2:	31 e0       	ldi	r19, 0x01	; 1
    3ad4:	49 e0       	ldi	r20, 0x09	; 9
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:492
  display.display();
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	60 e7       	ldi	r22, 0x70	; 112
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:495

  //Wait to return on any button press
  while(downButton.pressed() || upButton.pressed()) {
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	87 e9       	ldi	r24, 0x97	; 151
    3ade:	98 e2       	ldi	r25, 0x28	; 40
    3ae0:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
    3ae4:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
    3ae8:	85 e6       	ldi	r24, 0x65	; 101
    3aea:	98 e2       	ldi	r25, 0x28	; 40
    3aec:	63 d9       	rcall	.-3386   	; 0x2db4 <Bounce2::Button::pressed() const>
    3aee:	81 11       	cpse	r24, r1
    3af0:	06 c0       	rjmp	.+12     	; 0x3afe <main_menu()+0x90e>
    3af2:	88 e7       	ldi	r24, 0x78	; 120
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:496
    upButton.update();
    3af4:	98 e2       	ldi	r25, 0x28	; 40
    3af6:	5e d9       	rcall	.-3396   	; 0x2db4 <Bounce2::Button::pressed() const>
    3af8:	88 23       	and	r24, r24
    3afa:	09 f4       	brne	.+2      	; 0x3afe <main_menu()+0x90e>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:497
    downButton.update();
    3afc:	92 cd       	rjmp	.-1244   	; 0x3622 <main_menu()+0x432>
    3afe:	88 e7       	ldi	r24, 0x78	; 120
    3b00:	98 e2       	ldi	r25, 0x28	; 40
    3b02:	89 d9       	rcall	.-3310   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    3b04:	85 e6       	ldi	r24, 0x65	; 101
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:229
          coolDown();
          completed();
          main_menu();
        }
      }
      if(upButton.pressed() && maxTempIndex < sizeof(maxTempArray) - 1) { //If upper button pressed
    3b06:	98 e2       	ldi	r25, 0x28	; 40
    3b08:	86 d9       	rcall	.-3316   	; 0x2e16 <Debouncer::update() [clone .constprop.40]>
    3b0a:	ee cf       	rjmp	.-36     	; 0x3ae8 <main_menu()+0x8f8>
main_menu():
    3b0c:	88 e7       	ldi	r24, 0x78	; 120
    3b0e:	98 e2       	ldi	r25, 0x28	; 40
    3b10:	51 d9       	rcall	.-3422   	; 0x2db4 <Bounce2::Button::pressed() const>
    3b12:	88 23       	and	r24, r24
    3b14:	a1 f0       	breq	.+40     	; 0x3b3e <main_menu()+0x94e>
    3b16:	80 91 5f 28 	lds	r24, 0x285F	; 0x80285f <maxTempIndex>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:230
        maxTempIndex++;
    3b1a:	88 30       	cpi	r24, 0x08	; 8
    3b1c:	80 f4       	brcc	.+32     	; 0x3b3e <main_menu()+0x94e>
    3b1e:	22 24       	eor	r2, r2
    3b20:	23 94       	inc	r2
    3b22:	28 0e       	add	r2, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:49
    3b24:	20 92 5f 28 	sts	0x285F, r2	; 0x80285f <maxTempIndex>
_ZN5EERefC2Ei():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:53

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    3b28:	89 82       	std	Y+1, r8	; 0x01
    3b2a:	9a 82       	std	Y+2, r9	; 0x02
_ZNK5EERefcvhEv():
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    3b30:	e9 d9       	rcall	.-3118   	; 0x2f04 <EERef::operator*() const>
update():
    3b32:	28 16       	cp	r2, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    3b34:	21 f0       	breq	.+8      	; 0x3b3e <main_menu()+0x94e>
_ZN5EERefaSEh():
    3b36:	62 2d       	mov	r22, r2
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	f3 d9       	rcall	.-3098   	; 0x2f24 <nvm_write_byte(unsigned int, unsigned char)>
main_menu():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:233
        EEPROM.update(tempIndexAddr, maxTempIndex);
      }
      if(downButton.pressed() && maxTempIndex > 0) { //If lower button pressed
    3b3e:	85 e6       	ldi	r24, 0x65	; 101
    3b40:	98 e2       	ldi	r25, 0x28	; 40
    3b42:	38 d9       	rcall	.-3472   	; 0x2db4 <Bounce2::Button::pressed() const>
    3b44:	88 23       	and	r24, r24
    3b46:	91 f0       	breq	.+36     	; 0x3b6c <main_menu()+0x97c>
    3b48:	20 90 5f 28 	lds	r2, 0x285F	; 0x80285f <maxTempIndex>
    3b4c:	22 20       	and	r2, r2
    3b4e:	71 f0       	breq	.+28     	; 0x3b6c <main_menu()+0x97c>
    3b50:	2a 94       	dec	r2
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:234
        maxTempIndex--;
    3b52:	20 92 5f 28 	sts	0x285F, r2	; 0x80285f <maxTempIndex>
_ZN5EERefC2Ei():
    3b56:	89 82       	std	Y+1, r8	; 0x01
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:49
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    3b58:	9a 82       	std	Y+2, r9	; 0x02
_ZNK5EERefcvhEv():
    3b5a:	ce 01       	movw	r24, r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:53

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	d2 d9       	rcall	.-3164   	; 0x2f04 <EERef::operator*() const>
update():
    3b60:	28 16       	cp	r2, r24
    3b62:	21 f0       	breq	.+8      	; 0x3b6c <main_menu()+0x97c>
_ZN5EERefaSEh():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    3b64:	62 2d       	mov	r22, r2
    3b66:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	dc d9       	rcall	.-3144   	; 0x2f24 <nvm_write_byte(unsigned int, unsigned char)>
main_menu():
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	0d 2c       	mov	r0, r13
    3b70:	00 0c       	add	r0, r0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:240
        EEPROM.update(tempIndexAddr, maxTempIndex);
      }
    }

    //Change Display (left-side)
    if( x < (y * 0.5)) {
    3b72:	88 0b       	sbc	r24, r24
    3b74:	99 0b       	sbc	r25, r25
    3b76:	3a d7       	rcall	.+3700   	; 0x49ec <__floatsisf>
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	48 ec       	ldi	r20, 0xC8	; 200
    3b7e:	52 e4       	ldi	r21, 0x42	; 66
    3b80:	9b d6       	rcall	.+3382   	; 0x48b8 <__cmpsf2>
_ZN12Adafruit_GFX9setCursorEii():
    3b82:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3b86:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3b8a:	60 92 a5 28 	sts	0x28A5, r6	; 0x8028a5 <display+0xe>
    3b8e:	70 92 a6 28 	sts	0x28A6, r7	; 0x8028a6 <display+0xf>
main_menu():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3b92:	87 ff       	sbrs	r24, 7
    3b94:	60 c0       	rjmp	.+192    	; 0x3c56 <main_menu()+0xa66>
    3b96:	87 e7       	ldi	r24, 0x77	; 119
    3b98:	91 e0       	ldi	r25, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:240
    3b9a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:242
      display.setCursor(3,4);
      display.print(F("SINGLE BUTTON"));
    3b9e:	ee 24       	eor	r14, r14
    3ba0:	e3 94       	inc	r14
    3ba2:	f1 2c       	mov	r15, r1
    3ba4:	0c e0       	ldi	r16, 0x0C	; 12
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:243
      display.drawLine( 3, 12, 79, 12, SSD1306_WHITE); 
    3ba6:	10 e0       	ldi	r17, 0x00	; 0
    3ba8:	2f e4       	ldi	r18, 0x4F	; 79
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	4c e0       	ldi	r20, 0x0C	; 12
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	63 e0       	ldi	r22, 0x03	; 3
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	87 e9       	ldi	r24, 0x97	; 151
    3bb6:	98 e2       	ldi	r25, 0x28	; 40
    3bb8:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
_ZN12Adafruit_GFX9setCursorEii():
    3bbc:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3bc0:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3bc4:	8e e0       	ldi	r24, 0x0E	; 14
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3bcc:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
main_menu():
    3bd0:	8a e6       	ldi	r24, 0x6A	; 106
    3bd2:	91 e0       	ldi	r25, 0x01	; 1
    3bd4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
_ZN12Adafruit_GFX9setCursorEii():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:245
      display.setCursor(3,14);
      display.print(F(" Change  MAX"));
    3bd8:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3bdc:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3be0:	a6 e1       	ldi	r26, 0x16	; 22
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	a0 93 a5 28 	sts	0x28A5, r26	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3be8:	b0 93 a6 28 	sts	0x28A6, r27	; 0x8028a6 <display+0xf>
main_menu():
    3bec:	8d e5       	ldi	r24, 0x5D	; 93
    3bee:	91 e0       	ldi	r25, 0x01	; 1
    3bf0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:247
      display.setCursor(3,22);
      display.print(F(" Temperature"));
    3bf4:	c6 01       	movw	r24, r12
    3bf6:	01 96       	adiw	r24, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:254
    else {
      display.setCursor(3,4);
      display.print(F("BOTH  BUTTONS"));
      display.drawLine( 3, 12, 79, 12, SSD1306_WHITE ); 
      display.setCursor(3,18);
      display.print(F(HEATING_MSG));
    3bf8:	68 ec       	ldi	r22, 0xC8	; 200
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:256
    }
    x = ( x + 1 ) % y; //Display change increment and modulus
    3bfc:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__divmodhi4>
    3c00:	6c 01       	movw	r12, r24
_ZN12Adafruit_GFX9setCursorEii():
    3c02:	40 92 a3 28 	sts	0x28A3, r4	; 0x8028a3 <display+0xc>
    3c06:	50 92 a4 28 	sts	0x28A4, r5	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3c0a:	86 e0       	ldi	r24, 0x06	; 6
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3c12:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
main_menu():
    3c16:	8c e3       	ldi	r24, 0x3C	; 60
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
_ZN12Adafruit_GFX9setCursorEii():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:260
    
    //Update Display (right-side)
    display.setCursor(95,6);
    display.print(F("TEMP"));
    3c1e:	40 92 a3 28 	sts	0x28A3, r4	; 0x8028a3 <display+0xc>
    3c22:	50 92 a4 28 	sts	0x28A4, r5	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3c26:	a2 e1       	ldi	r26, 0x12	; 18
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	a0 93 a5 28 	sts	0x28A5, r26	; 0x8028a5 <display+0xe>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3c2e:	b0 93 a6 28 	sts	0x28A6, r27	; 0x8028a6 <display+0xf>
main_menu():
    3c32:	e0 91 5f 28 	lds	r30, 0x285F	; 0x80285f <maxTempIndex>
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	ec 50       	subi	r30, 0x0C	; 12
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:262
    display.setCursor(95,18);
    display.print(maxTempArray[maxTempIndex]);
    3c3a:	f0 47       	sbci	r31, 0x70	; 112
print():
    3c3c:	60 81       	ld	r22, Z
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:79
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long)b, base);
    3c44:	4a e0       	ldi	r20, 0x0A	; 10
    3c46:	94 d9       	rcall	.-3288   	; 0x2f70 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.19]>
main_menu():
    3c48:	8a e3       	ldi	r24, 0x3A	; 58
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:119
size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
    return write(n);
  else
    return printNumber(n, base);
    3c4c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3c50:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:263
    display.print(F("C"));
    3c54:	e4 ca       	rjmp	.-2616   	; 0x321e <main_menu()+0x2e>
    3c56:	8f e4       	ldi	r24, 0x4F	; 79
    3c58:	91 e0       	ldi	r25, 0x01	; 1
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:264
    display.display();
    3c5a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
    3c5e:	ee 24       	eor	r14, r14
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:251
      display.setCursor(3,22);
      display.print(F(" Temperature"));
    }
    else {
      display.setCursor(3,4);
      display.print(F("BOTH  BUTTONS"));
    3c60:	e3 94       	inc	r14
    3c62:	f1 2c       	mov	r15, r1
    3c64:	0c e0       	ldi	r16, 0x0C	; 12
    3c66:	10 e0       	ldi	r17, 0x00	; 0
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:252
      display.drawLine( 3, 12, 79, 12, SSD1306_WHITE ); 
    3c68:	2f e4       	ldi	r18, 0x4F	; 79
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	4c e0       	ldi	r20, 0x0C	; 12
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	63 e0       	ldi	r22, 0x03	; 3
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	87 e9       	ldi	r24, 0x97	; 151
    3c76:	98 e2       	ldi	r25, 0x28	; 40
    3c78:	0e 94 21 10 	call	0x2042	; 0x2042 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>
_ZN12Adafruit_GFX9setCursorEii():
    3c7c:	a0 92 a3 28 	sts	0x28A3, r10	; 0x8028a3 <display+0xc>
    3c80:	b0 92 a4 28 	sts	0x28A4, r11	; 0x8028a4 <display+0xd>
    3c84:	22 e1       	ldi	r18, 0x12	; 18
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	20 93 a5 28 	sts	0x28A5, r18	; 0x8028a5 <display+0xe>
    3c8c:	30 93 a6 28 	sts	0x28A6, r19	; 0x8028a6 <display+0xf>
main_menu():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3c90:	81 e4       	ldi	r24, 0x41	; 65
    3c92:	91 e0       	ldi	r25, 0x01	; 1
    3c94:	ad cf       	rjmp	.-166    	; 0x3bf0 <main_menu()+0xa00>

00003c96 <__cxa_pure_virtual>:
__cxa_pure_virtual():
    3c96:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <abort>

00003c9a <__vector_25>:
__vector_25():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:254
      display.setCursor(3,18);
      display.print(F(HEATING_MSG));
    3c9a:	1f 92       	push	r1
    3c9c:	0f 92       	push	r0
    3c9e:	0f b6       	in	r0, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    3ca0:	0f 92       	push	r0
    3ca2:	11 24       	eor	r1, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:74
#elif defined(MILLIS_USE_TIMERB2)
ISR(TCB2_INT_vect)
#else // fallback or defined(MILLIS_USE_TIMERB3)
ISR(TCB3_INT_vect)
#endif
{
    3ca4:	8f 93       	push	r24
    3ca6:	9f 93       	push	r25
    3ca8:	af 93       	push	r26
    3caa:	bf 93       	push	r27
    3cac:	80 91 54 28 	lds	r24, 0x2854	; 0x802854 <timer_millis>
    3cb0:	90 91 55 28 	lds	r25, 0x2855	; 0x802855 <timer_millis+0x1>
    3cb4:	a0 91 56 28 	lds	r26, 0x2856	; 0x802856 <timer_millis+0x2>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:75
  timer_millis++;
    3cb8:	b0 91 57 28 	lds	r27, 0x2857	; 0x802857 <timer_millis+0x3>
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	a1 1d       	adc	r26, r1
    3cc0:	b1 1d       	adc	r27, r1
    3cc2:	80 93 54 28 	sts	0x2854, r24	; 0x802854 <timer_millis>
    3cc6:	90 93 55 28 	sts	0x2855, r25	; 0x802855 <timer_millis+0x1>
    3cca:	a0 93 56 28 	sts	0x2856, r26	; 0x802856 <timer_millis+0x2>
    3cce:	b0 93 57 28 	sts	0x2857, r27	; 0x802857 <timer_millis+0x3>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
    3cd8:	bf 91       	pop	r27
    3cda:	af 91       	pop	r26
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:78

  /* Clear flag */
  _timer->INTFLAGS = TCB_CAPT_bm;
    3cdc:	9f 91       	pop	r25
    3cde:	8f 91       	pop	r24
    3ce0:	0f 90       	pop	r0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:79
}
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	0f 90       	pop	r0
    3ce6:	1f 90       	pop	r1
    3ce8:	18 95       	reti

00003cea <__vector_14>:
__vector_14():
    3cea:	1f 92       	push	r1
    3cec:	0f 92       	push	r0
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	0f 92       	push	r0
    3cf2:	11 24       	eor	r1, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:837
{
  TWI_MasterInterruptHandler();
}

ISR(TWI0_TWIS_vect)
{
    3cf4:	2f 93       	push	r18
    3cf6:	3f 93       	push	r19
    3cf8:	4f 93       	push	r20
    3cfa:	5f 93       	push	r21
    3cfc:	6f 93       	push	r22
    3cfe:	7f 93       	push	r23
    3d00:	8f 93       	push	r24
    3d02:	9f 93       	push	r25
    3d04:	af 93       	push	r26
    3d06:	bf 93       	push	r27
    3d08:	cf 93       	push	r28
    3d0a:	ef 93       	push	r30
    3d0c:	ff 93       	push	r31
TWI_SlaveInterruptHandler():
    3d0e:	c0 91 ab 08 	lds	r28, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    3d12:	c2 ff       	sbrs	r28, 2
    3d14:	0a c0       	rjmp	.+20     	; 0x3d2a <__vector_14+0x40>
    3d16:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:589
 *  Check current status and calls the appropriate handler.
 *
 */
void TWI_SlaveInterruptHandler()
{
  uint8_t currentStatus = TWI0.SSTATUS;
    3d1a:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <slave_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:592

  /* If bus error */
  if (currentStatus & TWI_BUSERR_bm)
    3d1e:	10 92 51 28 	sts	0x2851, r1	; 0x802851 <slave_bytesToWrite>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:594
  {
    slave_bytesRead = 0;
    3d22:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:595
    slave_bytesWritten = 0;
    3d24:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <TWI_SlaveTransactionFinished>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:596
    slave_bytesToWrite = 0;
    3d28:	12 c0       	rjmp	.+36     	; 0x3d4e <__vector_14+0x64>
    3d2a:	c6 ff       	sbrs	r28, 6
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:597
    TWI_SlaveTransactionFinished(TWIS_RESULT_BUS_ERROR);
    3d2c:	2d c0       	rjmp	.+90     	; 0x3d88 <__vector_14+0x9e>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:657
  }

  /* If unexpected state */
  else
  {
    TWI_SlaveTransactionFinished(TWIS_RESULT_FAIL);
    3d2e:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <slave_callUserReceive>
    3d32:	81 30       	cpi	r24, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:601
    slave_bytesToWrite = 0;
    TWI_SlaveTransactionFinished(TWIS_RESULT_BUS_ERROR);
  }

  /* If Address or Stop */
  else if (currentStatus & TWI_APIF_bm)
    3d34:	41 f4       	brne	.+16     	; 0x3d46 <__vector_14+0x5c>
    3d36:	80 91 53 28 	lds	r24, 0x2853	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:606
  {
    /* Call user onReceive function if end of Master Write/Slave Read.
     * This should be hit when there is a STOP or REPSTART
     */
    if (slave_callUserReceive == 1)
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:608
    {
      TWI_onSlaveReceive(slave_bytesRead);
    3d40:	09 95       	icall
    3d42:	10 92 50 28 	sts	0x2850, r1	; 0x802850 <slave_callUserReceive>
    3d46:	c0 ff       	sbrs	r28, 0
    3d48:	14 c0       	rjmp	.+40     	; 0x3d72 <__vector_14+0x88>
    3d4a:	0e 94 5f 0a 	call	0x14be	; 0x14be <TWI_SlaveAddressMatchHandler>
__vector_14():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:609
      slave_callUserReceive = 0;
    3d4e:	ff 91       	pop	r31
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:613
    }

    /* If address match */
    if (currentStatus & TWI_AP_bm)
    3d50:	ef 91       	pop	r30
    3d52:	cf 91       	pop	r28
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:615
    {
      TWI_SlaveAddressMatchHandler();
    3d54:	bf 91       	pop	r27
    3d56:	af 91       	pop	r26
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:839
}

ISR(TWI0_TWIS_vect)
{
  TWI_SlaveInterruptHandler();
}
    3d58:	9f 91       	pop	r25
    3d5a:	8f 91       	pop	r24
    3d5c:	7f 91       	pop	r23
    3d5e:	6f 91       	pop	r22
    3d60:	5f 91       	pop	r21
    3d62:	4f 91       	pop	r20
    3d64:	3f 91       	pop	r19
    3d66:	2f 91       	pop	r18
    3d68:	0f 90       	pop	r0
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	0f 90       	pop	r0
    3d6e:	1f 90       	pop	r1
    3d70:	18 95       	reti
TWI_SlaveStopHandler():
    3d72:	80 e4       	ldi	r24, 0x40	; 64
    3d74:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <TWI_SlaveTransactionFinished>
TWI_SlaveInterruptHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:700
 *
 */
void TWI_SlaveStopHandler()
{
  /* Clear APIF, don't ACK or NACK */
  TWI0.SSTATUS = TWI_APIF_bm;
    3d7e:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:702

  TWI_SlaveTransactionFinished(TWIS_RESULT_OK);
    3d82:	85 ff       	sbrs	r24, 5
    3d84:	e4 cf       	rjmp	.-56     	; 0x3d4e <__vector_14+0x64>
    3d86:	e1 cf       	rjmp	.-62     	; 0x3d4a <__vector_14+0x60>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:627

      /* If CLKHOLD is high, we have missed an address match
        from a fast start after stop.
        Because the flag is shared we need to handle this here.
      */
      if (TWI0.SSTATUS & TWI_CLKHOLD_bm)
    3d88:	c7 ff       	sbrs	r28, 7
    3d8a:	50 c0       	rjmp	.+160    	; 0x3e2c <__vector_14+0x142>
    3d8c:	c3 ff       	sbrs	r28, 3
    3d8e:	08 c0       	rjmp	.+16     	; 0x3da0 <__vector_14+0xb6>
    3d90:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:636
      }
    }
  }

  /* If Data Interrupt */
  else if (currentStatus & TWI_DIF_bm)
    3d94:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <slave_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:639
  {
    /* If collision flag is raised, slave transmit unsuccessful */
    if (currentStatus & TWI_COLL_bm)
    3d98:	10 92 51 28 	sts	0x2851, r1	; 0x802851 <slave_bytesToWrite>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:641
    {
      slave_bytesRead = 0;
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:642
      slave_bytesWritten = 0;
    3d9e:	c2 cf       	rjmp	.-124    	; 0x3d24 <__vector_14+0x3a>
TWI_SlaveDataHandler():
    3da0:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <__TEXT_REGION_LENGTH__+0x7f48a9>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:643
      slave_bytesToWrite = 0;
    3da4:	80 66       	ori	r24, 0x60	; 96
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:644
      TWI_SlaveTransactionFinished(TWIS_RESULT_TRANSMIT_COLLISION);
    3da6:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <__TEXT_REGION_LENGTH__+0x7f48a9>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:714
 *
 */
void TWI_SlaveDataHandler()
{
  /* Enable stop interrupt */
  TWI0.SCTRLA |= (TWI_APIEN_bm | TWI_PIEN_bm);
    3daa:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    3dae:	81 ff       	sbrs	r24, 1
    3db0:	26 c0       	rjmp	.+76     	; 0x3dfe <__vector_14+0x114>
TWI_SlaveWriteHandler():
    3db2:	80 91 52 28 	lds	r24, 0x2852	; 0x802852 <slave_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:717

  /* If Master Read/Slave Write */
  if (TWI0.SSTATUS & TWI_DIR_bm)
    3db6:	88 23       	and	r24, r24
    3db8:	49 f0       	breq	.+18     	; 0x3dcc <__vector_14+0xe2>
    3dba:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:737
 *
 */
void TWI_SlaveWriteHandler()
{
  /* If NACK, slave write transaction finished */
  if ((slave_bytesWritten > 0) && (TWI0.SSTATUS & TWI_RXACK_bm))
    3dbe:	84 ff       	sbrs	r24, 4
    3dc0:	05 c0       	rjmp	.+10     	; 0x3dcc <__vector_14+0xe2>
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	ac cf       	rjmp	.-168    	; 0x3d24 <__vector_14+0x3a>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:739
  {
    TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
    3dcc:	90 91 52 28 	lds	r25, 0x2852	; 0x802852 <slave_bytesWritten>
    3dd0:	80 91 51 28 	lds	r24, 0x2851	; 0x802851 <slave_bytesToWrite>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:740
    TWI_SlaveTransactionFinished(TWIS_RESULT_OK);
    3dd4:	98 17       	cp	r25, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:746
  }

  /* If ACK, master expects more data */
  else
  {
    if (slave_bytesWritten < slave_bytesToWrite)
    3dd6:	78 f4       	brcc	.+30     	; 0x3df6 <__vector_14+0x10c>
    3dd8:	e0 91 52 28 	lds	r30, 0x2852	; 0x802852 <slave_bytesWritten>
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <__TEXT_REGION_LENGTH__+0x7f48ad>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:748
    {
      uint8_t data = slave_writeData[slave_bytesWritten];
    3de4:	80 91 52 28 	lds	r24, 0x2852	; 0x802852 <slave_bytesWritten>
    3de8:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:749
      TWI0.SDATA = data;
    3dea:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <slave_bytesWritten>
TWI_SlaveReadHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:750
      slave_bytesWritten++;
    3dee:	83 e0       	ldi	r24, 0x03	; 3
    3df0:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3df4:	ac cf       	rjmp	.-168    	; 0x3d4e <__vector_14+0x64>
TWI_SlaveWriteHandler():
    3df6:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:781
    uint8_t data = TWI0.SDATA;
    slave_readData[slave_bytesRead] = data;
    slave_bytesRead++;

    /* Send ACK and wait for data interrupt */
    TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;
    3df8:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3dfc:	93 cf       	rjmp	.-218    	; 0x3d24 <__vector_14+0x3a>
TWI_SlaveReadHandler():
    3dfe:	90 91 53 28 	lds	r25, 0x2853	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:759
    }

    /* If buffer overflow */
    else
    {
      TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
    3e02:	80 91 4f 28 	lds	r24, 0x284F	; 0x80284f <slave_bytesToRead>
    3e06:	98 17       	cp	r25, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:773
 *
 */
void TWI_SlaveReadHandler()
{
  /* If free space in buffer */
  if (slave_bytesRead < slave_bytesToRead)
    3e08:	60 f4       	brcc	.+24     	; 0x3e22 <__vector_14+0x138>
    3e0a:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <__TEXT_REGION_LENGTH__+0x7f48ad>
    3e0e:	e0 91 53 28 	lds	r30, 0x2853	; 0x802853 <slave_bytesRead>
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:776
  {
    /* Fetch data */
    uint8_t data = TWI0.SDATA;
    3e14:	80 83       	st	Z, r24
    3e16:	80 91 53 28 	lds	r24, 0x2853	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:777
    slave_readData[slave_bytesRead] = data;
    3e1a:	8f 5f       	subi	r24, 0xFF	; 255
    3e1c:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <slave_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:778
    slave_bytesRead++;
    3e20:	e6 cf       	rjmp	.-52     	; 0x3dee <__vector_14+0x104>
    3e22:	86 e0       	ldi	r24, 0x06	; 6
    3e24:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	7c cf       	rjmp	.-264    	; 0x3d24 <__vector_14+0x3a>
TWI_SlaveInterruptHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:787
  }
  /* If buffer overflow, send NACK and wait for next START.
    Set result buffer overflow */
  else
  {
    TWI0.SCTRLB = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;
    3e2c:	85 e0       	ldi	r24, 0x05	; 5
    3e2e:	7a cf       	rjmp	.-268    	; 0x3d24 <__vector_14+0x3a>

00003e30 <__vector_15>:
__vector_15():
    3e30:	1f 92       	push	r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:788
    TWI_SlaveTransactionFinished(TWIS_RESULT_BUFFER_OVERFLOW);
    3e32:	0f 92       	push	r0
    3e34:	0f b6       	in	r0, 0x3f	; 63
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:657
  }

  /* If unexpected state */
  else
  {
    TWI_SlaveTransactionFinished(TWIS_RESULT_FAIL);
    3e36:	0f 92       	push	r0
    3e38:	11 24       	eor	r1, r1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:832
  slave_result = result;
  slave_trans_status = TWIM_STATUS_READY;
}

ISR(TWI0_TWIM_vect)
{
    3e3a:	2f 93       	push	r18
    3e3c:	8f 93       	push	r24
    3e3e:	9f 93       	push	r25
    3e40:	ef 93       	push	r30
    3e42:	ff 93       	push	r31
TWI_MasterInterruptHandler():
    3e44:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3e48:	98 2f       	mov	r25, r24
    3e4a:	9c 70       	andi	r25, 0x0C	; 12
    3e4c:	c1 f0       	breq	.+48     	; 0x3e7e <__vector_15+0x4e>
TWI_MasterArbitrationLostBusErrorHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:396
 *  Check current status and calls the appropriate handler.
 *
 */
void TWI_MasterInterruptHandler()
{
  uint8_t currentStatus = TWI0.MSTATUS;
    3e4e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:399

  /* If arbitration lost or bus error. */
  if ((currentStatus & TWI_ARBLOST_bm) ||
    3e52:	94 e0       	ldi	r25, 0x04	; 4
    3e54:	82 ff       	sbrs	r24, 2
    3e56:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:431
 *  Handles TWI responses to lost arbitration and bus error.
 *
 */
void TWI_MasterArbitrationLostBusErrorHandler()
{
  uint8_t currentStatus = TWI0.MSTATUS;
    3e58:	90 93 58 28 	sts	0x2858, r25	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:436

  /* If bus error. */
  if (currentStatus & TWI_BUSERR_bm)
  {
    master_result = TWIM_RESULT_BUS_ERROR;
    3e5c:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:441
  }
  /* If arbitration lost. */
  else
  {
    master_result = TWIM_RESULT_ARBITRATION_LOST;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:445
  }

  /* Clear all flags, abort operation */
  TWI0.MSTATUS = currentStatus;
    3e66:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <master_trans_status>
__vector_15():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:448

  /* Wait for a new operation */
  twi_mode = TWI_MODE_MASTER;
    3e6a:	ff 91       	pop	r31
    3e6c:	ef 91       	pop	r30
    3e6e:	9f 91       	pop	r25
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:449
  master_trans_status = TWIM_STATUS_READY;
    3e70:	8f 91       	pop	r24
    3e72:	2f 91       	pop	r18
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:834
}

ISR(TWI0_TWIM_vect)
{
  TWI_MasterInterruptHandler();
}
    3e74:	0f 90       	pop	r0
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	0f 90       	pop	r0
    3e7a:	1f 90       	pop	r1
    3e7c:	18 95       	reti
TWI_MasterInterruptHandler():
    3e7e:	86 ff       	sbrs	r24, 6
    3e80:	4c c0       	rjmp	.+152    	; 0x3f1a <__vector_15+0xea>
TWI_MasterWriteHandler():
    3e82:	20 91 4c 28 	lds	r18, 0x284C	; 0x80284c <master_bytesToWrite>
    3e86:	90 91 4e 28 	lds	r25, 0x284E	; 0x80284e <master_bytesToRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:406
  {
    TWI_MasterArbitrationLostBusErrorHandler();
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_WIF_bm)
    3e8a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:460
 *
 */
void TWI_MasterWriteHandler()
{
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite = master_bytesToWrite;
    3e8e:	84 ff       	sbrs	r24, 4
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:461
  uint8_t bytesToRead = master_bytesToRead;
    3e90:	10 c0       	rjmp	.+32     	; 0x3eb2 <__vector_15+0x82>
    3e92:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <master_sendStop>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:464

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (TWI0.MSTATUS & TWI_RXACK_bm)
    3e96:	88 23       	and	r24, r24
    3e98:	51 f0       	breq	.+20     	; 0x3eae <__vector_15+0x7e>
    3e9a:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:466
  {
    if (master_sendStop)
    3e9c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    3ea0:	85 e0       	ldi	r24, 0x05	; 5
    3ea2:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:472
    {
      TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
    3ea6:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <master_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:577
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
  master_result = result;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	31 c0       	rjmp	.+98     	; 0x3f10 <__vector_15+0xe0>
TWI_MasterWriteHandler():
    3eae:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:578
  master_trans_status = TWIM_STATUS_READY;
    3eb0:	f5 cf       	rjmp	.-22     	; 0x3e9c <__vector_15+0x6c>
    3eb2:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <master_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:579
  twi_mode = TWI_MODE_MASTER;
    3eb6:	82 17       	cp	r24, r18
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:472
    {
      TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
    3eb8:	90 f4       	brcc	.+36     	; 0x3ede <__vector_15+0xae>
    3eba:	e0 91 5a 28 	lds	r30, 0x285A	; 0x80285a <master_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:478
    }
    TWI_MasterTransactionFinished(TWIM_RESULT_NACK_RECEIVED);
  }

  /* If more bytes to write, send data. */
  else if (master_bytesWritten < bytesToWrite)
    3ebe:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <master_writeData>
    3ec2:	90 91 4b 28 	lds	r25, 0x284B	; 0x80284b <master_writeData+0x1>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:480
  {
    uint8_t data = master_writeData[master_bytesWritten];
    3ec6:	e8 0f       	add	r30, r24
    3ec8:	f9 2f       	mov	r31, r25
    3eca:	f1 1d       	adc	r31, r1
    3ecc:	80 81       	ld	r24, Z
    3ece:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    3ed2:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <master_bytesWritten>
    3ed6:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:481
    TWI0.MDATA = data;
    3ed8:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <master_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:482
    master_bytesWritten++;
    3edc:	c6 cf       	rjmp	.-116    	; 0x3e6a <__vector_15+0x3a>
    3ede:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <master_bytesRead>
    3ee2:	89 17       	cp	r24, r25
    3ee4:	48 f4       	brcc	.+18     	; 0x3ef8 <__vector_15+0xc8>
    3ee6:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:488
  }

  /* If bytes to read, send START condition + Address +
   * 'R/_W = 1'
   */
  else if (master_bytesRead < bytesToRead)
    3ee8:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <twi_mode>
    3eec:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <master_slaveAddress>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:490
  {
    twi_mode = TWI_MODE_MASTER_RECEIVE;
    3ef0:	81 60       	ori	r24, 0x01	; 1
    3ef2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:491
    uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
    3ef6:	b9 cf       	rjmp	.-142    	; 0x3e6a <__vector_15+0x3a>
    3ef8:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <master_sendStop>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:492
    TWI0.MADDR = readAddress;
    3efc:	88 23       	and	r24, r24
    3efe:	59 f0       	breq	.+22     	; 0x3f16 <__vector_15+0xe6>
    3f00:	83 e0       	ldi	r24, 0x03	; 3
TWI_MasterReadHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:498
  }

  /* If transaction finished, send ACK/STOP condition if instructed and set RESULT OK. */
  else
  {
    if (master_sendStop)
    3f02:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:562
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
    3f0c:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <master_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:577
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
  master_result = result;
    3f10:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <twi_mode>
    3f14:	aa cf       	rjmp	.-172    	; 0x3e6a <__vector_15+0x3a>
TWI_MasterWriteHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:578
  master_trans_status = TWIM_STATUS_READY;
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	f4 cf       	rjmp	.-24     	; 0x3f02 <__vector_15+0xd2>
TWI_MasterInterruptHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:579
  twi_mode = TWI_MODE_MASTER;
    3f1a:	87 ff       	sbrs	r24, 7
    3f1c:	37 c0       	rjmp	.+110    	; 0x3f8c <__vector_15+0x15c>
TWI_MasterReadHandler():
    3f1e:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <master_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:504
    {
      TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_MCMD_REPSTART_gc;
    3f22:	80 91 4e 28 	lds	r24, 0x284E	; 0x80284e <master_bytesToRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:412
  {
    TWI_MasterWriteHandler();
  }

  /* If master read interrupt. */
  else if (currentStatus & TWI_RIF_bm)
    3f26:	98 17       	cp	r25, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:520
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler()
{
  /* Fetch data if bytes to be read. */
  if (master_bytesRead < master_bytesToRead)
    3f28:	a8 f4       	brcc	.+42     	; 0x3f54 <__vector_15+0x124>
    3f2a:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    3f2e:	e0 91 5b 28 	lds	r30, 0x285B	; 0x80285b <master_bytesRead>
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:522
  {
    uint8_t data = TWI0.MDATA;
    3f34:	80 83       	st	Z, r24
    3f36:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <master_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:523
    master_readData[master_bytesRead] = data;
    3f3a:	8f 5f       	subi	r24, 0xFF	; 255
    3f3c:	80 93 5b 28 	sts	0x285B, r24	; 0x80285b <master_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:524
    master_bytesRead++;
    3f40:	90 91 4e 28 	lds	r25, 0x284E	; 0x80284e <master_bytesToRead>
    3f44:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <master_bytesRead>
    3f48:	89 17       	cp	r24, r25
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:545
    master_bytesToRead = 0;
    return;
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = master_bytesToRead;
    3f4a:	c0 f4       	brcc	.+48     	; 0x3f7c <__vector_15+0x14c>
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:548

  /* If more bytes to read, issue ACK and start a byte read. */
  if (master_bytesRead < bytesToRead)
    3f4e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3f52:	8b cf       	rjmp	.-234    	; 0x3e6a <__vector_15+0x3a>
    3f54:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <master_sendStop>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:550
  {
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;
    3f58:	88 23       	and	r24, r24
    3f5a:	71 f0       	breq	.+28     	; 0x3f78 <__vector_15+0x148>
    3f5c:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:530
  }

  /* If buffer overflow, issue NACK/STOP and BUFFER_OVERFLOW condition. */
  else
  {
    if (master_sendStop)
    3f5e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:536
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
    3f68:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <master_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:577
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
  master_result = result;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <twi_mode>
TWI_MasterReadHandler():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:578
  master_trans_status = TWIM_STATUS_READY;
    3f72:	10 92 4e 28 	sts	0x284E, r1	; 0x80284e <master_bytesToRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:579
  twi_mode = TWI_MODE_MASTER;
    3f76:	79 cf       	rjmp	.-270    	; 0x3e6a <__vector_15+0x3a>
    3f78:	85 e0       	ldi	r24, 0x05	; 5
    3f7a:	f1 cf       	rjmp	.-30     	; 0x3f5e <__vector_15+0x12e>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:540
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
    }

    TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
    master_bytesToRead = 0;
    3f7c:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <master_sendStop>
    3f80:	88 23       	and	r24, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:536
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
    }
    else
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <__vector_15+0x158>
    3f84:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:556
  }

  /* If transaction finished, issue NACK and STOP condition if instructed. */
  else
  {
    if (master_sendStop)
    3f86:	bd cf       	rjmp	.-134    	; 0x3f02 <__vector_15+0xd2>
    3f88:	85 e0       	ldi	r24, 0x05	; 5
    3f8a:	bb cf       	rjmp	.-138    	; 0x3f02 <__vector_15+0xd2>
TWI_MasterTransactionFinished():
    3f8c:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:558
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
    3f8e:	89 cf       	rjmp	.-238    	; 0x3ea2 <__vector_15+0x72>

00003f90 <SPISettings::SPISettings()>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
    3f90:	24 e0       	ldi	r18, 0x04	; 4
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:562
    }
    else
    {
      TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_REPSTART_gc;
    3f92:	fc 01       	movw	r30, r24
    3f94:	21 83       	std	Z+1, r18	; 0x01
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:577
 *
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
  master_result = result;
    3f96:	21 e2       	ldi	r18, 0x21	; 33
    3f98:	20 83       	st	Z, r18
__base_ctor ():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.h:64
      init_MightInline(clock, bitOrder, dataMode);
    }
  }

  // Default speed set to 4MHz, SPI mode set to MODE 0 and Bit order set to MSB first.
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    3f9a:	08 95       	ret

00003f9c <global constructors keyed to 65535_0_SW1.0_HW3.0_70by50mm.ino.cpp.o.4294>:
_GLOBAL__I_65535_0_SW1.0_HW3.0_70by50mm.ino.cpp.o.4294():
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	0b e8       	ldi	r16, 0x8B	; 139
    3fa4:	18 e2       	ldi	r17, 0x28	; 40
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	12 82       	std	Z+2, r1	; 0x02
    3faa:	13 82       	std	Z+3, r1	; 0x03
    3fac:	88 ee       	ldi	r24, 0xE8	; 232
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	a0 e0       	ldi	r26, 0x00	; 0
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	84 83       	std	Z+4, r24	; 0x04
    3fb6:	95 83       	std	Z+5, r25	; 0x05
    3fb8:	a6 83       	std	Z+6, r26	; 0x06
    3fba:	b7 83       	std	Z+7, r27	; 0x07
    3fbc:	85 ea       	ldi	r24, 0xA5	; 165
    3fbe:	90 e9       	ldi	r25, 0x90	; 144
    3fc0:	80 83       	st	Z, r24
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	83 e6       	ldi	r24, 0x63	; 99
    3fc6:	98 e2       	ldi	r25, 0x28	; 40
    3fc8:	e3 df       	rcall	.-58     	; 0x3f90 <SPISettings::SPISettings()>
    3fca:	e7 e9       	ldi	r30, 0x97	; 151
    3fcc:	f8 e2       	ldi	r31, 0x28	; 40
    3fce:	12 82       	std	Z+2, r1	; 0x02
    3fd0:	13 82       	std	Z+3, r1	; 0x03
    3fd2:	20 e8       	ldi	r18, 0x80	; 128
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	24 83       	std	Z+4, r18	; 0x04
    3fd8:	35 83       	std	Z+5, r19	; 0x05
    3fda:	80 e2       	ldi	r24, 0x20	; 32
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	86 83       	std	Z+6, r24	; 0x06
    3fe0:	97 83       	std	Z+7, r25	; 0x07
    3fe2:	20 87       	std	Z+8, r18	; 0x08
    3fe4:	31 87       	std	Z+9, r19	; 0x09
    3fe6:	82 87       	std	Z+10, r24	; 0x0a
    3fe8:	93 87       	std	Z+11, r25	; 0x0b
    3fea:	16 8a       	std	Z+22, r1	; 0x16
    3fec:	14 86       	std	Z+12, r1	; 0x0c
    3fee:	15 86       	std	Z+13, r1	; 0x0d
    3ff0:	16 86       	std	Z+14, r1	; 0x0e
    3ff2:	17 86       	std	Z+15, r1	; 0x0f
    3ff4:	c1 e0       	ldi	r28, 0x01	; 1
    3ff6:	c5 8b       	std	Z+21, r28	; 0x15
    3ff8:	c4 8b       	std	Z+20, r28	; 0x14
    3ffa:	8f ef       	ldi	r24, 0xFF	; 255
    3ffc:	9f ef       	ldi	r25, 0xFF	; 255
    3ffe:	82 8b       	std	Z+18, r24	; 0x12
    4000:	93 8b       	std	Z+19, r25	; 0x13
    4002:	80 8b       	std	Z+16, r24	; 0x10
    4004:	91 8b       	std	Z+17, r25	; 0x11
    4006:	c7 8b       	std	Z+23, r28	; 0x17
    4008:	10 8e       	std	Z+24, r1	; 0x18
    400a:	11 8e       	std	Z+25, r1	; 0x19
    400c:	12 8e       	std	Z+26, r1	; 0x1a
    400e:	8f eb       	ldi	r24, 0xBF	; 191
    4010:	90 e9       	ldi	r25, 0x90	; 144
    4012:	80 83       	st	Z, r24
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	13 8e       	std	Z+27, r1	; 0x1b
    4018:	14 8e       	std	Z+28, r1	; 0x1c
    401a:	05 8f       	std	Z+29, r16	; 0x1d
    401c:	16 8f       	std	Z+30, r17	; 0x1e
    401e:	17 8e       	std	Z+31, r1	; 0x1f
    4020:	10 a2       	std	Z+32, r1	; 0x20
    4022:	8f ef       	ldi	r24, 0xFF	; 255
    4024:	84 a3       	std	Z+36, r24	; 0x24
    4026:	85 a3       	std	Z+37, r24	; 0x25
    4028:	86 a3       	std	Z+38, r24	; 0x26
    402a:	87 a3       	std	Z+39, r24	; 0x27
    402c:	80 a7       	std	Z+40, r24	; 0x28
    402e:	80 e8       	ldi	r24, 0x80	; 128
    4030:	9a e1       	ldi	r25, 0x1A	; 26
    4032:	a6 e0       	ldi	r26, 0x06	; 6
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	85 ab       	std	Z+53, r24	; 0x35
    4038:	96 ab       	std	Z+54, r25	; 0x36
    403a:	a7 ab       	std	Z+55, r26	; 0x37
    403c:	b0 af       	std	Z+56, r27	; 0x38
    403e:	80 ea       	ldi	r24, 0xA0	; 160
    4040:	96 e8       	ldi	r25, 0x86	; 134
    4042:	a1 e0       	ldi	r26, 0x01	; 1
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	81 af       	std	Z+57, r24	; 0x39
    4048:	92 af       	std	Z+58, r25	; 0x3a
    404a:	a3 af       	std	Z+59, r26	; 0x3b
    404c:	b4 af       	std	Z+60, r27	; 0x3c
    404e:	85 ed       	ldi	r24, 0xD5	; 213
    4050:	98 e2       	ldi	r25, 0x28	; 40
    4052:	9e df       	rcall	.-196    	; 0x3f90 <SPISettings::SPISettings()>
    4054:	e8 e7       	ldi	r30, 0x78	; 120
    4056:	f8 e2       	ldi	r31, 0x28	; 40
    4058:	12 82       	std	Z+2, r1	; 0x02
    405a:	13 82       	std	Z+3, r1	; 0x03
    405c:	14 82       	std	Z+4, r1	; 0x04
    405e:	15 82       	std	Z+5, r1	; 0x05
    4060:	2a e0       	ldi	r18, 0x0A	; 10
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	26 83       	std	Z+6, r18	; 0x06
    4066:	37 83       	std	Z+7, r19	; 0x07
    4068:	10 86       	std	Z+8, r1	; 0x08
    406a:	11 8a       	std	Z+17, r1	; 0x11
    406c:	87 eb       	ldi	r24, 0xB7	; 183
    406e:	90 e9       	ldi	r25, 0x90	; 144
    4070:	80 83       	st	Z, r24
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	c2 8b       	std	Z+18, r28	; 0x12
    4076:	e5 e6       	ldi	r30, 0x65	; 101
    4078:	f8 e2       	ldi	r31, 0x28	; 40
    407a:	12 82       	std	Z+2, r1	; 0x02
    407c:	13 82       	std	Z+3, r1	; 0x03
    407e:	14 82       	std	Z+4, r1	; 0x04
    4080:	15 82       	std	Z+5, r1	; 0x05
    4082:	26 83       	std	Z+6, r18	; 0x06
    4084:	37 83       	std	Z+7, r19	; 0x07
    4086:	10 86       	std	Z+8, r1	; 0x08
    4088:	11 8a       	std	Z+17, r1	; 0x11
    408a:	80 83       	st	Z, r24
    408c:	91 83       	std	Z+1, r25	; 0x01
    408e:	c2 8b       	std	Z+18, r28	; 0x12
    4090:	cf 91       	pop	r28
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	08 95       	ret

00004098 <main>:
main():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/main.cpp:29

void setupUSB() __attribute__((weak));
void setupUSB() {}

int main(void)
{
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	00 d0       	rcall	.+0      	; 0x409e <main+0x6>
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:355
#if (F_CPU == 20000000L)
  /* No division on clock */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
#elif (F_CPU == 16000000L)
  /* No division on clock */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
    40a2:	88 ed       	ldi	r24, 0xD8	; 216
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	84 bf       	out	0x34, r24	; 52
    40a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:388
  /* ADC clock between 50-200 kHz */

#if (F_CPU >= 20000000L) // 20 MHz / 128 = 156.250 kHz
  ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
#elif (F_CPU >= 16000000L) // 16 MHz / 128 = 125 kHz
  ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
    40ac:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    40b0:	86 60       	ori	r24, 0x06	; 6
    40b2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:402
#else                      // 128 kHz / 2 = 64 kHz -> This is the closest you can get, the prescaler is 2
  ADC0.CTRLC |= ADC_PRESC_DIV2_gc;
#endif

  /* Enable ADC */
  ADC0.CTRLA |= ADC_ENABLE_bm;
    40b6:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    40ba:	81 60       	ori	r24, 0x01	; 1
    40bc:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
analogReference():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_analog.c:35
{
  switch (mode)
  {
    case EXTERNAL:
    case VDD:
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | mode | ADC_SAMPCAP_bm; // Per datasheet, recommended SAMPCAP=1 at ref > 1v - we don't *KNOW* the external reference will be >1v, but it's probably more likely...
    40c0:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    40c4:	8f 7c       	andi	r24, 0xCF	; 207
    40c6:	80 65       	ori	r24, 0x50	; 80
    40c8:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
init():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:407
  analogReference(VDD);

#endif

  PORTMUX.USARTROUTEA = 0;
    40cc:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:446
void setup_timers()
{
  //  TYPE A TIMER

  // PORTMUX setting for TCA (defined in pins_arduino.h)
  PORTMUX.TCAROUTEA = TCA0_PINS;
    40d0:	82 e0       	ldi	r24, 0x02	; 2
    40d2:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:449

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:453

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;
    40dc:	8e ef       	ldi	r24, 0xFE	; 254
    40de:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:452

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
    40e2:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:461
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
                      TCA0.SPLIT.HCMP2 = PWM_TIMER_COMPARE;
    40e6:	80 e8       	ldi	r24, 0x80	; 128
    40e8:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:460
  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
    40ec:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:459

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
    40f0:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:458
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
    40f4:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:457
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
    40f8:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:456
  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
    40fc:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:474
#elif F_CPU <= 8000000L
  // Use DIV16 prescaler (giving 250kHz clocke on 4MHz, 500kHz clock on 8MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
#else
  // Use DIV64 prescaler (giving 250kHz clock on 16MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    4100:	8b e0       	ldi	r24, 0x0B	; 11
    4102:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:480
#endif

  //  TYPE B TIMERS

  // Set up routing (defined in pins_arduino.h)
  PORTMUX.TCBROUTEA = 0
    4106:	87 e0       	ldi	r24, 0x07	; 7
    4108:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
main():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:496
                      | TCB3_PINS
#endif
      ;

  // Start with TCB0
  TCB_t *timer_B = (TCB_t *)&TCB0;
    410c:	e0 e8       	ldi	r30, 0x80	; 128
    410e:	fa e0       	ldi	r31, 0x0A	; 10
setup_timers():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:513

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    4110:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:516

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
    4112:	2e ef       	ldi	r18, 0xFE	; 254
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:519

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    4114:	90 e8       	ldi	r25, 0x80	; 128
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:523

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
    4116:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:513

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    4118:	31 83       	std	Z+1, r19	; 0x01
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:516

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
    411a:	24 87       	std	Z+12, r18	; 0x0c
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:519

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    411c:	95 87       	std	Z+13, r25	; 0x0d
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:523

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
    411e:	80 83       	st	Z, r24
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:528
                     //|(TCB_SYNCUPD_bm)
                     | (TCB_ENABLE_bm);

    // Increment pointer to next TCB instance
    timer_B++;
    4120:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:531

    // Stop when pointing to TCB3
  } while (timer_B <= timer_B_end);
    4122:	e0 3c       	cpi	r30, 0xC0	; 192
    4124:	4a e0       	ldi	r20, 0x0A	; 10
    4126:	f4 07       	cpc	r31, r20
    4128:	b9 f7       	brne	.-18     	; 0x4118 <main+0x80>
init():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:416
  /********************* TCB for system time tracking **************************/

  // BUG: we can compensate for F_CPU by fine tuning value of TIME_TRACKING_TIMER_COUNT

  /* Select vanilla 16 bit periodic interrupt mode */
  _timer->CTRLB = TCB_CNTMODE_INT_gc;
    412a:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:419

  /* TOP value for overflow every N clock cycles */
  _timer->CCMP = TIME_TRACKING_TIMER_COUNT - 1;
    412e:	8f e7       	ldi	r24, 0x7F	; 127
    4130:	9e e3       	ldi	r25, 0x3E	; 62
    4132:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    4136:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:422

  /* Enable TCB interrupt */
  _timer->INTCTRL |= TCB_CAPT_bm;
    413a:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    413e:	81 60       	ori	r24, 0x01	; 1
    4140:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:426

  /* Clock selection is F_CPU/N -- which is independent of TCA */
#if TIME_TRACKING_TIMER_DIVIDER == 1
  _timer->CTRLA = TCB_CLKSEL_CLKDIV1_gc; /* F_CPU */
    4144:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:434
#else
#assert "TIME_TRACKING_TIMER_DIVIDER not supported"
#endif

  /* Enable & start */
  _timer->CTRLA |= TCB_ENABLE_bm; /* Keep this last before enabling interrupts to ensure tracking as accurate as possible */
    4148:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    414c:	81 60       	ori	r24, 0x01	; 1
    414e:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring.c:438

  /*************************** ENABLE GLOBAL INTERRUPTS *************************/

  sei();
    4152:	78 94       	sei
pinMode():
    4154:	61 e0       	ldi	r22, 0x01	; 1
    4156:	81 e1       	ldi	r24, 0x11	; 17
    4158:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
digitalWrite():
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	81 e1       	ldi	r24, 0x11	; 17
    4160:	0e 94 42 07 	call	0xe84	; 0xe84 <digitalWrite.part.2>
pinMode():
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	87 e2       	ldi	r24, 0x27	; 39
    4168:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	85 e2       	ldi	r24, 0x25	; 37
    4170:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
attach():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
    4174:	87 e1       	ldi	r24, 0x17	; 23
    4176:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <upButton+0x11>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
    417a:	88 e7       	ldi	r24, 0x78	; 120
    417c:	98 e2       	ldi	r25, 0x28	; 40
    417e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <Debouncer::begin() [clone .constprop.3]>
_ZN7Bounce26Button15setPressedStateEb():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:300
    @param    state
              The electrical state (HIGH/LOW) that corresponds to a physical press.

*/
   void setPressedState(bool state){
    stateForPressed = state;
    4182:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <upButton+0x12>
interval():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:16
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
    4186:	0a e0       	ldi	r16, 0x0A	; 10
    4188:	10 e0       	ldi	r17, 0x00	; 0
    418a:	00 93 7e 28 	sts	0x287E, r16	; 0x80287e <upButton+0x6>
    418e:	10 93 7f 28 	sts	0x287F, r17	; 0x80287f <upButton+0x7>
attach():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
    4192:	86 e1       	ldi	r24, 0x16	; 22
    4194:	80 93 76 28 	sts	0x2876, r24	; 0x802876 <downButton+0x11>
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
    4198:	85 e6       	ldi	r24, 0x65	; 101
    419a:	98 e2       	ldi	r25, 0x28	; 40
    419c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <Debouncer::begin() [clone .constprop.3]>
_ZN7Bounce26Button15setPressedStateEb():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.h:300
    41a0:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <downButton+0x12>
interval():
C:\Users\Owner\Documents\Arduino\libraries\Bounce2\src/Bounce2.cpp:16
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
    41a4:	00 93 6b 28 	sts	0x286B, r16	; 0x80286b <downButton+0x6>
    41a8:	10 93 6c 28 	sts	0x286C, r17	; 0x80286c <downButton+0x7>
_ZN5EERefC2Ei():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:49
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\EEPROM\src/EEPROM.h:53

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    41b4:	ce 01       	movw	r24, r28
    41b6:	01 96       	adiw	r24, 0x01	; 1
    41b8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <EERef::operator*() const>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:174
  downButton.attach(dnsw);
  downButton.setPressedState(LOW);
  downButton.interval(10);

  //Pull saved values from EEPROM
  maxTempIndex = EEPROM.read(tempIndexAddr) % sizeof(maxTempArray);
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	69 e0       	ldi	r22, 0x09	; 9
    41c0:	70 e0       	ldi	r23, 0x00	; 0
    41c2:	2f d5       	rcall	.+2654   	; 0x4c22 <__udivmodhi4>
    41c4:	80 93 5f 28 	sts	0x285F, r24	; 0x80285f <maxTempIndex>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:495
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    41c8:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <display+0x1f>
    41cc:	90 91 b7 28 	lds	r25, 0x28B7	; 0x8028b7 <display+0x20>
    41d0:	89 2b       	or	r24, r25
    41d2:	39 f1       	breq	.+78     	; 0x4222 <main+0x18a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:498
    return false;

  clearDisplay();
    41d4:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:501

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    41d8:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <display+0x6>
    41dc:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <display+0x7>
    41e0:	60 91 9b 28 	lds	r22, 0x289B	; 0x80289b <display+0x4>
    41e4:	70 91 9c 28 	lds	r23, 0x289C	; 0x80289c <display+0x5>
    41e8:	81 32       	cpi	r24, 0x21	; 33
    41ea:	91 05       	cpc	r25, r1
    41ec:	0c f0       	brlt	.+2      	; 0x41f0 <main+0x158>
    41ee:	98 c0       	rjmp	.+304    	; 0x4320 <main+0x288>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:505
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    41f0:	ac 01       	movw	r20, r24
    41f2:	40 52       	subi	r20, 0x20	; 32
    41f4:	51 09       	sbc	r21, r1
    41f6:	57 ff       	sbrs	r21, 7
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <main+0x166>
    41fa:	4f 5f       	subi	r20, 0xFF	; 255
    41fc:	5f 4f       	sbci	r21, 0xFF	; 255
    41fe:	55 95       	asr	r21
    4200:	47 95       	ror	r20
    4202:	63 57       	subi	r22, 0x73	; 115
    4204:	71 09       	sbc	r23, r1
    4206:	77 ff       	sbrs	r23, 7
    4208:	02 c0       	rjmp	.+4      	; 0x420e <main+0x176>
    420a:	6f 5f       	subi	r22, 0xFF	; 255
    420c:	7f 4f       	sbci	r23, 0xFF	; 255
    420e:	75 95       	asr	r23
    4210:	67 95       	ror	r22
    4212:	20 e2       	ldi	r18, 0x20	; 32
    4214:	e2 2e       	mov	r14, r18
    4216:	f1 2c       	mov	r15, r1
    4218:	03 e7       	ldi	r16, 0x73	; 115
    421a:	10 e0       	ldi	r17, 0x00	; 0
    421c:	27 ea       	ldi	r18, 0xA7	; 167
    421e:	36 e0       	ldi	r19, 0x06	; 6
    4220:	97 c0       	rjmp	.+302    	; 0x4350 <main+0x2b8>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:495
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    4222:	20 91 9d 28 	lds	r18, 0x289D	; 0x80289d <display+0x6>
    4226:	30 91 9e 28 	lds	r19, 0x289E	; 0x80289e <display+0x7>
    422a:	c9 01       	movw	r24, r18
    422c:	07 96       	adiw	r24, 0x07	; 7
    422e:	97 fd       	sbrc	r25, 7
    4230:	07 96       	adiw	r24, 0x07	; 7
    4232:	b3 e0       	ldi	r27, 0x03	; 3
    4234:	95 95       	asr	r25
    4236:	87 95       	ror	r24
    4238:	ba 95       	dec	r27
    423a:	e1 f7       	brne	.-8      	; 0x4234 <main+0x19c>
    423c:	20 91 9b 28 	lds	r18, 0x289B	; 0x80289b <display+0x4>
    4240:	30 91 9c 28 	lds	r19, 0x289C	; 0x80289c <display+0x5>
    4244:	ac 01       	movw	r20, r24
    4246:	42 9f       	mul	r20, r18
    4248:	c0 01       	movw	r24, r0
    424a:	43 9f       	mul	r20, r19
    424c:	90 0d       	add	r25, r0
    424e:	52 9f       	mul	r21, r18
    4250:	90 0d       	add	r25, r0
    4252:	11 24       	eor	r1, r1
    4254:	93 d5       	rcall	.+2854   	; 0x4d7c <malloc>
    4256:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <display+0x1f>
    425a:	90 93 b7 28 	sts	0x28B7, r25	; 0x8028b7 <display+0x20>
    425e:	89 2b       	or	r24, r25
    4260:	09 f0       	breq	.+2      	; 0x4264 <main+0x1cc>
    4262:	b8 cf       	rjmp	.-144    	; 0x41d4 <main+0x13c>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:183
  TCA0.SPLIT.CTRLA = TCA_SPLIT_ENABLE_bm;
#endif

  //Start-up Diplay
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  display.clearDisplay();
    4264:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.21]>
setTextSize():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	80 93 ab 28 	sts	0x28AB, r24	; 0x8028ab <display+0x14>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
  textsize_y = (s_y > 0) ? s_y : 1;
    426e:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <display+0x15>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:144
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <display+0x12>
    427a:	90 93 aa 28 	sts	0x28AA, r25	; 0x8028aa <display+0x13>
    427e:	80 93 a7 28 	sts	0x28A7, r24	; 0x8028a7 <display+0x10>
    4282:	90 93 a8 28 	sts	0x28A8, r25	; 0x8028a8 <display+0x11>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    4286:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <display+0xc>
    428a:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    428e:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <display+0xe>
    4292:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <display+0xf>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:187
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.drawBitmap(0, 0, logo, logo_width, logo_height, SSD1306_WHITE);
    4296:	8b e1       	ldi	r24, 0x1B	; 27
    4298:	e8 2e       	mov	r14, r24
    429a:	f1 2c       	mov	r15, r1
    429c:	00 e8       	ldi	r16, 0x80	; 128
    429e:	10 e0       	ldi	r17, 0x00	; 0
    42a0:	23 e5       	ldi	r18, 0x53	; 83
    42a2:	3b e0       	ldi	r19, 0x0B	; 11
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	40 e0       	ldi	r20, 0x00	; 0
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	87 e9       	ldi	r24, 0x97	; 151
    42ae:	98 e2       	ldi	r25, 0x28	; 40
    42b0:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    42b4:	00 e5       	ldi	r16, 0x50	; 80
    42b6:	10 e0       	ldi	r17, 0x00	; 0
    42b8:	00 93 a3 28 	sts	0x28A3, r16	; 0x8028a3 <display+0xc>
    42bc:	10 93 a4 28 	sts	0x28A4, r17	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    42c0:	80 e1       	ldi	r24, 0x10	; 16
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    42c8:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:189
  display.setCursor(80,16);
  display.print(F("S/W V"));
    42cc:	8d e4       	ldi	r24, 0x4D	; 77
    42ce:	9b e0       	ldi	r25, 0x0B	; 11
    42d0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
print():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:124
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    42d4:	41 e0       	ldi	r20, 0x01	; 1
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	70 e0       	ldi	r23, 0x00	; 0
    42da:	80 e8       	ldi	r24, 0x80	; 128
    42dc:	9f e3       	ldi	r25, 0x3F	; 63
    42de:	0e 94 01 18 	call	0x3002	; 0x3002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    42e2:	00 93 a3 28 	sts	0x28A3, r16	; 0x8028a3 <display+0xc>
    42e6:	10 93 a4 28 	sts	0x28A4, r17	; 0x8028a4 <display+0xd>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    42ea:	88 e1       	ldi	r24, 0x18	; 24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <display+0xe>
    42f2:	90 93 a6 28 	sts	0x28A6, r25	; 0x8028a6 <display+0xf>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:192
  display.print(sw, 1);
  display.setCursor(80,24);
  display.print(F("H/W V"));
    42f6:	87 e4       	ldi	r24, 0x47	; 71
    42f8:	9b e0       	ldi	r25, 0x0B	; 11
    42fa:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <Print::print(__FlashStringHelper const*) [clone .constprop.28]>
print():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles\api/Print.cpp:124
    42fe:	41 e0       	ldi	r20, 0x01	; 1
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	80 e4       	ldi	r24, 0x40	; 64
    4306:	90 e4       	ldi	r25, 0x40	; 64
    4308:	0e 94 01 18 	call	0x3002	; 0x3002 <Print::printFloat(double, unsigned char) [clone .constprop.14]>
setup():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:194
  display.print(hw, 1);
  display.display();
    430c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Adafruit_SSD1306::display() [clone .constprop.31]>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:195
  delay(3000);
    4310:	68 eb       	ldi	r22, 0xB8	; 184
    4312:	7b e0       	ldi	r23, 0x0B	; 11
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:198

  //Go to main menu
  main_menu();
    431c:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <main_menu()>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:502

  clearDisplay();

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    4320:	ac 01       	movw	r20, r24
    4322:	40 54       	subi	r20, 0x40	; 64
    4324:	51 09       	sbc	r21, r1
    4326:	57 ff       	sbrs	r21, 7
    4328:	02 c0       	rjmp	.+4      	; 0x432e <main+0x296>
    432a:	4f 5f       	subi	r20, 0xFF	; 255
    432c:	5f 4f       	sbci	r21, 0xFF	; 255
    432e:	55 95       	asr	r21
    4330:	47 95       	ror	r20
    4332:	62 55       	subi	r22, 0x52	; 82
    4334:	71 09       	sbc	r23, r1
    4336:	77 ff       	sbrs	r23, 7
    4338:	02 c0       	rjmp	.+4      	; 0x433e <main+0x2a6>
    433a:	6f 5f       	subi	r22, 0xFF	; 255
    433c:	7f 4f       	sbci	r23, 0xFF	; 255
    433e:	75 95       	asr	r23
    4340:	67 95       	ror	r22
    4342:	f0 e4       	ldi	r31, 0x40	; 64
    4344:	ef 2e       	mov	r14, r31
    4346:	f1 2c       	mov	r15, r1
    4348:	02 e5       	ldi	r16, 0x52	; 82
    434a:	10 e0       	ldi	r17, 0x00	; 0
    434c:	27 e8       	ldi	r18, 0x87	; 135
    434e:	38 e0       	ldi	r19, 0x08	; 8
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:505
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    4350:	87 e9       	ldi	r24, 0x97	; 151
    4352:	98 e2       	ldi	r25, 0x28	; 40
    4354:	0e 94 b3 12 	call	0x2566	; 0x2566 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.12]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:510
               splash2_data, splash2_width, splash2_height, 1);
  }
#endif

  vccstate = vcs;
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <display+0x22>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:513

  // Setup pin directions
  if (wire) { // Using I2C
    435e:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    4362:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    4366:	89 2b       	or	r24, r25
    4368:	09 f4       	brne	.+2      	; 0x436c <main+0x2d4>
    436a:	ef c0       	rjmp	.+478    	; 0x454a <main+0x4b2>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:516
    // If I2C address is unspecified, use default
    // (0x3C for 32-pixel-tall displays, 0x3D for all others).
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    436c:	8c e3       	ldi	r24, 0x3C	; 60
    436e:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <display+0x21>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:119
#endif
}

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4372:	10 92 5e 28 	sts	0x285E, r1	; 0x80285e <TwoWire::rxBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = 0;
    4376:	10 92 5d 28 	sts	0x285D, r1	; 0x80285d <TwoWire::rxBufferLength>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:122

  txBufferIndex = 0;
    437a:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <TwoWire::txBufferIndex>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:123
  txBufferLength = 0;
    437e:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <TwoWire::txBufferLength>
TWI_MasterInit():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:65
 *
 *  \param frequency            The required baud.
 */
void TWI_MasterInit(uint32_t frequency)
{
  if (twi_mode != TWI_MODE_UNKNOWN)
    4382:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <twi_mode>
    4386:	81 11       	cpse	r24, r1
    4388:	23 c0       	rjmp	.+70     	; 0x43d0 <main+0x338>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:69
    return;

// Enable input pullup for the default or pin swapped pin position
  if ((PORTMUX.TWISPIROUTEA & 0x30) == TWI_MUX)
    438a:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
    438e:	80 73       	andi	r24, 0x30	; 48
    4390:	09 f0       	breq	.+2      	; 0x4394 <main+0x2fc>
    4392:	ce c0       	rjmp	.+412    	; 0x4530 <main+0x498>
pinMode():
    4394:	62 e0       	ldi	r22, 0x02	; 2
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    439c:	62 e0       	ldi	r22, 0x02	; 2
    439e:	83 e0       	ldi	r24, 0x03	; 3
    43a0:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
TWI_MasterInit():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:90
    pinMode(PIN_WIRE_SDA_PINSWAP_1, INPUT_PULLUP); // Enable PC2 pullup
    pinMode(PIN_WIRE_SCL_PINSWAP_1, INPUT_PULLUP); // Enable PC3 pullup
  }
#endif

  twi_mode = TWI_MODE_MASTER;
    43a4:	11 e0       	ldi	r17, 0x01	; 1
    43a6:	10 93 5c 28 	sts	0x285C, r17	; 0x80285c <twi_mode>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:92

  master_bytesRead = 0;
    43aa:	10 92 5b 28 	sts	0x285B, r1	; 0x80285b <master_bytesRead>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:93
  master_bytesWritten = 0;
    43ae:	10 92 5a 28 	sts	0x285A, r1	; 0x80285a <master_bytesWritten>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:94
  master_trans_status = TWIM_STATUS_READY;
    43b2:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <master_trans_status>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:95
  master_result = TWIM_RESULT_UNKNOWN;
    43b6:	10 92 58 28 	sts	0x2858, r1	; 0x802858 <master_result>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:97

  TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_ENABLE_bm;
    43ba:	81 ec       	ldi	r24, 0xC1	; 193
    43bc:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7f48a3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:98
  TWI_MasterSetBaud(frequency);
    43c0:	60 ea       	ldi	r22, 0xA0	; 160
    43c2:	76 e8       	ldi	r23, 0x86	; 134
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:99
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    43cc:	10 93 a5 08 	sts	0x08A5, r17	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:553
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if (reset && (rstPin >= 0)) {
    43d0:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <display+0x28>
    43d4:	87 fd       	sbrc	r24, 7
    43d6:	24 c0       	rjmp	.+72     	; 0x4420 <main+0x388>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:554
    pinMode(rstPin, OUTPUT);
    43d8:	61 e0       	ldi	r22, 0x01	; 1
    43da:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:555
    digitalWrite(rstPin, HIGH);
    43de:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <display+0x28>
digitalWrite():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:137
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    43e2:	89 32       	cpi	r24, 0x29	; 41
    43e4:	18 f4       	brcc	.+6      	; 0x43ec <main+0x354>
    43e6:	61 e0       	ldi	r22, 0x01	; 1
    43e8:	0e 94 42 07 	call	0xe84	; 0xe84 <digitalWrite.part.2>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:556
    delay(1);                   // VDD goes high at start, pause for 1 ms
    43ec:	61 e0       	ldi	r22, 0x01	; 1
    43ee:	70 e0       	ldi	r23, 0x00	; 0
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:557
    digitalWrite(rstPin, LOW);  // Bring reset low
    43f8:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <display+0x28>
digitalWrite():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:137
    43fc:	89 32       	cpi	r24, 0x29	; 41
    43fe:	18 f4       	brcc	.+6      	; 0x4406 <main+0x36e>
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	0e 94 42 07 	call	0xe84	; 0xe84 <digitalWrite.part.2>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:558
    delay(10);                  // Wait 10 ms
    4406:	6a e0       	ldi	r22, 0x0A	; 10
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <delay>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:559
    digitalWrite(rstPin, HIGH); // Bring out of reset
    4412:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <display+0x28>
digitalWrite():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\cores\coreX-corefiles/wiring_digital.c:137
    4416:	89 32       	cpi	r24, 0x29	; 41
    4418:	18 f4       	brcc	.+6      	; 0x4420 <main+0x388>
    441a:	61 e0       	ldi	r22, 0x01	; 1
    441c:	0e 94 42 07 	call	0xe84	; 0xe84 <digitalWrite.part.2>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:562
  }

  TRANSACTION_START
    4420:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    4424:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    4428:	89 2b       	or	r24, r25
    442a:	09 f4       	brne	.+2      	; 0x442e <main+0x396>
    442c:	92 c1       	rjmp	.+804    	; 0x4752 <main+0x6ba>
setClock():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
  TWI_Disable();
}

void TwoWire::setClock(uint32_t frequency)
{
  TWI_MasterSetBaud(frequency);
    442e:	60 91 cc 28 	lds	r22, 0x28CC	; 0x8028cc <display+0x35>
    4432:	70 91 cd 28 	lds	r23, 0x28CD	; 0x8028cd <display+0x36>
    4436:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <display+0x37>
    443a:	90 91 cf 28 	lds	r25, 0x28CF	; 0x8028cf <display+0x38>
    443e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:569
  // Init sequence
  static const uint8_t PROGMEM init1[] = {SSD1306_DISPLAYOFF,         // 0xAE
                                          SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
                                          0x80, // the suggested ratio 0x80
                                          SSD1306_SETMULTIPLEX}; // 0xA8
  ssd1306_commandList(init1, sizeof(init1));
    4442:	64 e0       	ldi	r22, 0x04	; 4
    4444:	83 ea       	ldi	r24, 0xA3	; 163
    4446:	96 e0       	ldi	r25, 0x06	; 6
    4448:	0e 94 95 0b 	call	0x172a	; 0x172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:570
  ssd1306_command1(HEIGHT - 1);
    444c:	60 91 9d 28 	lds	r22, 0x289D	; 0x80289d <display+0x6>
    4450:	61 50       	subi	r22, 0x01	; 1
    4452:	87 e9       	ldi	r24, 0x97	; 151
    4454:	98 e2       	ldi	r25, 0x28	; 40
    4456:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:576

  static const uint8_t PROGMEM init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
                                          0x0,                      // no offset
                                          SSD1306_SETSTARTLINE | 0x0, // line #0
                                          SSD1306_CHARGEPUMP};        // 0x8D
  ssd1306_commandList(init2, sizeof(init2));
    445a:	64 e0       	ldi	r22, 0x04	; 4
    445c:	8f e9       	ldi	r24, 0x9F	; 159
    445e:	96 e0       	ldi	r25, 0x06	; 6
    4460:	0e 94 95 0b 	call	0x172a	; 0x172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:578

  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    4464:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <display+0x22>
main():
    4468:	64 e1       	ldi	r22, 0x14	; 20
begin():
    446a:	81 30       	cpi	r24, 0x01	; 1
    446c:	09 f4       	brne	.+2      	; 0x4470 <main+0x3d8>
main():
    446e:	60 e1       	ldi	r22, 0x10	; 16
begin():
    4470:	87 e9       	ldi	r24, 0x97	; 151
    4472:	98 e2       	ldi	r25, 0x28	; 40
    4474:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:584

  static const uint8_t PROGMEM init3[] = {SSD1306_MEMORYMODE, // 0x20
                                          0x00, // 0x0 act like ks0108
                                          SSD1306_SEGREMAP | 0x1,
                                          SSD1306_COMSCANDEC};
  ssd1306_commandList(init3, sizeof(init3));
    4478:	64 e0       	ldi	r22, 0x04	; 4
    447a:	8b e9       	ldi	r24, 0x9B	; 155
    447c:	96 e0       	ldi	r25, 0x06	; 6
    447e:	0e 94 95 0b 	call	0x172a	; 0x172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:587

  uint8_t comPins = 0x02;
  contrast = 0x8F;
    4482:	8f e8       	ldi	r24, 0x8F	; 143
    4484:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <display+0x3d>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:589

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    4488:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <display+0x4>
    448c:	90 91 9c 28 	lds	r25, 0x289C	; 0x80289c <display+0x5>
    4490:	80 38       	cpi	r24, 0x80	; 128
    4492:	91 05       	cpc	r25, r1
    4494:	09 f0       	breq	.+2      	; 0x4498 <main+0x400>
    4496:	76 c1       	rjmp	.+748    	; 0x4784 <main+0x6ec>
    4498:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <display+0x6>
    449c:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <display+0x7>
    44a0:	80 34       	cpi	r24, 0x40	; 64
    44a2:	91 05       	cpc	r25, r1
    44a4:	09 f0       	breq	.+2      	; 0x44a8 <main+0x410>
    44a6:	7e c1       	rjmp	.+764    	; 0x47a4 <main+0x70c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:594
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    44a8:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <display+0x22>
    44ac:	81 30       	cpi	r24, 0x01	; 1
    44ae:	09 f4       	brne	.+2      	; 0x44b2 <main+0x41a>
    44b0:	67 c1       	rjmp	.+718    	; 0x4780 <main+0x6e8>
main():
    44b2:	8f ec       	ldi	r24, 0xCF	; 207
begin():
    44b4:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <display+0x3d>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:593

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    44b8:	12 e1       	ldi	r17, 0x12	; 18
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:602
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  } else {
    // Other screen varieties -- TBD
  }

  ssd1306_command1(SSD1306_SETCOMPINS);
    44ba:	6a ed       	ldi	r22, 0xDA	; 218
    44bc:	87 e9       	ldi	r24, 0x97	; 151
    44be:	98 e2       	ldi	r25, 0x28	; 40
    44c0:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:603
  ssd1306_command1(comPins);
    44c4:	61 2f       	mov	r22, r17
    44c6:	87 e9       	ldi	r24, 0x97	; 151
    44c8:	98 e2       	ldi	r25, 0x28	; 40
    44ca:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:604
  ssd1306_command1(SSD1306_SETCONTRAST);
    44ce:	61 e8       	ldi	r22, 0x81	; 129
    44d0:	87 e9       	ldi	r24, 0x97	; 151
    44d2:	98 e2       	ldi	r25, 0x28	; 40
    44d4:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:605
  ssd1306_command1(contrast);
    44d8:	60 91 d4 28 	lds	r22, 0x28D4	; 0x8028d4 <display+0x3d>
    44dc:	87 e9       	ldi	r24, 0x97	; 151
    44de:	98 e2       	ldi	r25, 0x28	; 40
    44e0:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:607

  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    44e4:	69 ed       	ldi	r22, 0xD9	; 217
    44e6:	87 e9       	ldi	r24, 0x97	; 151
    44e8:	98 e2       	ldi	r25, 0x28	; 40
    44ea:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:608
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    44ee:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <display+0x22>
main():
    44f2:	61 ef       	ldi	r22, 0xF1	; 241
begin():
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	09 f4       	brne	.+2      	; 0x44fa <main+0x462>
main():
    44f8:	62 e2       	ldi	r22, 0x22	; 34
begin():
    44fa:	87 e9       	ldi	r24, 0x97	; 151
    44fc:	98 e2       	ldi	r25, 0x28	; 40
    44fe:	0e 94 44 0c 	call	0x1888	; 0x1888 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:616
      0x40,
      SSD1306_DISPLAYALLON_RESUME, // 0xA4
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));
    4502:	66 e0       	ldi	r22, 0x06	; 6
    4504:	85 e9       	ldi	r24, 0x95	; 149
    4506:	96 e0       	ldi	r25, 0x06	; 6
    4508:	0e 94 95 0b 	call	0x172a	; 0x172a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.32]>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:618

  TRANSACTION_END
    450c:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <display+0x1d>
    4510:	90 91 b5 28 	lds	r25, 0x28B5	; 0x8028b5 <display+0x1e>
    4514:	89 2b       	or	r24, r25
    4516:	09 f4       	brne	.+2      	; 0x451a <main+0x482>
    4518:	49 c1       	rjmp	.+658    	; 0x47ac <main+0x714>
setClock():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src/Wire.cpp:174
    451a:	60 91 d0 28 	lds	r22, 0x28D0	; 0x8028d0 <display+0x39>
    451e:	70 91 d1 28 	lds	r23, 0x28D1	; 0x8028d1 <display+0x3a>
    4522:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <display+0x3b>
    4526:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <display+0x3c>
    452a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <TWI_MasterSetBaud>
    452e:	9a ce       	rjmp	.-716    	; 0x4264 <main+0x1cc>
TWI_MasterInit():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\Wire\src\utility/twi.c:83

    pinMode(PIN_WIRE_SDA, INPUT_PULLUP); // Enable PA2 pullup
    pinMode(PIN_WIRE_SCL, INPUT_PULLUP); // Enable PA3 pullup
  }
#if defined(PIN_WIRE_SDA_PINSWAP_1) && defined(PIN_WIRE_SCL_PINSWAP_1)
  else if ((PORTMUX.TWISPIROUTEA & 0x30) == TWI_MUX_PINSWAP)
    4530:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
    4534:	80 73       	andi	r24, 0x30	; 48
    4536:	80 32       	cpi	r24, 0x20	; 32
    4538:	09 f0       	breq	.+2      	; 0x453c <main+0x4a4>
    453a:	34 cf       	rjmp	.-408    	; 0x43a4 <main+0x30c>
pinMode():
    453c:	62 e0       	ldi	r22, 0x02	; 2
    453e:	80 e1       	ldi	r24, 0x10	; 16
    4540:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    4544:	62 e0       	ldi	r22, 0x02	; 2
    4546:	81 e1       	ldi	r24, 0x11	; 17
    4548:	2b cf       	rjmp	.-426    	; 0x43a0 <main+0x308>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:524
    // can accept different SDA/SCL pins, or if two SSD1306 instances
    // with different addresses -- only a single begin() is needed).
    if (periphBegin)
      wire->begin();
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    454a:	61 e0       	ldi	r22, 0x01	; 1
    454c:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <display+0x26>
    4550:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:525
    pinMode(csPin, OUTPUT); // Same for chip select
    4554:	61 e0       	ldi	r22, 0x01	; 1
    4556:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <display+0x27>
    455a:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:527
#ifdef HAVE_PORTREG
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    455e:	e0 91 bd 28 	lds	r30, 0x28BD	; 0x8028bd <display+0x26>
    4562:	e9 32       	cpi	r30, 0x29	; 41
    4564:	0c f0       	brlt	.+2      	; 0x4568 <main+0x4d0>
    4566:	82 c0       	rjmp	.+260    	; 0x466c <main+0x5d4>
    4568:	ae 2f       	mov	r26, r30
    456a:	0e 2e       	mov	r0, r30
    456c:	00 0c       	add	r0, r0
    456e:	bb 0b       	sbc	r27, r27
    4570:	aa 5d       	subi	r26, 0xDA	; 218
    4572:	bf 46       	sbci	r27, 0x6F	; 111
    4574:	8c 91       	ld	r24, X
    4576:	86 30       	cpi	r24, 0x06	; 6
    4578:	08 f0       	brcs	.+2      	; 0x457c <main+0x4e4>
    457a:	78 c0       	rjmp	.+240    	; 0x466c <main+0x5d4>
    457c:	50 e2       	ldi	r21, 0x20	; 32
    457e:	85 9f       	mul	r24, r21
    4580:	c0 01       	movw	r24, r0
    4582:	11 24       	eor	r1, r1
    4584:	9c 5f       	subi	r25, 0xFC	; 252
    4586:	04 96       	adiw	r24, 0x04	; 4
    4588:	80 93 c4 28 	sts	0x28C4, r24	; 0x8028c4 <display+0x2d>
    458c:	90 93 c5 28 	sts	0x28C5, r25	; 0x8028c5 <display+0x2e>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:528
    dcPinMask = digitalPinToBitMask(dcPin);
    4590:	8f ef       	ldi	r24, 0xFF	; 255
begin():
    4592:	e9 32       	cpi	r30, 0x29	; 41
    4594:	34 f4       	brge	.+12     	; 0x45a2 <main+0x50a>
    4596:	0e 2e       	mov	r0, r30
    4598:	00 0c       	add	r0, r0
    459a:	ff 0b       	sbc	r31, r31
    459c:	e3 50       	subi	r30, 0x03	; 3
    459e:	f0 47       	sbci	r31, 0x70	; 112
    45a0:	80 81       	ld	r24, Z
    45a2:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <display+0x33>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:529
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    45a6:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <display+0x27>
    45aa:	a9 32       	cpi	r26, 0x29	; 41
    45ac:	0c f0       	brlt	.+2      	; 0x45b0 <main+0x518>
    45ae:	61 c0       	rjmp	.+194    	; 0x4672 <main+0x5da>
    45b0:	ea 2f       	mov	r30, r26
    45b2:	0a 2e       	mov	r0, r26
    45b4:	00 0c       	add	r0, r0
    45b6:	ff 0b       	sbc	r31, r31
    45b8:	ea 5d       	subi	r30, 0xDA	; 218
    45ba:	ff 46       	sbci	r31, 0x6F	; 111
    45bc:	e0 81       	ld	r30, Z
    45be:	e6 30       	cpi	r30, 0x06	; 6
    45c0:	08 f0       	brcs	.+2      	; 0x45c4 <main+0x52c>
    45c2:	57 c0       	rjmp	.+174    	; 0x4672 <main+0x5da>
    45c4:	80 e2       	ldi	r24, 0x20	; 32
    45c6:	e8 9f       	mul	r30, r24
    45c8:	f0 01       	movw	r30, r0
    45ca:	11 24       	eor	r1, r1
    45cc:	fc 5f       	subi	r31, 0xFC	; 252
    45ce:	cf 01       	movw	r24, r30
    45d0:	04 96       	adiw	r24, 0x04	; 4
    45d2:	80 93 c6 28 	sts	0x28C6, r24	; 0x8028c6 <display+0x2f>
    45d6:	90 93 c7 28 	sts	0x28C7, r25	; 0x8028c7 <display+0x30>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:530
    csPinMask = digitalPinToBitMask(csPin);
    45da:	8f ef       	ldi	r24, 0xFF	; 255
begin():
    45dc:	a9 32       	cpi	r26, 0x29	; 41
    45de:	34 f4       	brge	.+12     	; 0x45ec <main+0x554>
    45e0:	0a 2e       	mov	r0, r26
    45e2:	00 0c       	add	r0, r0
    45e4:	bb 0b       	sbc	r27, r27
    45e6:	a3 50       	subi	r26, 0x03	; 3
    45e8:	b0 47       	sbci	r27, 0x70	; 112
    45ea:	8c 91       	ld	r24, X
    45ec:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <display+0x34>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:532
#endif
    SSD1306_DESELECT
    45f0:	94 81       	ldd	r25, Z+4	; 0x04
    45f2:	89 2b       	or	r24, r25
    45f4:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:533
    if (spi) { // Hardware SPI
    45f6:	e0 91 b2 28 	lds	r30, 0x28B2	; 0x8028b2 <display+0x1b>
    45fa:	f0 91 b3 28 	lds	r31, 0x28B3	; 0x8028b3 <display+0x1c>
    45fe:	30 97       	sbiw	r30, 0x00	; 0
    4600:	09 f4       	brne	.+2      	; 0x4604 <main+0x56c>
    4602:	4c c0       	rjmp	.+152    	; 0x469c <main+0x604>
init():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:131
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    4604:	85 81       	ldd	r24, Z+5	; 0x05
    4606:	81 11       	cpse	r24, r1
    4608:	0c c0       	rjmp	.+24     	; 0x4622 <main+0x58a>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:133
    return;
  interruptMode = SPI_IMODE_NONE;
    460a:	16 82       	std	Z+6, r1	; 0x06
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:134
  interruptSave = 0;
    460c:	17 82       	std	Z+7, r1	; 0x07
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:135
  interruptMask_lo = 0;
    460e:	10 86       	std	Z+8, r1	; 0x08
    4610:	11 86       	std	Z+9, r1	; 0x09
    4612:	12 86       	std	Z+10, r1	; 0x0a
    4614:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:136
  interruptMask_hi = 0;
    4616:	14 86       	std	Z+12, r1	; 0x0c
    4618:	15 86       	std	Z+13, r1	; 0x0d
    461a:	16 86       	std	Z+14, r1	; 0x0e
    461c:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:137
  initialized = true;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	85 83       	std	Z+5, r24	; 0x05
begin():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:99

void SPIClass::begin()
{
  init();

  PORTMUX.TWISPIROUTEA = _uc_mux | (PORTMUX.TWISPIROUTEA & ~3);
    4622:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
    4626:	8c 7f       	andi	r24, 0xFC	; 252
    4628:	94 81       	ldd	r25, Z+4	; 0x04
    462a:	89 2b       	or	r24, r25
    462c:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:102

  // MISO is set to input by the controller
  if(_uc_mux == SPI_MUX)
    4630:	84 81       	ldd	r24, Z+4	; 0x04
    4632:	81 11       	cpse	r24, r1
    4634:	21 c0       	rjmp	.+66     	; 0x4678 <main+0x5e0>
pinMode():
    4636:	61 e0       	ldi	r22, 0x01	; 1
    4638:	84 e0       	ldi	r24, 0x04	; 4
    463a:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	86 e0       	ldi	r24, 0x06	; 6
    4642:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
begin():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:123
      pinMode(PIN_SPI_SCK_PINSWAP_2, OUTPUT);
    }
  #endif
  
  // We don't need HW SS since salve/master mode is selected via registers
  SPI0.CTRLB |= (SPI_SSD_bm);
    4646:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f48c1>
    464a:	84 60       	ori	r24, 0x04	; 4
    464c:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f48c1>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:124
  SPI0.CTRLA |= (SPI_ENABLE_bm | SPI_MASTER_bm);
    4650:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f48c0>
    4654:	81 62       	ori	r24, 0x21	; 33
    4656:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f48c0>
    465a:	90 91 63 28 	lds	r25, 0x2863	; 0x802863 <DEFAULT_SPI_SETTINGS>
    465e:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <DEFAULT_SPI_SETTINGS+0x1>
config():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:142
  initialized = true;
}

void SPIClass::config(SPISettings settings)
{
  SPI0.CTRLA = settings.ctrla;
    4662:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f48c0>
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:143
  SPI0.CTRLB = settings.ctrlb;
    4666:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f48c1>
    466a:	b2 ce       	rjmp	.-668    	; 0x43d0 <main+0x338>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:527
      wire->begin();
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    pinMode(csPin, OUTPUT); // Same for chip select
#ifdef HAVE_PORTREG
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	8a cf       	rjmp	.-236    	; 0x4586 <main+0x4ee>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:529
    dcPinMask = digitalPinToBitMask(dcPin);
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	e0 e0       	ldi	r30, 0x00	; 0
    4676:	ab cf       	rjmp	.-170    	; 0x45ce <main+0x536>
begin():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:108
  {
    pinMode(PIN_SPI_MOSI, OUTPUT);
    pinMode(PIN_SPI_SCK, OUTPUT);
  }
  #if defined(SPI_MUX_PINSWAP_1)
    else if(_uc_mux == SPI_MUX_PINSWAP_1)
    4678:	81 30       	cpi	r24, 0x01	; 1
    467a:	39 f4       	brne	.+14     	; 0x468a <main+0x5f2>
pinMode():
    467c:	61 e0       	ldi	r22, 0x01	; 1
    467e:	8e e0       	ldi	r24, 0x0E	; 14
    4680:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	80 e1       	ldi	r24, 0x10	; 16
    4688:	dc cf       	rjmp	.-72     	; 0x4642 <main+0x5aa>
begin():
C:\Users\Owner\AppData\Local\Arduino15\packages\MegaCoreX\hardware\megaavr\1.1.1\libraries\SPI\src/SPI.cpp:115
      pinMode(PIN_SPI_MOSI_PINSWAP_1, OUTPUT);
      pinMode(PIN_SPI_SCK_PINSWAP_1, OUTPUT);
    }
  #endif
  #if defined(SPI_MUX_PINSWAP_2)
    else if(_uc_mux == SPI_MUX_PINSWAP_2)
    468a:	82 30       	cpi	r24, 0x02	; 2
    468c:	e1 f6       	brne	.-72     	; 0x4646 <main+0x5ae>
pinMode():
    468e:	61 e0       	ldi	r22, 0x01	; 1
    4690:	8e e1       	ldi	r24, 0x1E	; 30
    4692:	0e 94 dd 06 	call	0xdba	; 0xdba <pinMode.part.1>
    4696:	61 e0       	ldi	r22, 0x01	; 1
    4698:	80 e2       	ldi	r24, 0x20	; 32
    469a:	d3 cf       	rjmp	.-90     	; 0x4642 <main+0x5aa>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:538
    if (spi) { // Hardware SPI
      // SPI peripheral begin same as wire check above.
      if (periphBegin)
        spi->begin();
    } else {                    // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    469c:	61 e0       	ldi	r22, 0x01	; 1
    469e:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <display+0x24>
    46a2:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:539
      pinMode(clkPin, OUTPUT);
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <display+0x25>
    46ac:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:541
#ifdef HAVE_PORTREG
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    46b0:	e0 91 bb 28 	lds	r30, 0x28BB	; 0x8028bb <display+0x24>
    46b4:	e9 32       	cpi	r30, 0x29	; 41
    46b6:	0c f0       	brlt	.+2      	; 0x46ba <main+0x622>
    46b8:	46 c0       	rjmp	.+140    	; 0x4746 <main+0x6ae>
    46ba:	ae 2f       	mov	r26, r30
    46bc:	0e 2e       	mov	r0, r30
    46be:	00 0c       	add	r0, r0
    46c0:	bb 0b       	sbc	r27, r27
    46c2:	aa 5d       	subi	r26, 0xDA	; 218
    46c4:	bf 46       	sbci	r27, 0x6F	; 111
    46c6:	8c 91       	ld	r24, X
    46c8:	86 30       	cpi	r24, 0x06	; 6
    46ca:	e8 f5       	brcc	.+122    	; 0x4746 <main+0x6ae>
    46cc:	20 e2       	ldi	r18, 0x20	; 32
    46ce:	82 9f       	mul	r24, r18
    46d0:	c0 01       	movw	r24, r0
    46d2:	11 24       	eor	r1, r1
    46d4:	9c 5f       	subi	r25, 0xFC	; 252
    46d6:	04 96       	adiw	r24, 0x04	; 4
    46d8:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <display+0x29>
    46dc:	90 93 c1 28 	sts	0x28C1, r25	; 0x8028c1 <display+0x2a>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:542
      mosiPinMask = digitalPinToBitMask(mosiPin);
    46e0:	8f ef       	ldi	r24, 0xFF	; 255
begin():
    46e2:	e9 32       	cpi	r30, 0x29	; 41
    46e4:	34 f4       	brge	.+12     	; 0x46f2 <main+0x65a>
    46e6:	0e 2e       	mov	r0, r30
    46e8:	00 0c       	add	r0, r0
    46ea:	ff 0b       	sbc	r31, r31
    46ec:	e3 50       	subi	r30, 0x03	; 3
    46ee:	f0 47       	sbci	r31, 0x70	; 112
    46f0:	80 81       	ld	r24, Z
    46f2:	80 93 c8 28 	sts	0x28C8, r24	; 0x8028c8 <display+0x31>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:543
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    46f6:	a0 91 bc 28 	lds	r26, 0x28BC	; 0x8028bc <display+0x25>
    46fa:	a9 32       	cpi	r26, 0x29	; 41
    46fc:	3c f5       	brge	.+78     	; 0x474c <main+0x6b4>
    46fe:	ea 2f       	mov	r30, r26
    4700:	0a 2e       	mov	r0, r26
    4702:	00 0c       	add	r0, r0
    4704:	ff 0b       	sbc	r31, r31
    4706:	ea 5d       	subi	r30, 0xDA	; 218
    4708:	ff 46       	sbci	r31, 0x6F	; 111
    470a:	e0 81       	ld	r30, Z
    470c:	e6 30       	cpi	r30, 0x06	; 6
    470e:	f0 f4       	brcc	.+60     	; 0x474c <main+0x6b4>
    4710:	40 e2       	ldi	r20, 0x20	; 32
    4712:	e4 9f       	mul	r30, r20
    4714:	f0 01       	movw	r30, r0
    4716:	11 24       	eor	r1, r1
    4718:	fc 5f       	subi	r31, 0xFC	; 252
    471a:	cf 01       	movw	r24, r30
    471c:	04 96       	adiw	r24, 0x04	; 4
    471e:	80 93 c2 28 	sts	0x28C2, r24	; 0x8028c2 <display+0x2b>
    4722:	90 93 c3 28 	sts	0x28C3, r25	; 0x8028c3 <display+0x2c>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:544
      clkPinMask = digitalPinToBitMask(clkPin);
    4726:	8f ef       	ldi	r24, 0xFF	; 255
begin():
    4728:	a9 32       	cpi	r26, 0x29	; 41
    472a:	34 f4       	brge	.+12     	; 0x4738 <main+0x6a0>
    472c:	0a 2e       	mov	r0, r26
    472e:	00 0c       	add	r0, r0
    4730:	bb 0b       	sbc	r27, r27
    4732:	a3 50       	subi	r26, 0x03	; 3
    4734:	b0 47       	sbci	r27, 0x70	; 112
    4736:	8c 91       	ld	r24, X
    4738:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <display+0x32>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:545
      *clkPort &= ~clkPinMask; // Clock low
    473c:	94 81       	ldd	r25, Z+4	; 0x04
    473e:	80 95       	com	r24
    4740:	89 23       	and	r24, r25
    4742:	84 83       	std	Z+4, r24	; 0x04
    4744:	45 ce       	rjmp	.-886    	; 0x43d0 <main+0x338>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:541
        spi->begin();
    } else {                    // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
      pinMode(clkPin, OUTPUT);
#ifdef HAVE_PORTREG
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	80 e0       	ldi	r24, 0x00	; 0
    474a:	c5 cf       	rjmp	.-118    	; 0x46d6 <main+0x63e>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:543
      mosiPinMask = digitalPinToBitMask(mosiPin);
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	e0 e0       	ldi	r30, 0x00	; 0
    4750:	e4 cf       	rjmp	.-56     	; 0x471a <main+0x682>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:562
    digitalWrite(rstPin, LOW);  // Bring reset low
    delay(10);                  // Wait 10 ms
    digitalWrite(rstPin, HIGH); // Bring out of reset
  }

  TRANSACTION_START
    4752:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
    4756:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	31 f0       	breq	.+12     	; 0x476a <main+0x6d2>
    475e:	60 91 d5 28 	lds	r22, 0x28D5	; 0x8028d5 <display+0x3e>
    4762:	70 91 d6 28 	lds	r23, 0x28D6	; 0x8028d6 <display+0x3f>
    4766:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <SPIClass::beginTransaction(SPISettings)>
    476a:	e0 91 c6 28 	lds	r30, 0x28C6	; 0x8028c6 <display+0x2f>
    476e:	f0 91 c7 28 	lds	r31, 0x28C7	; 0x8028c7 <display+0x30>
    4772:	90 81       	ld	r25, Z
    4774:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <display+0x34>
    4778:	80 95       	com	r24
    477a:	89 23       	and	r24, r25
    477c:	80 83       	st	Z, r24
    477e:	61 ce       	rjmp	.-830    	; 0x4442 <main+0x3aa>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:594
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    4780:	8f e9       	ldi	r24, 0x9F	; 159
    4782:	98 ce       	rjmp	.-720    	; 0x44b4 <main+0x41c>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:595
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    4784:	80 36       	cpi	r24, 0x60	; 96
    4786:	91 05       	cpc	r25, r1
    4788:	69 f4       	brne	.+26     	; 0x47a4 <main+0x70c>
    478a:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <display+0x6>
    478e:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <display+0x7>
    4792:	40 97       	sbiw	r24, 0x10	; 16
    4794:	39 f4       	brne	.+14     	; 0x47a4 <main+0x70c>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:597
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    4796:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <display+0x22>
    479a:	81 30       	cpi	r24, 0x01	; 1
    479c:	29 f0       	breq	.+10     	; 0x47a8 <main+0x710>
main():
    479e:	8f ea       	ldi	r24, 0xAF	; 175
begin():
    47a0:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <display+0x3d>
main():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:590

  uint8_t comPins = 0x02;
  contrast = 0x8F;

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    47a4:	12 e0       	ldi	r17, 0x02	; 2
    47a6:	89 ce       	rjmp	.-750    	; 0x44ba <main+0x422>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:597
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    47a8:	80 e1       	ldi	r24, 0x10	; 16
    47aa:	fa cf       	rjmp	.-12     	; 0x47a0 <main+0x708>
begin():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:618
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END
    47ac:	e0 91 c6 28 	lds	r30, 0x28C6	; 0x8028c6 <display+0x2f>
    47b0:	f0 91 c7 28 	lds	r31, 0x28C7	; 0x8028c7 <display+0x30>
    47b4:	80 81       	ld	r24, Z
    47b6:	90 91 cb 28 	lds	r25, 0x28CB	; 0x8028cb <display+0x34>
    47ba:	89 2b       	or	r24, r25
    47bc:	80 83       	st	Z, r24
    47be:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <display+0x1b>
    47c2:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <display+0x1c>
    47c6:	00 97       	sbiw	r24, 0x00	; 0
    47c8:	09 f4       	brne	.+2      	; 0x47cc <main+0x734>
    47ca:	4c cd       	rjmp	.-1384   	; 0x4264 <main+0x1cc>
    47cc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <SPIClass::endTransaction()>
    47d0:	49 cd       	rjmp	.-1390   	; 0x4264 <main+0x1cc>

000047d2 <_GLOBAL__sub_D_display>:
__base_dtor ():
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:338
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
    47d2:	8f eb       	ldi	r24, 0xBF	; 191
    47d4:	90 e9       	ldi	r25, 0x90	; 144
    47d6:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <display>
    47da:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <display+0x1>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:339
  if (buffer) {
    47de:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <display+0x1f>
    47e2:	90 91 b7 28 	lds	r25, 0x28B7	; 0x8028b7 <display+0x20>
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	09 f0       	breq	.+2      	; 0x47ec <_GLOBAL__sub_D_display+0x1a>
C:\Users\Owner\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:340
    free(buffer);
    47ea:	64 c3       	rjmp	.+1736   	; 0x4eb4 <free>
_GLOBAL__sub_D_display():
E:\Main\Projects\Solder Reflow Plate\SW1.0_HW3.0_70by50mm/SW1.0_HW3.0_70by50mm.ino:519
  return v / 20 / vConvert; //Average, convert to V, and return
}

void loop() {
  // Not used
}
    47ec:	08 95       	ret

000047ee <__subsf3>:
__subsf3():
    47ee:	50 58       	subi	r21, 0x80	; 128

000047f0 <__addsf3>:
    47f0:	bb 27       	eor	r27, r27
    47f2:	aa 27       	eor	r26, r26
    47f4:	0e d0       	rcall	.+28     	; 0x4812 <__addsf3x>
    47f6:	70 c1       	rjmp	.+736    	; 0x4ad8 <__fp_round>
__addsf3():
    47f8:	61 d1       	rcall	.+706    	; 0x4abc <__fp_pscA>
    47fa:	30 f0       	brcs	.+12     	; 0x4808 <__addsf3+0x18>
    47fc:	66 d1       	rcall	.+716    	; 0x4aca <__fp_pscB>
    47fe:	20 f0       	brcs	.+8      	; 0x4808 <__addsf3+0x18>
    4800:	31 f4       	brne	.+12     	; 0x480e <__addsf3+0x1e>
    4802:	9f 3f       	cpi	r25, 0xFF	; 255
    4804:	11 f4       	brne	.+4      	; 0x480a <__addsf3+0x1a>
    4806:	1e f4       	brtc	.+6      	; 0x480e <__addsf3+0x1e>
    4808:	56 c1       	rjmp	.+684    	; 0x4ab6 <__fp_nan>
    480a:	0e f4       	brtc	.+2      	; 0x480e <__addsf3+0x1e>
    480c:	e0 95       	com	r30
    480e:	e7 fb       	bst	r30, 7
    4810:	4c c1       	rjmp	.+664    	; 0x4aaa <__fp_inf>

00004812 <__addsf3x>:
__addsf3x():
    4812:	e9 2f       	mov	r30, r25
    4814:	72 d1       	rcall	.+740    	; 0x4afa <__fp_split3>
    4816:	80 f3       	brcs	.-32     	; 0x47f8 <__addsf3+0x8>
    4818:	ba 17       	cp	r27, r26
    481a:	62 07       	cpc	r22, r18
    481c:	73 07       	cpc	r23, r19
    481e:	84 07       	cpc	r24, r20
    4820:	95 07       	cpc	r25, r21
    4822:	18 f0       	brcs	.+6      	; 0x482a <__addsf3x+0x18>
    4824:	71 f4       	brne	.+28     	; 0x4842 <__addsf3x+0x30>
    4826:	9e f5       	brtc	.+102    	; 0x488e <__addsf3x+0x7c>
    4828:	8a c1       	rjmp	.+788    	; 0x4b3e <__fp_zero>
    482a:	0e f4       	brtc	.+2      	; 0x482e <__addsf3x+0x1c>
    482c:	e0 95       	com	r30
    482e:	0b 2e       	mov	r0, r27
    4830:	ba 2f       	mov	r27, r26
    4832:	a0 2d       	mov	r26, r0
    4834:	0b 01       	movw	r0, r22
    4836:	b9 01       	movw	r22, r18
    4838:	90 01       	movw	r18, r0
    483a:	0c 01       	movw	r0, r24
    483c:	ca 01       	movw	r24, r20
    483e:	a0 01       	movw	r20, r0
    4840:	11 24       	eor	r1, r1
    4842:	ff 27       	eor	r31, r31
    4844:	59 1b       	sub	r21, r25
    4846:	99 f0       	breq	.+38     	; 0x486e <__addsf3x+0x5c>
    4848:	59 3f       	cpi	r21, 0xF9	; 249
    484a:	50 f4       	brcc	.+20     	; 0x4860 <__addsf3x+0x4e>
    484c:	50 3e       	cpi	r21, 0xE0	; 224
    484e:	68 f1       	brcs	.+90     	; 0x48aa <__addsf3x+0x98>
    4850:	1a 16       	cp	r1, r26
    4852:	f0 40       	sbci	r31, 0x00	; 0
    4854:	a2 2f       	mov	r26, r18
    4856:	23 2f       	mov	r18, r19
    4858:	34 2f       	mov	r19, r20
    485a:	44 27       	eor	r20, r20
    485c:	58 5f       	subi	r21, 0xF8	; 248
    485e:	f3 cf       	rjmp	.-26     	; 0x4846 <__addsf3x+0x34>
    4860:	46 95       	lsr	r20
    4862:	37 95       	ror	r19
    4864:	27 95       	ror	r18
    4866:	a7 95       	ror	r26
    4868:	f0 40       	sbci	r31, 0x00	; 0
    486a:	53 95       	inc	r21
    486c:	c9 f7       	brne	.-14     	; 0x4860 <__addsf3x+0x4e>
    486e:	7e f4       	brtc	.+30     	; 0x488e <__addsf3x+0x7c>
    4870:	1f 16       	cp	r1, r31
    4872:	ba 0b       	sbc	r27, r26
    4874:	62 0b       	sbc	r22, r18
    4876:	73 0b       	sbc	r23, r19
    4878:	84 0b       	sbc	r24, r20
    487a:	ba f0       	brmi	.+46     	; 0x48aa <__addsf3x+0x98>
    487c:	91 50       	subi	r25, 0x01	; 1
    487e:	a1 f0       	breq	.+40     	; 0x48a8 <__addsf3x+0x96>
    4880:	ff 0f       	add	r31, r31
    4882:	bb 1f       	adc	r27, r27
    4884:	66 1f       	adc	r22, r22
    4886:	77 1f       	adc	r23, r23
    4888:	88 1f       	adc	r24, r24
    488a:	c2 f7       	brpl	.-16     	; 0x487c <__addsf3x+0x6a>
    488c:	0e c0       	rjmp	.+28     	; 0x48aa <__addsf3x+0x98>
    488e:	ba 0f       	add	r27, r26
    4890:	62 1f       	adc	r22, r18
    4892:	73 1f       	adc	r23, r19
    4894:	84 1f       	adc	r24, r20
    4896:	48 f4       	brcc	.+18     	; 0x48aa <__addsf3x+0x98>
    4898:	87 95       	ror	r24
    489a:	77 95       	ror	r23
    489c:	67 95       	ror	r22
    489e:	b7 95       	ror	r27
    48a0:	f7 95       	ror	r31
    48a2:	9e 3f       	cpi	r25, 0xFE	; 254
    48a4:	08 f0       	brcs	.+2      	; 0x48a8 <__addsf3x+0x96>
    48a6:	b3 cf       	rjmp	.-154    	; 0x480e <__addsf3+0x1e>
    48a8:	93 95       	inc	r25
    48aa:	88 0f       	add	r24, r24
    48ac:	08 f0       	brcs	.+2      	; 0x48b0 <__addsf3x+0x9e>
    48ae:	99 27       	eor	r25, r25
    48b0:	ee 0f       	add	r30, r30
    48b2:	97 95       	ror	r25
    48b4:	87 95       	ror	r24
    48b6:	08 95       	ret

000048b8 <__cmpsf2>:
    48b8:	d4 d0       	rcall	.+424    	; 0x4a62 <__fp_cmp>
    48ba:	08 f4       	brcc	.+2      	; 0x48be <__cmpsf2+0x6>
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	08 95       	ret

000048c0 <__divsf3>:
    48c0:	0c d0       	rcall	.+24     	; 0x48da <__divsf3x>
    48c2:	0a c1       	rjmp	.+532    	; 0x4ad8 <__fp_round>
    48c4:	02 d1       	rcall	.+516    	; 0x4aca <__fp_pscB>
    48c6:	40 f0       	brcs	.+16     	; 0x48d8 <__divsf3+0x18>
    48c8:	f9 d0       	rcall	.+498    	; 0x4abc <__fp_pscA>
    48ca:	30 f0       	brcs	.+12     	; 0x48d8 <__divsf3+0x18>
    48cc:	21 f4       	brne	.+8      	; 0x48d6 <__divsf3+0x16>
    48ce:	5f 3f       	cpi	r21, 0xFF	; 255
    48d0:	19 f0       	breq	.+6      	; 0x48d8 <__divsf3+0x18>
    48d2:	eb c0       	rjmp	.+470    	; 0x4aaa <__fp_inf>
    48d4:	51 11       	cpse	r21, r1
    48d6:	34 c1       	rjmp	.+616    	; 0x4b40 <__fp_szero>
    48d8:	ee c0       	rjmp	.+476    	; 0x4ab6 <__fp_nan>

000048da <__divsf3x>:
    48da:	0f d1       	rcall	.+542    	; 0x4afa <__fp_split3>
    48dc:	98 f3       	brcs	.-26     	; 0x48c4 <__divsf3+0x4>

000048de <__divsf3_pse>:
__divsf3_pse():
    48de:	99 23       	and	r25, r25
    48e0:	c9 f3       	breq	.-14     	; 0x48d4 <__divsf3+0x14>
    48e2:	55 23       	and	r21, r21
    48e4:	b1 f3       	breq	.-20     	; 0x48d2 <__divsf3+0x12>
    48e6:	95 1b       	sub	r25, r21
    48e8:	55 0b       	sbc	r21, r21
    48ea:	bb 27       	eor	r27, r27
    48ec:	aa 27       	eor	r26, r26
    48ee:	62 17       	cp	r22, r18
    48f0:	73 07       	cpc	r23, r19
    48f2:	84 07       	cpc	r24, r20
    48f4:	38 f0       	brcs	.+14     	; 0x4904 <__divsf3_pse+0x26>
    48f6:	9f 5f       	subi	r25, 0xFF	; 255
    48f8:	5f 4f       	sbci	r21, 0xFF	; 255
    48fa:	22 0f       	add	r18, r18
    48fc:	33 1f       	adc	r19, r19
    48fe:	44 1f       	adc	r20, r20
    4900:	aa 1f       	adc	r26, r26
    4902:	a9 f3       	breq	.-22     	; 0x48ee <__divsf3_pse+0x10>
    4904:	33 d0       	rcall	.+102    	; 0x496c <__divsf3_pse+0x8e>
    4906:	0e 2e       	mov	r0, r30
    4908:	3a f0       	brmi	.+14     	; 0x4918 <__divsf3_pse+0x3a>
    490a:	e0 e8       	ldi	r30, 0x80	; 128
    490c:	30 d0       	rcall	.+96     	; 0x496e <__divsf3_pse+0x90>
    490e:	91 50       	subi	r25, 0x01	; 1
    4910:	50 40       	sbci	r21, 0x00	; 0
    4912:	e6 95       	lsr	r30
    4914:	00 1c       	adc	r0, r0
    4916:	ca f7       	brpl	.-14     	; 0x490a <__divsf3_pse+0x2c>
    4918:	29 d0       	rcall	.+82     	; 0x496c <__divsf3_pse+0x8e>
    491a:	fe 2f       	mov	r31, r30
    491c:	27 d0       	rcall	.+78     	; 0x496c <__divsf3_pse+0x8e>
    491e:	66 0f       	add	r22, r22
    4920:	77 1f       	adc	r23, r23
    4922:	88 1f       	adc	r24, r24
    4924:	bb 1f       	adc	r27, r27
    4926:	26 17       	cp	r18, r22
    4928:	37 07       	cpc	r19, r23
    492a:	48 07       	cpc	r20, r24
    492c:	ab 07       	cpc	r26, r27
    492e:	b0 e8       	ldi	r27, 0x80	; 128
    4930:	09 f0       	breq	.+2      	; 0x4934 <__divsf3_pse+0x56>
    4932:	bb 0b       	sbc	r27, r27
    4934:	80 2d       	mov	r24, r0
    4936:	bf 01       	movw	r22, r30
    4938:	ff 27       	eor	r31, r31
    493a:	93 58       	subi	r25, 0x83	; 131
    493c:	5f 4f       	sbci	r21, 0xFF	; 255
    493e:	2a f0       	brmi	.+10     	; 0x494a <__divsf3_pse+0x6c>
    4940:	9e 3f       	cpi	r25, 0xFE	; 254
    4942:	51 05       	cpc	r21, r1
    4944:	68 f0       	brcs	.+26     	; 0x4960 <__divsf3_pse+0x82>
    4946:	b1 c0       	rjmp	.+354    	; 0x4aaa <__fp_inf>
    4948:	fb c0       	rjmp	.+502    	; 0x4b40 <__fp_szero>
    494a:	5f 3f       	cpi	r21, 0xFF	; 255
    494c:	ec f3       	brlt	.-6      	; 0x4948 <__divsf3_pse+0x6a>
    494e:	98 3e       	cpi	r25, 0xE8	; 232
    4950:	dc f3       	brlt	.-10     	; 0x4948 <__divsf3_pse+0x6a>
    4952:	86 95       	lsr	r24
    4954:	77 95       	ror	r23
    4956:	67 95       	ror	r22
    4958:	b7 95       	ror	r27
    495a:	f7 95       	ror	r31
    495c:	9f 5f       	subi	r25, 0xFF	; 255
    495e:	c9 f7       	brne	.-14     	; 0x4952 <__divsf3_pse+0x74>
    4960:	88 0f       	add	r24, r24
    4962:	91 1d       	adc	r25, r1
    4964:	96 95       	lsr	r25
    4966:	87 95       	ror	r24
    4968:	97 f9       	bld	r25, 7
    496a:	08 95       	ret
    496c:	e1 e0       	ldi	r30, 0x01	; 1
    496e:	66 0f       	add	r22, r22
    4970:	77 1f       	adc	r23, r23
    4972:	88 1f       	adc	r24, r24
    4974:	bb 1f       	adc	r27, r27
    4976:	62 17       	cp	r22, r18
    4978:	73 07       	cpc	r23, r19
    497a:	84 07       	cpc	r24, r20
    497c:	ba 07       	cpc	r27, r26
    497e:	20 f0       	brcs	.+8      	; 0x4988 <__divsf3_pse+0xaa>
    4980:	62 1b       	sub	r22, r18
    4982:	73 0b       	sbc	r23, r19
    4984:	84 0b       	sbc	r24, r20
    4986:	ba 0b       	sbc	r27, r26
    4988:	ee 1f       	adc	r30, r30
    498a:	88 f7       	brcc	.-30     	; 0x496e <__divsf3_pse+0x90>
    498c:	e0 95       	com	r30
    498e:	08 95       	ret

00004990 <__fixunssfsi>:
__fixunssfsi():
    4990:	bc d0       	rcall	.+376    	; 0x4b0a <__fp_splitA>
    4992:	88 f0       	brcs	.+34     	; 0x49b6 <__fixunssfsi+0x26>
    4994:	9f 57       	subi	r25, 0x7F	; 127
    4996:	90 f0       	brcs	.+36     	; 0x49bc <__fixunssfsi+0x2c>
    4998:	b9 2f       	mov	r27, r25
    499a:	99 27       	eor	r25, r25
    499c:	b7 51       	subi	r27, 0x17	; 23
    499e:	a0 f0       	brcs	.+40     	; 0x49c8 <__fixunssfsi+0x38>
    49a0:	d1 f0       	breq	.+52     	; 0x49d6 <__fixunssfsi+0x46>
    49a2:	66 0f       	add	r22, r22
    49a4:	77 1f       	adc	r23, r23
    49a6:	88 1f       	adc	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	1a f0       	brmi	.+6      	; 0x49b2 <__fixunssfsi+0x22>
    49ac:	ba 95       	dec	r27
    49ae:	c9 f7       	brne	.-14     	; 0x49a2 <__fixunssfsi+0x12>
    49b0:	12 c0       	rjmp	.+36     	; 0x49d6 <__fixunssfsi+0x46>
    49b2:	b1 30       	cpi	r27, 0x01	; 1
    49b4:	81 f0       	breq	.+32     	; 0x49d6 <__fixunssfsi+0x46>
    49b6:	c3 d0       	rcall	.+390    	; 0x4b3e <__fp_zero>
    49b8:	b1 e0       	ldi	r27, 0x01	; 1
    49ba:	08 95       	ret
    49bc:	c0 c0       	rjmp	.+384    	; 0x4b3e <__fp_zero>
    49be:	67 2f       	mov	r22, r23
    49c0:	78 2f       	mov	r23, r24
    49c2:	88 27       	eor	r24, r24
    49c4:	b8 5f       	subi	r27, 0xF8	; 248
    49c6:	39 f0       	breq	.+14     	; 0x49d6 <__fixunssfsi+0x46>
    49c8:	b9 3f       	cpi	r27, 0xF9	; 249
    49ca:	cc f3       	brlt	.-14     	; 0x49be <__fixunssfsi+0x2e>
    49cc:	86 95       	lsr	r24
    49ce:	77 95       	ror	r23
    49d0:	67 95       	ror	r22
    49d2:	b3 95       	inc	r27
    49d4:	d9 f7       	brne	.-10     	; 0x49cc <__fixunssfsi+0x3c>
    49d6:	3e f4       	brtc	.+14     	; 0x49e6 <__fixunssfsi+0x56>
    49d8:	90 95       	com	r25
    49da:	80 95       	com	r24
    49dc:	70 95       	com	r23
    49de:	61 95       	neg	r22
    49e0:	7f 4f       	sbci	r23, 0xFF	; 255
    49e2:	8f 4f       	sbci	r24, 0xFF	; 255
    49e4:	9f 4f       	sbci	r25, 0xFF	; 255
    49e6:	08 95       	ret

000049e8 <__floatunsisf>:
__floatunsisf():
    49e8:	e8 94       	clt
    49ea:	09 c0       	rjmp	.+18     	; 0x49fe <__floatsisf+0x12>

000049ec <__floatsisf>:
    49ec:	97 fb       	bst	r25, 7
    49ee:	3e f4       	brtc	.+14     	; 0x49fe <__floatsisf+0x12>
    49f0:	90 95       	com	r25
    49f2:	80 95       	com	r24
    49f4:	70 95       	com	r23
    49f6:	61 95       	neg	r22
    49f8:	7f 4f       	sbci	r23, 0xFF	; 255
    49fa:	8f 4f       	sbci	r24, 0xFF	; 255
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	99 23       	and	r25, r25
    4a00:	a9 f0       	breq	.+42     	; 0x4a2c <__floatsisf+0x40>
    4a02:	f9 2f       	mov	r31, r25
    4a04:	96 e9       	ldi	r25, 0x96	; 150
    4a06:	bb 27       	eor	r27, r27
    4a08:	93 95       	inc	r25
    4a0a:	f6 95       	lsr	r31
    4a0c:	87 95       	ror	r24
    4a0e:	77 95       	ror	r23
    4a10:	67 95       	ror	r22
    4a12:	b7 95       	ror	r27
    4a14:	f1 11       	cpse	r31, r1
    4a16:	f8 cf       	rjmp	.-16     	; 0x4a08 <__floatsisf+0x1c>
    4a18:	fa f4       	brpl	.+62     	; 0x4a58 <__floatsisf+0x6c>
    4a1a:	bb 0f       	add	r27, r27
    4a1c:	11 f4       	brne	.+4      	; 0x4a22 <__floatsisf+0x36>
    4a1e:	60 ff       	sbrs	r22, 0
    4a20:	1b c0       	rjmp	.+54     	; 0x4a58 <__floatsisf+0x6c>
    4a22:	6f 5f       	subi	r22, 0xFF	; 255
    4a24:	7f 4f       	sbci	r23, 0xFF	; 255
    4a26:	8f 4f       	sbci	r24, 0xFF	; 255
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	16 c0       	rjmp	.+44     	; 0x4a58 <__floatsisf+0x6c>
    4a2c:	88 23       	and	r24, r24
    4a2e:	11 f0       	breq	.+4      	; 0x4a34 <__floatsisf+0x48>
    4a30:	96 e9       	ldi	r25, 0x96	; 150
    4a32:	11 c0       	rjmp	.+34     	; 0x4a56 <__floatsisf+0x6a>
    4a34:	77 23       	and	r23, r23
    4a36:	21 f0       	breq	.+8      	; 0x4a40 <__floatsisf+0x54>
    4a38:	9e e8       	ldi	r25, 0x8E	; 142
    4a3a:	87 2f       	mov	r24, r23
    4a3c:	76 2f       	mov	r23, r22
    4a3e:	05 c0       	rjmp	.+10     	; 0x4a4a <__floatsisf+0x5e>
    4a40:	66 23       	and	r22, r22
    4a42:	71 f0       	breq	.+28     	; 0x4a60 <__floatsisf+0x74>
    4a44:	96 e8       	ldi	r25, 0x86	; 134
    4a46:	86 2f       	mov	r24, r22
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	60 e0       	ldi	r22, 0x00	; 0
    4a4c:	2a f0       	brmi	.+10     	; 0x4a58 <__floatsisf+0x6c>
    4a4e:	9a 95       	dec	r25
    4a50:	66 0f       	add	r22, r22
    4a52:	77 1f       	adc	r23, r23
    4a54:	88 1f       	adc	r24, r24
    4a56:	da f7       	brpl	.-10     	; 0x4a4e <__floatsisf+0x62>
    4a58:	88 0f       	add	r24, r24
    4a5a:	96 95       	lsr	r25
    4a5c:	87 95       	ror	r24
    4a5e:	97 f9       	bld	r25, 7
    4a60:	08 95       	ret

00004a62 <__fp_cmp>:
__fp_cmp():
    4a62:	99 0f       	add	r25, r25
    4a64:	00 08       	sbc	r0, r0
    4a66:	55 0f       	add	r21, r21
    4a68:	aa 0b       	sbc	r26, r26
    4a6a:	e0 e8       	ldi	r30, 0x80	; 128
    4a6c:	fe ef       	ldi	r31, 0xFE	; 254
    4a6e:	16 16       	cp	r1, r22
    4a70:	17 06       	cpc	r1, r23
    4a72:	e8 07       	cpc	r30, r24
    4a74:	f9 07       	cpc	r31, r25
    4a76:	c0 f0       	brcs	.+48     	; 0x4aa8 <__fp_cmp+0x46>
    4a78:	12 16       	cp	r1, r18
    4a7a:	13 06       	cpc	r1, r19
    4a7c:	e4 07       	cpc	r30, r20
    4a7e:	f5 07       	cpc	r31, r21
    4a80:	98 f0       	brcs	.+38     	; 0x4aa8 <__fp_cmp+0x46>
    4a82:	62 1b       	sub	r22, r18
    4a84:	73 0b       	sbc	r23, r19
    4a86:	84 0b       	sbc	r24, r20
    4a88:	95 0b       	sbc	r25, r21
    4a8a:	39 f4       	brne	.+14     	; 0x4a9a <__fp_cmp+0x38>
    4a8c:	0a 26       	eor	r0, r26
    4a8e:	61 f0       	breq	.+24     	; 0x4aa8 <__fp_cmp+0x46>
    4a90:	23 2b       	or	r18, r19
    4a92:	24 2b       	or	r18, r20
    4a94:	25 2b       	or	r18, r21
    4a96:	21 f4       	brne	.+8      	; 0x4aa0 <__fp_cmp+0x3e>
    4a98:	08 95       	ret
    4a9a:	0a 26       	eor	r0, r26
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <__fp_cmp+0x3e>
    4a9e:	a1 40       	sbci	r26, 0x01	; 1
    4aa0:	a6 95       	lsr	r26
    4aa2:	8f ef       	ldi	r24, 0xFF	; 255
    4aa4:	81 1d       	adc	r24, r1
    4aa6:	81 1d       	adc	r24, r1
    4aa8:	08 95       	ret

00004aaa <__fp_inf>:
__fp_inf():
    4aaa:	97 f9       	bld	r25, 7
    4aac:	9f 67       	ori	r25, 0x7F	; 127
    4aae:	80 e8       	ldi	r24, 0x80	; 128
    4ab0:	70 e0       	ldi	r23, 0x00	; 0
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	08 95       	ret

00004ab6 <__fp_nan>:
__fp_nan():
    4ab6:	9f ef       	ldi	r25, 0xFF	; 255
    4ab8:	80 ec       	ldi	r24, 0xC0	; 192
    4aba:	08 95       	ret

00004abc <__fp_pscA>:
__fp_pscA():
    4abc:	00 24       	eor	r0, r0
    4abe:	0a 94       	dec	r0
    4ac0:	16 16       	cp	r1, r22
    4ac2:	17 06       	cpc	r1, r23
    4ac4:	18 06       	cpc	r1, r24
    4ac6:	09 06       	cpc	r0, r25
    4ac8:	08 95       	ret

00004aca <__fp_pscB>:
__fp_pscB():
    4aca:	00 24       	eor	r0, r0
    4acc:	0a 94       	dec	r0
    4ace:	12 16       	cp	r1, r18
    4ad0:	13 06       	cpc	r1, r19
    4ad2:	14 06       	cpc	r1, r20
    4ad4:	05 06       	cpc	r0, r21
    4ad6:	08 95       	ret

00004ad8 <__fp_round>:
__fp_round():
    4ad8:	09 2e       	mov	r0, r25
    4ada:	03 94       	inc	r0
    4adc:	00 0c       	add	r0, r0
    4ade:	11 f4       	brne	.+4      	; 0x4ae4 <__fp_round+0xc>
    4ae0:	88 23       	and	r24, r24
    4ae2:	52 f0       	brmi	.+20     	; 0x4af8 <__fp_round+0x20>
    4ae4:	bb 0f       	add	r27, r27
    4ae6:	40 f4       	brcc	.+16     	; 0x4af8 <__fp_round+0x20>
    4ae8:	bf 2b       	or	r27, r31
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__fp_round+0x18>
    4aec:	60 ff       	sbrs	r22, 0
    4aee:	04 c0       	rjmp	.+8      	; 0x4af8 <__fp_round+0x20>
    4af0:	6f 5f       	subi	r22, 0xFF	; 255
    4af2:	7f 4f       	sbci	r23, 0xFF	; 255
    4af4:	8f 4f       	sbci	r24, 0xFF	; 255
    4af6:	9f 4f       	sbci	r25, 0xFF	; 255
    4af8:	08 95       	ret

00004afa <__fp_split3>:
__fp_split3():
    4afa:	57 fd       	sbrc	r21, 7
    4afc:	90 58       	subi	r25, 0x80	; 128
    4afe:	44 0f       	add	r20, r20
    4b00:	55 1f       	adc	r21, r21
    4b02:	59 f0       	breq	.+22     	; 0x4b1a <__fp_splitA+0x10>
    4b04:	5f 3f       	cpi	r21, 0xFF	; 255
    4b06:	71 f0       	breq	.+28     	; 0x4b24 <__fp_splitA+0x1a>
    4b08:	47 95       	ror	r20

00004b0a <__fp_splitA>:
    4b0a:	88 0f       	add	r24, r24
    4b0c:	97 fb       	bst	r25, 7
    4b0e:	99 1f       	adc	r25, r25
    4b10:	61 f0       	breq	.+24     	; 0x4b2a <__fp_splitA+0x20>
    4b12:	9f 3f       	cpi	r25, 0xFF	; 255
    4b14:	79 f0       	breq	.+30     	; 0x4b34 <__fp_splitA+0x2a>
    4b16:	87 95       	ror	r24
    4b18:	08 95       	ret
    4b1a:	12 16       	cp	r1, r18
    4b1c:	13 06       	cpc	r1, r19
    4b1e:	14 06       	cpc	r1, r20
    4b20:	55 1f       	adc	r21, r21
    4b22:	f2 cf       	rjmp	.-28     	; 0x4b08 <__fp_split3+0xe>
    4b24:	46 95       	lsr	r20
    4b26:	f1 df       	rcall	.-30     	; 0x4b0a <__fp_splitA>
    4b28:	08 c0       	rjmp	.+16     	; 0x4b3a <__fp_splitA+0x30>
    4b2a:	16 16       	cp	r1, r22
    4b2c:	17 06       	cpc	r1, r23
    4b2e:	18 06       	cpc	r1, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	f1 cf       	rjmp	.-30     	; 0x4b16 <__fp_splitA+0xc>
    4b34:	86 95       	lsr	r24
    4b36:	71 05       	cpc	r23, r1
    4b38:	61 05       	cpc	r22, r1
    4b3a:	08 94       	sec
    4b3c:	08 95       	ret

00004b3e <__fp_zero>:
__fp_zero():
    4b3e:	e8 94       	clt

00004b40 <__fp_szero>:
    4b40:	bb 27       	eor	r27, r27
    4b42:	66 27       	eor	r22, r22
    4b44:	77 27       	eor	r23, r23
    4b46:	cb 01       	movw	r24, r22
    4b48:	97 f9       	bld	r25, 7
    4b4a:	08 95       	ret

00004b4c <__gesf2>:
__gesf2():
    4b4c:	8a df       	rcall	.-236    	; 0x4a62 <__fp_cmp>
    4b4e:	08 f4       	brcc	.+2      	; 0x4b52 <__gesf2+0x6>
    4b50:	8f ef       	ldi	r24, 0xFF	; 255
    4b52:	08 95       	ret

00004b54 <__mulsf3>:
__mulsf3():
    4b54:	0b d0       	rcall	.+22     	; 0x4b6c <__mulsf3x>
    4b56:	c0 cf       	rjmp	.-128    	; 0x4ad8 <__fp_round>
    4b58:	b1 df       	rcall	.-158    	; 0x4abc <__fp_pscA>
    4b5a:	28 f0       	brcs	.+10     	; 0x4b66 <__mulsf3+0x12>
    4b5c:	b6 df       	rcall	.-148    	; 0x4aca <__fp_pscB>
    4b5e:	18 f0       	brcs	.+6      	; 0x4b66 <__mulsf3+0x12>
    4b60:	95 23       	and	r25, r21
    4b62:	09 f0       	breq	.+2      	; 0x4b66 <__mulsf3+0x12>
    4b64:	a2 cf       	rjmp	.-188    	; 0x4aaa <__fp_inf>
    4b66:	a7 cf       	rjmp	.-178    	; 0x4ab6 <__fp_nan>
    4b68:	11 24       	eor	r1, r1
    4b6a:	ea cf       	rjmp	.-44     	; 0x4b40 <__fp_szero>

00004b6c <__mulsf3x>:
__mulsf3x():
    4b6c:	c6 df       	rcall	.-116    	; 0x4afa <__fp_split3>
    4b6e:	a0 f3       	brcs	.-24     	; 0x4b58 <__mulsf3+0x4>

00004b70 <__mulsf3_pse>:
    4b70:	95 9f       	mul	r25, r21
    4b72:	d1 f3       	breq	.-12     	; 0x4b68 <__mulsf3+0x14>
    4b74:	95 0f       	add	r25, r21
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	55 1f       	adc	r21, r21
    4b7a:	62 9f       	mul	r22, r18
    4b7c:	f0 01       	movw	r30, r0
    4b7e:	72 9f       	mul	r23, r18
    4b80:	bb 27       	eor	r27, r27
    4b82:	f0 0d       	add	r31, r0
    4b84:	b1 1d       	adc	r27, r1
    4b86:	63 9f       	mul	r22, r19
    4b88:	aa 27       	eor	r26, r26
    4b8a:	f0 0d       	add	r31, r0
    4b8c:	b1 1d       	adc	r27, r1
    4b8e:	aa 1f       	adc	r26, r26
    4b90:	64 9f       	mul	r22, r20
    4b92:	66 27       	eor	r22, r22
    4b94:	b0 0d       	add	r27, r0
    4b96:	a1 1d       	adc	r26, r1
    4b98:	66 1f       	adc	r22, r22
    4b9a:	82 9f       	mul	r24, r18
    4b9c:	22 27       	eor	r18, r18
    4b9e:	b0 0d       	add	r27, r0
    4ba0:	a1 1d       	adc	r26, r1
    4ba2:	62 1f       	adc	r22, r18
    4ba4:	73 9f       	mul	r23, r19
    4ba6:	b0 0d       	add	r27, r0
    4ba8:	a1 1d       	adc	r26, r1
    4baa:	62 1f       	adc	r22, r18
    4bac:	83 9f       	mul	r24, r19
    4bae:	a0 0d       	add	r26, r0
    4bb0:	61 1d       	adc	r22, r1
    4bb2:	22 1f       	adc	r18, r18
    4bb4:	74 9f       	mul	r23, r20
    4bb6:	33 27       	eor	r19, r19
    4bb8:	a0 0d       	add	r26, r0
    4bba:	61 1d       	adc	r22, r1
    4bbc:	23 1f       	adc	r18, r19
    4bbe:	84 9f       	mul	r24, r20
    4bc0:	60 0d       	add	r22, r0
    4bc2:	21 1d       	adc	r18, r1
    4bc4:	82 2f       	mov	r24, r18
    4bc6:	76 2f       	mov	r23, r22
    4bc8:	6a 2f       	mov	r22, r26
    4bca:	11 24       	eor	r1, r1
    4bcc:	9f 57       	subi	r25, 0x7F	; 127
    4bce:	50 40       	sbci	r21, 0x00	; 0
    4bd0:	8a f0       	brmi	.+34     	; 0x4bf4 <__mulsf3_pse+0x84>
    4bd2:	e1 f0       	breq	.+56     	; 0x4c0c <__mulsf3_pse+0x9c>
    4bd4:	88 23       	and	r24, r24
    4bd6:	4a f0       	brmi	.+18     	; 0x4bea <__mulsf3_pse+0x7a>
    4bd8:	ee 0f       	add	r30, r30
    4bda:	ff 1f       	adc	r31, r31
    4bdc:	bb 1f       	adc	r27, r27
    4bde:	66 1f       	adc	r22, r22
    4be0:	77 1f       	adc	r23, r23
    4be2:	88 1f       	adc	r24, r24
    4be4:	91 50       	subi	r25, 0x01	; 1
    4be6:	50 40       	sbci	r21, 0x00	; 0
    4be8:	a9 f7       	brne	.-22     	; 0x4bd4 <__mulsf3_pse+0x64>
    4bea:	9e 3f       	cpi	r25, 0xFE	; 254
    4bec:	51 05       	cpc	r21, r1
    4bee:	70 f0       	brcs	.+28     	; 0x4c0c <__mulsf3_pse+0x9c>
    4bf0:	5c cf       	rjmp	.-328    	; 0x4aaa <__fp_inf>
    4bf2:	a6 cf       	rjmp	.-180    	; 0x4b40 <__fp_szero>
    4bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    4bf6:	ec f3       	brlt	.-6      	; 0x4bf2 <__mulsf3_pse+0x82>
    4bf8:	98 3e       	cpi	r25, 0xE8	; 232
    4bfa:	dc f3       	brlt	.-10     	; 0x4bf2 <__mulsf3_pse+0x82>
    4bfc:	86 95       	lsr	r24
    4bfe:	77 95       	ror	r23
    4c00:	67 95       	ror	r22
    4c02:	b7 95       	ror	r27
    4c04:	f7 95       	ror	r31
    4c06:	e7 95       	ror	r30
    4c08:	9f 5f       	subi	r25, 0xFF	; 255
    4c0a:	c1 f7       	brne	.-16     	; 0x4bfc <__mulsf3_pse+0x8c>
    4c0c:	fe 2b       	or	r31, r30
    4c0e:	88 0f       	add	r24, r24
    4c10:	91 1d       	adc	r25, r1
    4c12:	96 95       	lsr	r25
    4c14:	87 95       	ror	r24
    4c16:	97 f9       	bld	r25, 7
    4c18:	08 95       	ret

00004c1a <__unordsf2>:
    4c1a:	23 df       	rcall	.-442    	; 0x4a62 <__fp_cmp>
    4c1c:	88 0b       	sbc	r24, r24
    4c1e:	99 0b       	sbc	r25, r25
    4c20:	08 95       	ret

00004c22 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4c22:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4c24:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4c26:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4c28:	07 c0       	rjmp	.+14     	; 0x4c38 <__udivmodhi4_ep>

00004c2a <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4c2a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4c2c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4c2e:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4c30:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4c32:	10 f0       	brcs	.+4      	; 0x4c38 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4c34:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4c36:	b7 0b       	sbc	r27, r23

00004c38 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4c38:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4c3a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4c3c:	5a 95       	dec	r21
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4c3e:	a9 f7       	brne	.-22     	; 0x4c2a <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4c40:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4c42:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4c44:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4c46:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4c48:	08 95       	ret

00004c4a <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    4c4a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    4c4c:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    4c4e:	16 f4       	brtc	.+4      	; 0x4c54 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    4c50:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    4c52:	06 d0       	rcall	.+12     	; 0x4c60 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    4c54:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    4c56:	08 d0       	rcall	.+16     	; 0x4c68 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    4c58:	e4 df       	rcall	.-56     	; 0x4c22 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    4c5a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    4c5c:	05 d0       	rcall	.+10     	; 0x4c68 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    4c5e:	3e f4       	brtc	.+14     	; 0x4c6e <__divmodhi4_exit>

00004c60 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    4c60:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    4c62:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    4c64:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    4c66:	08 95       	ret

00004c68 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    4c68:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    4c6a:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    4c6c:	7f 4f       	sbci	r23, 0xFF	; 255

00004c6e <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    4c6e:	08 95       	ret

00004c70 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4c70:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4c72:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4c74:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4c76:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4c78:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4c7a:	0d c0       	rjmp	.+26     	; 0x4c96 <__udivmodsi4_ep>

00004c7c <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4c7c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4c7e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4c80:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4c82:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4c84:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4c86:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4c88:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4c8a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4c8c:	20 f0       	brcs	.+8      	; 0x4c96 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4c8e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4c90:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4c92:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4c94:	f5 0b       	sbc	r31, r21

00004c96 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4c96:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4c98:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4c9a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4c9c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4c9e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4ca0:	69 f7       	brne	.-38     	; 0x4c7c <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4ca2:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4ca4:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4ca6:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4ca8:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4caa:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4cac:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4cae:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4cb0:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4cb2:	08 95       	ret

00004cb4 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    4cb4:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    4cb6:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    4cb8:	16 f4       	brtc	.+4      	; 0x4cbe <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    4cba:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    4cbc:	0f d0       	rcall	.+30     	; 0x4cdc <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    4cbe:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    4cc0:	05 d0       	rcall	.+10     	; 0x4ccc <__divmodsi4_neg2>
    4cc2:	d6 df       	rcall	.-84     	; 0x4c70 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    4cc4:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    4cc6:	02 d0       	rcall	.+4      	; 0x4ccc <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    4cc8:	46 f4       	brtc	.+16     	; 0x4cda <__divmodsi4_exit>
    4cca:	08 c0       	rjmp	.+16     	; 0x4cdc <__negsi2>

00004ccc <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    4ccc:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    4cce:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    4cd0:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    4cd2:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    4cd4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    4cd6:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    4cd8:	5f 4f       	sbci	r21, 0xFF	; 255

00004cda <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    4cda:	08 95       	ret

00004cdc <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    4cdc:	90 95       	com	r25
    4cde:	80 95       	com	r24
    4ce0:	70 95       	com	r23
    4ce2:	61 95       	neg	r22
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4cea:	08 95       	ret

00004cec <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4cec:	38 d0       	rcall	.+112    	; 0x4d5e <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4cee:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4cf0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4cf2:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4cf4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4cf6:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4cf8:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4cfa:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4cfc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4cfe:	08 95       	ret

00004d00 <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    4d00:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    4d02:	10 94       	com	r1

00004d04 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    4d04:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    4d06:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    4d08:	98 f0       	brcs	.+38     	; 0x4d30 <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    4d0a:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    4d0c:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    4d0e:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    4d10:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    4d12:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    4d14:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    4d16:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    4d18:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    4d1a:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    4d1c:	f4 cf       	rjmp	.-24     	; 0x4d06 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    4d1e:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    4d20:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    4d22:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    4d24:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    4d26:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    4d28:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    4d2a:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    4d2c:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    4d2e:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    4d30:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    4d32:	aa f7       	brpl	.-22     	; 0x4d1e <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    4d34:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    4d36:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    4d38:	08 95       	ret

00004d3a <__cmpdi2_s8>:
__cmpdi2_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    4d3a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    4d3c:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    4d3e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    4d40:	2a 17       	cp	r18, r26
    4d42:	30 05       	cpc	r19, r0
    4d44:	40 05       	cpc	r20, r0
    4d46:	50 05       	cpc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    4d48:	60 05       	cpc	r22, r0
    4d4a:	70 05       	cpc	r23, r0
    4d4c:	80 05       	cpc	r24, r0
    4d4e:	90 05       	cpc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    4d50:	08 95       	ret

00004d52 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4d52:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4d54:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4d56:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4d58:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4d5a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4d5c:	09 94       	ijmp

00004d5e <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4d5e:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4d60:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4d62:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4d64:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    4d66:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    4d68:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    4d6a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    4d6c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    4d6e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    4d70:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    4d72:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    4d74:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    4d76:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    4d78:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    4d7a:	08 95       	ret

00004d7c <malloc>:
malloc():
    4d7c:	0f 93       	push	r16
    4d7e:	1f 93       	push	r17
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	82 30       	cpi	r24, 0x02	; 2
    4d86:	91 05       	cpc	r25, r1
    4d88:	10 f4       	brcc	.+4      	; 0x4d8e <malloc+0x12>
    4d8a:	82 e0       	ldi	r24, 0x02	; 2
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	e0 91 d9 28 	lds	r30, 0x28D9	; 0x8028d9 <__flp>
    4d92:	f0 91 da 28 	lds	r31, 0x28DA	; 0x8028da <__flp+0x1>
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	b0 e0       	ldi	r27, 0x00	; 0
    4d9c:	a0 e0       	ldi	r26, 0x00	; 0
    4d9e:	30 97       	sbiw	r30, 0x00	; 0
    4da0:	99 f4       	brne	.+38     	; 0x4dc8 <malloc+0x4c>
    4da2:	21 15       	cp	r18, r1
    4da4:	31 05       	cpc	r19, r1
    4da6:	09 f4       	brne	.+2      	; 0x4daa <malloc+0x2e>
    4da8:	4a c0       	rjmp	.+148    	; 0x4e3e <malloc+0xc2>
    4daa:	28 1b       	sub	r18, r24
    4dac:	39 0b       	sbc	r19, r25
    4dae:	24 30       	cpi	r18, 0x04	; 4
    4db0:	31 05       	cpc	r19, r1
    4db2:	d8 f5       	brcc	.+118    	; 0x4e2a <malloc+0xae>
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	9b 81       	ldd	r25, Y+3	; 0x03
    4db8:	61 15       	cp	r22, r1
    4dba:	71 05       	cpc	r23, r1
    4dbc:	89 f1       	breq	.+98     	; 0x4e20 <malloc+0xa4>
    4dbe:	fb 01       	movw	r30, r22
    4dc0:	82 83       	std	Z+2, r24	; 0x02
    4dc2:	93 83       	std	Z+3, r25	; 0x03
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	11 c0       	rjmp	.+34     	; 0x4dea <malloc+0x6e>
    4dc8:	40 81       	ld	r20, Z
    4dca:	51 81       	ldd	r21, Z+1	; 0x01
    4dcc:	02 81       	ldd	r16, Z+2	; 0x02
    4dce:	13 81       	ldd	r17, Z+3	; 0x03
    4dd0:	48 17       	cp	r20, r24
    4dd2:	59 07       	cpc	r21, r25
    4dd4:	e0 f0       	brcs	.+56     	; 0x4e0e <malloc+0x92>
    4dd6:	48 17       	cp	r20, r24
    4dd8:	59 07       	cpc	r21, r25
    4dda:	99 f4       	brne	.+38     	; 0x4e02 <malloc+0x86>
    4ddc:	10 97       	sbiw	r26, 0x00	; 0
    4dde:	61 f0       	breq	.+24     	; 0x4df8 <malloc+0x7c>
    4de0:	12 96       	adiw	r26, 0x02	; 2
    4de2:	0c 93       	st	X, r16
    4de4:	12 97       	sbiw	r26, 0x02	; 2
    4de6:	13 96       	adiw	r26, 0x03	; 3
    4de8:	1c 93       	st	X, r17
    4dea:	32 96       	adiw	r30, 0x02	; 2
    4dec:	cf 01       	movw	r24, r30
    4dee:	df 91       	pop	r29
    4df0:	cf 91       	pop	r28
    4df2:	1f 91       	pop	r17
    4df4:	0f 91       	pop	r16
    4df6:	08 95       	ret
    4df8:	00 93 d9 28 	sts	0x28D9, r16	; 0x8028d9 <__flp>
    4dfc:	10 93 da 28 	sts	0x28DA, r17	; 0x8028da <__flp+0x1>
    4e00:	f4 cf       	rjmp	.-24     	; 0x4dea <malloc+0x6e>
    4e02:	21 15       	cp	r18, r1
    4e04:	31 05       	cpc	r19, r1
    4e06:	51 f0       	breq	.+20     	; 0x4e1c <malloc+0xa0>
    4e08:	42 17       	cp	r20, r18
    4e0a:	53 07       	cpc	r21, r19
    4e0c:	38 f0       	brcs	.+14     	; 0x4e1c <malloc+0xa0>
    4e0e:	a9 01       	movw	r20, r18
    4e10:	db 01       	movw	r26, r22
    4e12:	9a 01       	movw	r18, r20
    4e14:	bd 01       	movw	r22, r26
    4e16:	df 01       	movw	r26, r30
    4e18:	f8 01       	movw	r30, r16
    4e1a:	c1 cf       	rjmp	.-126    	; 0x4d9e <malloc+0x22>
    4e1c:	ef 01       	movw	r28, r30
    4e1e:	f9 cf       	rjmp	.-14     	; 0x4e12 <malloc+0x96>
    4e20:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <__flp>
    4e24:	90 93 da 28 	sts	0x28DA, r25	; 0x8028da <__flp+0x1>
    4e28:	cd cf       	rjmp	.-102    	; 0x4dc4 <malloc+0x48>
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e2 0f       	add	r30, r18
    4e2e:	f3 1f       	adc	r31, r19
    4e30:	81 93       	st	Z+, r24
    4e32:	91 93       	st	Z+, r25
    4e34:	22 50       	subi	r18, 0x02	; 2
    4e36:	31 09       	sbc	r19, r1
    4e38:	28 83       	st	Y, r18
    4e3a:	39 83       	std	Y+1, r19	; 0x01
    4e3c:	d7 cf       	rjmp	.-82     	; 0x4dec <malloc+0x70>
    4e3e:	20 91 d7 28 	lds	r18, 0x28D7	; 0x8028d7 <__brkval>
    4e42:	30 91 d8 28 	lds	r19, 0x28D8	; 0x8028d8 <__brkval+0x1>
    4e46:	23 2b       	or	r18, r19
    4e48:	41 f4       	brne	.+16     	; 0x4e5a <malloc+0xde>
    4e4a:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    4e4e:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    4e52:	20 93 d7 28 	sts	0x28D7, r18	; 0x8028d7 <__brkval>
    4e56:	30 93 d8 28 	sts	0x28D8, r19	; 0x8028d8 <__brkval+0x1>
    4e5a:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    4e5e:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    4e62:	21 15       	cp	r18, r1
    4e64:	31 05       	cpc	r19, r1
    4e66:	41 f4       	brne	.+16     	; 0x4e78 <malloc+0xfc>
    4e68:	2d b7       	in	r18, 0x3d	; 61
    4e6a:	3e b7       	in	r19, 0x3e	; 62
    4e6c:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    4e70:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    4e74:	24 1b       	sub	r18, r20
    4e76:	35 0b       	sbc	r19, r21
    4e78:	e0 91 d7 28 	lds	r30, 0x28D7	; 0x8028d7 <__brkval>
    4e7c:	f0 91 d8 28 	lds	r31, 0x28D8	; 0x8028d8 <__brkval+0x1>
    4e80:	e2 17       	cp	r30, r18
    4e82:	f3 07       	cpc	r31, r19
    4e84:	a0 f4       	brcc	.+40     	; 0x4eae <malloc+0x132>
    4e86:	2e 1b       	sub	r18, r30
    4e88:	3f 0b       	sbc	r19, r31
    4e8a:	28 17       	cp	r18, r24
    4e8c:	39 07       	cpc	r19, r25
    4e8e:	78 f0       	brcs	.+30     	; 0x4eae <malloc+0x132>
    4e90:	ac 01       	movw	r20, r24
    4e92:	4e 5f       	subi	r20, 0xFE	; 254
    4e94:	5f 4f       	sbci	r21, 0xFF	; 255
    4e96:	24 17       	cp	r18, r20
    4e98:	35 07       	cpc	r19, r21
    4e9a:	48 f0       	brcs	.+18     	; 0x4eae <malloc+0x132>
    4e9c:	4e 0f       	add	r20, r30
    4e9e:	5f 1f       	adc	r21, r31
    4ea0:	40 93 d7 28 	sts	0x28D7, r20	; 0x8028d7 <__brkval>
    4ea4:	50 93 d8 28 	sts	0x28D8, r21	; 0x8028d8 <__brkval+0x1>
    4ea8:	81 93       	st	Z+, r24
    4eaa:	91 93       	st	Z+, r25
    4eac:	9f cf       	rjmp	.-194    	; 0x4dec <malloc+0x70>
    4eae:	f0 e0       	ldi	r31, 0x00	; 0
    4eb0:	e0 e0       	ldi	r30, 0x00	; 0
    4eb2:	9c cf       	rjmp	.-200    	; 0x4dec <malloc+0x70>

00004eb4 <free>:
free():
    4eb4:	cf 93       	push	r28
    4eb6:	df 93       	push	r29
    4eb8:	00 97       	sbiw	r24, 0x00	; 0
    4eba:	e9 f0       	breq	.+58     	; 0x4ef6 <free+0x42>
    4ebc:	fc 01       	movw	r30, r24
    4ebe:	32 97       	sbiw	r30, 0x02	; 2
    4ec0:	12 82       	std	Z+2, r1	; 0x02
    4ec2:	13 82       	std	Z+3, r1	; 0x03
    4ec4:	a0 91 d9 28 	lds	r26, 0x28D9	; 0x8028d9 <__flp>
    4ec8:	b0 91 da 28 	lds	r27, 0x28DA	; 0x8028da <__flp+0x1>
    4ecc:	ed 01       	movw	r28, r26
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	10 97       	sbiw	r26, 0x00	; 0
    4ed4:	a1 f4       	brne	.+40     	; 0x4efe <free+0x4a>
    4ed6:	20 81       	ld	r18, Z
    4ed8:	31 81       	ldd	r19, Z+1	; 0x01
    4eda:	82 0f       	add	r24, r18
    4edc:	93 1f       	adc	r25, r19
    4ede:	20 91 d7 28 	lds	r18, 0x28D7	; 0x8028d7 <__brkval>
    4ee2:	30 91 d8 28 	lds	r19, 0x28D8	; 0x8028d8 <__brkval+0x1>
    4ee6:	28 17       	cp	r18, r24
    4ee8:	39 07       	cpc	r19, r25
    4eea:	09 f0       	breq	.+2      	; 0x4eee <free+0x3a>
    4eec:	61 c0       	rjmp	.+194    	; 0x4fb0 <free+0xfc>
    4eee:	e0 93 d7 28 	sts	0x28D7, r30	; 0x8028d7 <__brkval>
    4ef2:	f0 93 d8 28 	sts	0x28D8, r31	; 0x8028d8 <__brkval+0x1>
    4ef6:	df 91       	pop	r29
    4ef8:	cf 91       	pop	r28
    4efa:	08 95       	ret
    4efc:	ea 01       	movw	r28, r20
    4efe:	ce 17       	cp	r28, r30
    4f00:	df 07       	cpc	r29, r31
    4f02:	e8 f5       	brcc	.+122    	; 0x4f7e <free+0xca>
    4f04:	4a 81       	ldd	r20, Y+2	; 0x02
    4f06:	5b 81       	ldd	r21, Y+3	; 0x03
    4f08:	9e 01       	movw	r18, r28
    4f0a:	41 15       	cp	r20, r1
    4f0c:	51 05       	cpc	r21, r1
    4f0e:	b1 f7       	brne	.-20     	; 0x4efc <free+0x48>
    4f10:	e9 01       	movw	r28, r18
    4f12:	ea 83       	std	Y+2, r30	; 0x02
    4f14:	fb 83       	std	Y+3, r31	; 0x03
    4f16:	49 91       	ld	r20, Y+
    4f18:	59 91       	ld	r21, Y+
    4f1a:	c4 0f       	add	r28, r20
    4f1c:	d5 1f       	adc	r29, r21
    4f1e:	ec 17       	cp	r30, r28
    4f20:	fd 07       	cpc	r31, r29
    4f22:	61 f4       	brne	.+24     	; 0x4f3c <free+0x88>
    4f24:	80 81       	ld	r24, Z
    4f26:	91 81       	ldd	r25, Z+1	; 0x01
    4f28:	02 96       	adiw	r24, 0x02	; 2
    4f2a:	84 0f       	add	r24, r20
    4f2c:	95 1f       	adc	r25, r21
    4f2e:	e9 01       	movw	r28, r18
    4f30:	88 83       	st	Y, r24
    4f32:	99 83       	std	Y+1, r25	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	8a 83       	std	Y+2, r24	; 0x02
    4f3a:	9b 83       	std	Y+3, r25	; 0x03
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	e0 e0       	ldi	r30, 0x00	; 0
    4f40:	12 96       	adiw	r26, 0x02	; 2
    4f42:	8d 91       	ld	r24, X+
    4f44:	9c 91       	ld	r25, X
    4f46:	13 97       	sbiw	r26, 0x03	; 3
    4f48:	00 97       	sbiw	r24, 0x00	; 0
    4f4a:	b9 f5       	brne	.+110    	; 0x4fba <free+0x106>
    4f4c:	2d 91       	ld	r18, X+
    4f4e:	3c 91       	ld	r19, X
    4f50:	11 97       	sbiw	r26, 0x01	; 1
    4f52:	cd 01       	movw	r24, r26
    4f54:	02 96       	adiw	r24, 0x02	; 2
    4f56:	82 0f       	add	r24, r18
    4f58:	93 1f       	adc	r25, r19
    4f5a:	20 91 d7 28 	lds	r18, 0x28D7	; 0x8028d7 <__brkval>
    4f5e:	30 91 d8 28 	lds	r19, 0x28D8	; 0x8028d8 <__brkval+0x1>
    4f62:	28 17       	cp	r18, r24
    4f64:	39 07       	cpc	r19, r25
    4f66:	39 f6       	brne	.-114    	; 0x4ef6 <free+0x42>
    4f68:	30 97       	sbiw	r30, 0x00	; 0
    4f6a:	51 f5       	brne	.+84     	; 0x4fc0 <free+0x10c>
    4f6c:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <__flp>
    4f70:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <__flp+0x1>
    4f74:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <__brkval>
    4f78:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <__brkval+0x1>
    4f7c:	bc cf       	rjmp	.-136    	; 0x4ef6 <free+0x42>
    4f7e:	c2 83       	std	Z+2, r28	; 0x02
    4f80:	d3 83       	std	Z+3, r29	; 0x03
    4f82:	40 81       	ld	r20, Z
    4f84:	51 81       	ldd	r21, Z+1	; 0x01
    4f86:	84 0f       	add	r24, r20
    4f88:	95 1f       	adc	r25, r21
    4f8a:	c8 17       	cp	r28, r24
    4f8c:	d9 07       	cpc	r29, r25
    4f8e:	61 f4       	brne	.+24     	; 0x4fa8 <free+0xf4>
    4f90:	4e 5f       	subi	r20, 0xFE	; 254
    4f92:	5f 4f       	sbci	r21, 0xFF	; 255
    4f94:	88 81       	ld	r24, Y
    4f96:	99 81       	ldd	r25, Y+1	; 0x01
    4f98:	48 0f       	add	r20, r24
    4f9a:	59 1f       	adc	r21, r25
    4f9c:	40 83       	st	Z, r20
    4f9e:	51 83       	std	Z+1, r21	; 0x01
    4fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa4:	82 83       	std	Z+2, r24	; 0x02
    4fa6:	93 83       	std	Z+3, r25	; 0x03
    4fa8:	21 15       	cp	r18, r1
    4faa:	31 05       	cpc	r19, r1
    4fac:	09 f0       	breq	.+2      	; 0x4fb0 <free+0xfc>
    4fae:	b0 cf       	rjmp	.-160    	; 0x4f10 <free+0x5c>
    4fb0:	e0 93 d9 28 	sts	0x28D9, r30	; 0x8028d9 <__flp>
    4fb4:	f0 93 da 28 	sts	0x28DA, r31	; 0x8028da <__flp+0x1>
    4fb8:	9e cf       	rjmp	.-196    	; 0x4ef6 <free+0x42>
    4fba:	fd 01       	movw	r30, r26
    4fbc:	dc 01       	movw	r26, r24
    4fbe:	c0 cf       	rjmp	.-128    	; 0x4f40 <free+0x8c>
    4fc0:	12 82       	std	Z+2, r1	; 0x02
    4fc2:	13 82       	std	Z+3, r1	; 0x03
    4fc4:	d7 cf       	rjmp	.-82     	; 0x4f74 <free+0xc0>

00004fc6 <abort>:
abort():
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	f8 94       	cli
    4fcc:	07 c0       	rjmp	.+14     	; 0x4fdc <__do_global_dtors>

00004fce <memset>:
memset():
    4fce:	dc 01       	movw	r26, r24
    4fd0:	01 c0       	rjmp	.+2      	; 0x4fd4 <memset+0x6>
    4fd2:	6d 93       	st	X+, r22
    4fd4:	41 50       	subi	r20, 0x01	; 1
    4fd6:	50 40       	sbci	r21, 0x00	; 0
    4fd8:	e0 f7       	brcc	.-8      	; 0x4fd2 <memset+0x4>
    4fda:	08 95       	ret

00004fdc <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4fdc:	16 e0       	ldi	r17, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4fde:	c5 e8       	ldi	r28, 0x85	; 133
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4fe0:	d6 e0       	ldi	r29, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4fe2:	03 c0       	rjmp	.+6      	; 0x4fea <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4fe4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4fe6:	b5 de       	rcall	.-662    	; 0x4d52 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4fe8:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4fea:	c6 38       	cpi	r28, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4fec:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4fee:	d1 f7       	brne	.-12     	; 0x4fe4 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4ff0:	f8 94       	cli

00004ff2 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4ff2:	ff cf       	rjmp	.-2      	; 0x4ff2 <__stop_program>
